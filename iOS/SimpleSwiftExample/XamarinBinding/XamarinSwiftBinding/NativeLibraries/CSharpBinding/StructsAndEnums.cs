using System;
using System.Runtime.InteropServices;
using Darwin;
using Foundation;
using ObjCRuntime;
using ObjectiveC;

namespace SampleSwiftLibrary
{
	static class CFunctions
	{
		// extern _Complex float cacosf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] cacosf ([unsupported Complex: _Complex float]);

		// extern _Complex float cacosf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] cacosf ([unsupported Complex: _Complex float]);

		// extern _Complex double cacos (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] cacos ([unsupported Complex: _Complex double]);

		// extern _Complex double cacos (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] cacos ([unsupported Complex: _Complex double]);

		// extern _Complex long double cacosl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] cacosl ([unsupported Complex: _Complex long double]);

		// extern _Complex long double cacosl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] cacosl ([unsupported Complex: _Complex long double]);

		// extern _Complex float casinf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] casinf ([unsupported Complex: _Complex float]);

		// extern _Complex float casinf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] casinf ([unsupported Complex: _Complex float]);

		// extern _Complex double casin (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] casin ([unsupported Complex: _Complex double]);

		// extern _Complex double casin (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] casin ([unsupported Complex: _Complex double]);

		// extern _Complex long double casinl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] casinl ([unsupported Complex: _Complex long double]);

		// extern _Complex long double casinl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] casinl ([unsupported Complex: _Complex long double]);

		// extern _Complex float catanf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] catanf ([unsupported Complex: _Complex float]);

		// extern _Complex float catanf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] catanf ([unsupported Complex: _Complex float]);

		// extern _Complex double catan (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] catan ([unsupported Complex: _Complex double]);

		// extern _Complex double catan (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] catan ([unsupported Complex: _Complex double]);

		// extern _Complex long double catanl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] catanl ([unsupported Complex: _Complex long double]);

		// extern _Complex long double catanl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] catanl ([unsupported Complex: _Complex long double]);

		// extern _Complex float ccosf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] ccosf ([unsupported Complex: _Complex float]);

		// extern _Complex float ccosf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] ccosf ([unsupported Complex: _Complex float]);

		// extern _Complex double ccos (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] ccos ([unsupported Complex: _Complex double]);

		// extern _Complex double ccos (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] ccos ([unsupported Complex: _Complex double]);

		// extern _Complex long double ccosl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] ccosl ([unsupported Complex: _Complex long double]);

		// extern _Complex long double ccosl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] ccosl ([unsupported Complex: _Complex long double]);

		// extern _Complex float csinf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] csinf ([unsupported Complex: _Complex float]);

		// extern _Complex float csinf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] csinf ([unsupported Complex: _Complex float]);

		// extern _Complex double csin (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] csin ([unsupported Complex: _Complex double]);

		// extern _Complex double csin (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] csin ([unsupported Complex: _Complex double]);

		// extern _Complex long double csinl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] csinl ([unsupported Complex: _Complex long double]);

		// extern _Complex long double csinl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] csinl ([unsupported Complex: _Complex long double]);

		// extern _Complex float ctanf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] ctanf ([unsupported Complex: _Complex float]);

		// extern _Complex float ctanf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] ctanf ([unsupported Complex: _Complex float]);

		// extern _Complex double ctan (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] ctan ([unsupported Complex: _Complex double]);

		// extern _Complex double ctan (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] ctan ([unsupported Complex: _Complex double]);

		// extern _Complex long double ctanl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] ctanl ([unsupported Complex: _Complex long double]);

		// extern _Complex long double ctanl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] ctanl ([unsupported Complex: _Complex long double]);

		// extern _Complex float cacoshf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] cacoshf ([unsupported Complex: _Complex float]);

		// extern _Complex float cacoshf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] cacoshf ([unsupported Complex: _Complex float]);

		// extern _Complex double cacosh (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] cacosh ([unsupported Complex: _Complex double]);

		// extern _Complex double cacosh (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] cacosh ([unsupported Complex: _Complex double]);

		// extern _Complex long double cacoshl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] cacoshl ([unsupported Complex: _Complex long double]);

		// extern _Complex long double cacoshl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] cacoshl ([unsupported Complex: _Complex long double]);

		// extern _Complex float casinhf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] casinhf ([unsupported Complex: _Complex float]);

		// extern _Complex float casinhf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] casinhf ([unsupported Complex: _Complex float]);

		// extern _Complex double casinh (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] casinh ([unsupported Complex: _Complex double]);

		// extern _Complex double casinh (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] casinh ([unsupported Complex: _Complex double]);

		// extern _Complex long double casinhl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] casinhl ([unsupported Complex: _Complex long double]);

		// extern _Complex long double casinhl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] casinhl ([unsupported Complex: _Complex long double]);

		// extern _Complex float catanhf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] catanhf ([unsupported Complex: _Complex float]);

		// extern _Complex float catanhf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] catanhf ([unsupported Complex: _Complex float]);

		// extern _Complex double catanh (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] catanh ([unsupported Complex: _Complex double]);

		// extern _Complex double catanh (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] catanh ([unsupported Complex: _Complex double]);

		// extern _Complex long double catanhl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] catanhl ([unsupported Complex: _Complex long double]);

		// extern _Complex long double catanhl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] catanhl ([unsupported Complex: _Complex long double]);

		// extern _Complex float ccoshf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] ccoshf ([unsupported Complex: _Complex float]);

		// extern _Complex float ccoshf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] ccoshf ([unsupported Complex: _Complex float]);

		// extern _Complex double ccosh (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] ccosh ([unsupported Complex: _Complex double]);

		// extern _Complex double ccosh (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] ccosh ([unsupported Complex: _Complex double]);

		// extern _Complex long double ccoshl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] ccoshl ([unsupported Complex: _Complex long double]);

		// extern _Complex long double ccoshl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] ccoshl ([unsupported Complex: _Complex long double]);

		// extern _Complex float csinhf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] csinhf ([unsupported Complex: _Complex float]);

		// extern _Complex float csinhf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] csinhf ([unsupported Complex: _Complex float]);

		// extern _Complex double csinh (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] csinh ([unsupported Complex: _Complex double]);

		// extern _Complex double csinh (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] csinh ([unsupported Complex: _Complex double]);

		// extern _Complex long double csinhl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] csinhl ([unsupported Complex: _Complex long double]);

		// extern _Complex long double csinhl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] csinhl ([unsupported Complex: _Complex long double]);

		// extern _Complex float ctanhf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] ctanhf ([unsupported Complex: _Complex float]);

		// extern _Complex float ctanhf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] ctanhf ([unsupported Complex: _Complex float]);

		// extern _Complex double ctanh (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] ctanh ([unsupported Complex: _Complex double]);

		// extern _Complex double ctanh (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] ctanh ([unsupported Complex: _Complex double]);

		// extern _Complex long double ctanhl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] ctanhl ([unsupported Complex: _Complex long double]);

		// extern _Complex long double ctanhl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] ctanhl ([unsupported Complex: _Complex long double]);

		// extern _Complex float cexpf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] cexpf ([unsupported Complex: _Complex float]);

		// extern _Complex float cexpf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] cexpf ([unsupported Complex: _Complex float]);

		// extern _Complex double cexp (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] cexp ([unsupported Complex: _Complex double]);

		// extern _Complex double cexp (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] cexp ([unsupported Complex: _Complex double]);

		// extern _Complex long double cexpl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] cexpl ([unsupported Complex: _Complex long double]);

		// extern _Complex long double cexpl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] cexpl ([unsupported Complex: _Complex long double]);

		// extern _Complex float clogf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] clogf ([unsupported Complex: _Complex float]);

		// extern _Complex float clogf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] clogf ([unsupported Complex: _Complex float]);

		// extern _Complex double clog (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] clog ([unsupported Complex: _Complex double]);

		// extern _Complex double clog (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] clog ([unsupported Complex: _Complex double]);

		// extern _Complex long double clogl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] clogl ([unsupported Complex: _Complex long double]);

		// extern _Complex long double clogl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] clogl ([unsupported Complex: _Complex long double]);

		// extern float cabsf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float cabsf ([unsupported Complex: _Complex float]);

		// extern float cabsf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float cabsf ([unsupported Complex: _Complex float]);

		// extern double cabs (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double cabs ([unsupported Complex: _Complex double]);

		// extern double cabs (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double cabs ([unsupported Complex: _Complex double]);

		// extern long double cabsl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] cabsl ([unsupported Complex: _Complex long double]);

		// extern long double cabsl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] cabsl ([unsupported Complex: _Complex long double]);

		// extern _Complex float cpowf (_Complex float, _Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] cpowf ([unsupported Complex: _Complex float], [unsupported Complex: _Complex float]);

		// extern _Complex float cpowf (_Complex float, _Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] cpowf ([unsupported Complex: _Complex float], [unsupported Complex: _Complex float]);

		// extern _Complex double cpow (_Complex double, _Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] cpow ([unsupported Complex: _Complex double], [unsupported Complex: _Complex double]);

		// extern _Complex double cpow (_Complex double, _Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] cpow ([unsupported Complex: _Complex double], [unsupported Complex: _Complex double]);

		// extern _Complex long double cpowl (_Complex long double, _Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] cpowl ([unsupported Complex: _Complex long double], [unsupported Complex: _Complex long double]);

		// extern _Complex long double cpowl (_Complex long double, _Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] cpowl ([unsupported Complex: _Complex long double], [unsupported Complex: _Complex long double]);

		// extern _Complex float csqrtf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] csqrtf ([unsupported Complex: _Complex float]);

		// extern _Complex float csqrtf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] csqrtf ([unsupported Complex: _Complex float]);

		// extern _Complex double csqrt (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] csqrt ([unsupported Complex: _Complex double]);

		// extern _Complex double csqrt (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] csqrt ([unsupported Complex: _Complex double]);

		// extern _Complex long double csqrtl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] csqrtl ([unsupported Complex: _Complex long double]);

		// extern _Complex long double csqrtl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] csqrtl ([unsupported Complex: _Complex long double]);

		// extern float cargf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float cargf ([unsupported Complex: _Complex float]);

		// extern float cargf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float cargf ([unsupported Complex: _Complex float]);

		// extern double carg (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double carg ([unsupported Complex: _Complex double]);

		// extern double carg (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double carg ([unsupported Complex: _Complex double]);

		// extern long double cargl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] cargl ([unsupported Complex: _Complex long double]);

		// extern long double cargl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] cargl ([unsupported Complex: _Complex long double]);

		// extern float cimagf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float cimagf ([unsupported Complex: _Complex float]);

		// extern float cimagf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float cimagf ([unsupported Complex: _Complex float]);

		// extern double cimag (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double cimag ([unsupported Complex: _Complex double]);

		// extern double cimag (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double cimag ([unsupported Complex: _Complex double]);

		// extern long double cimagl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] cimagl ([unsupported Complex: _Complex long double]);

		// extern long double cimagl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] cimagl ([unsupported Complex: _Complex long double]);

		// extern _Complex float conjf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] conjf ([unsupported Complex: _Complex float]);

		// extern _Complex float conjf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] conjf ([unsupported Complex: _Complex float]);

		// extern _Complex double conj (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] conj ([unsupported Complex: _Complex double]);

		// extern _Complex double conj (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] conj ([unsupported Complex: _Complex double]);

		// extern _Complex long double conjl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] conjl ([unsupported Complex: _Complex long double]);

		// extern _Complex long double conjl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] conjl ([unsupported Complex: _Complex long double]);

		// extern _Complex float cprojf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] cprojf ([unsupported Complex: _Complex float]);

		// extern _Complex float cprojf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] cprojf ([unsupported Complex: _Complex float]);

		// extern _Complex double cproj (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] cproj ([unsupported Complex: _Complex double]);

		// extern _Complex double cproj (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] cproj ([unsupported Complex: _Complex double]);

		// extern _Complex long double cprojl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] cprojl ([unsupported Complex: _Complex long double]);

		// extern _Complex long double cprojl (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] cprojl ([unsupported Complex: _Complex long double]);

		// extern float crealf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float crealf ([unsupported Complex: _Complex float]);

		// extern float crealf (_Complex float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float crealf ([unsupported Complex: _Complex float]);

		// extern double creal (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double creal ([unsupported Complex: _Complex double]);

		// extern double creal (_Complex double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double creal ([unsupported Complex: _Complex double]);

		// extern long double creall (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] creall ([unsupported Complex: _Complex long double]);

		// extern long double creall (_Complex long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] creall ([unsupported Complex: _Complex long double]);

		// extern int copyfile (const char *from, const char *to, copyfile_state_t state, copyfile_flags_t flags);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int copyfile (sbyte* from, sbyte* to, copyfile_state_t* state, uint flags);

		// extern int fcopyfile (int from_fd, int to_fd, copyfile_state_t, copyfile_flags_t flags);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fcopyfile (int from_fd, int to_fd, copyfile_state_t*, uint flags);

		// extern int copyfile_state_free (copyfile_state_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int copyfile_state_free (copyfile_state_t*);

		// extern copyfile_state_t copyfile_state_alloc ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe copyfile_state_t* copyfile_state_alloc ();

		// extern int copyfile_state_get (copyfile_state_t s, uint32_t flag, void *dst);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int copyfile_state_get (copyfile_state_t* s, uint flag, void* dst);

		// extern int copyfile_state_set (copyfile_state_t s, uint32_t flag, const void *src);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int copyfile_state_set (copyfile_state_t* s, uint flag, void* src);

		// extern unsigned long ___runetype (__darwin_ct_rune_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint ___runetype (int);

		// extern __darwin_ct_rune_t ___tolower (__darwin_ct_rune_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int ___tolower (int);

		// extern __darwin_ct_rune_t ___toupper (__darwin_ct_rune_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int ___toupper (int);

		// extern int isascii (int _c);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isascii (int _c);

		// extern int __maskrune (__darwin_ct_rune_t, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __maskrune (int, nuint);

		// extern int __istype (__darwin_ct_rune_t _c, unsigned long _f);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __istype (int _c, nuint _f);

		// extern __darwin_ct_rune_t __isctype (__darwin_ct_rune_t _c, unsigned long _f);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __isctype (int _c, nuint _f);

		// extern __darwin_ct_rune_t __toupper (__darwin_ct_rune_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __toupper (int);

		// extern __darwin_ct_rune_t __tolower (__darwin_ct_rune_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __tolower (int);

		// extern int __wcwidth (__darwin_ct_rune_t _c);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __wcwidth (int _c);

		// extern int isalnum (int) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isalnum (int);

		// extern int isalnum (int _c) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isalnum (int _c);

		// extern int isalpha (int) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isalpha (int);

		// extern int isalpha (int _c) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isalpha (int _c);

		// extern int isblank (int) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isblank (int);

		// extern int isblank (int _c) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isblank (int _c);

		// extern int iscntrl (int) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int iscntrl (int);

		// extern int iscntrl (int _c) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int iscntrl (int _c);

		// extern int isdigit (int) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isdigit (int);

		// extern int isdigit (int _c) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isdigit (int _c);

		// extern int isgraph (int) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isgraph (int);

		// extern int isgraph (int _c) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isgraph (int _c);

		// extern int islower (int) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int islower (int);

		// extern int islower (int _c) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int islower (int _c);

		// extern int isprint (int) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isprint (int);

		// extern int isprint (int _c) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isprint (int _c);

		// extern int ispunct (int) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int ispunct (int);

		// extern int ispunct (int _c) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int ispunct (int _c);

		// extern int isspace (int) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isspace (int);

		// extern int isspace (int _c) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isspace (int _c);

		// extern int isupper (int) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isupper (int);

		// extern int isupper (int _c) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isupper (int _c);

		// extern int isxdigit (int) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isxdigit (int);

		// extern int isxdigit (int _c) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isxdigit (int _c);

		// extern int toascii (int _c);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int toascii (int _c);

		// extern int tolower (int) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int tolower (int);

		// extern int tolower (int _c) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int tolower (int _c);

		// extern int toupper (int) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int toupper (int);

		// extern int toupper (int _c) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int toupper (int _c);

		// extern int digittoint (int _c);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int digittoint (int _c);

		// extern int ishexnumber (int _c);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int ishexnumber (int _c);

		// extern int isideogram (int _c);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isideogram (int _c);

		// extern int isnumber (int _c);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isnumber (int _c);

		// extern int isphonogram (int _c);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isphonogram (int _c);

		// extern int isrune (int _c);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isrune (int _c);

		// extern int isspecial (int _c);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isspecial (int _c);

		// extern void err (int, const char *, ...) __attribute__((format(printf, 2, 3)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void err (int, sbyte*, IntPtr varArgs);

		// extern void verr (int, const char *, __darwin_va_list) __attribute__((format(printf, 2, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void verr (int, sbyte*, sbyte*);

		// extern void errc (int, int, const char *, ...) __attribute__((format(printf, 3, 4)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void errc (int, int, sbyte*, IntPtr varArgs);

		// extern void verrc (int, int, const char *, __darwin_va_list) __attribute__((format(printf, 3, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void verrc (int, int, sbyte*, sbyte*);

		// extern void errx (int, const char *, ...) __attribute__((format(printf, 2, 3)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void errx (int, sbyte*, IntPtr varArgs);

		// extern void verrx (int, const char *, __darwin_va_list) __attribute__((format(printf, 2, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void verrx (int, sbyte*, sbyte*);

		// extern void warn (const char *, ...) __attribute__((format(printf, 1, 2)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void warn (sbyte*, IntPtr varArgs);

		// extern void vwarn (const char *, __darwin_va_list) __attribute__((format(printf, 1, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void vwarn (sbyte*, sbyte*);

		// extern void warnc (int, const char *, ...) __attribute__((format(printf, 2, 3)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void warnc (int, sbyte*, IntPtr varArgs);

		// extern void vwarnc (int, const char *, __darwin_va_list) __attribute__((format(printf, 2, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void vwarnc (int, sbyte*, sbyte*);

		// extern void warnx (const char *, ...) __attribute__((format(printf, 1, 2)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void warnx (sbyte*, IntPtr varArgs);

		// extern void vwarnx (const char *, __darwin_va_list) __attribute__((format(printf, 1, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void vwarnx (sbyte*, sbyte*);

		// extern void err_set_file (void *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void err_set_file (void*);

		// extern void err_set_exit (void (* _Nullable)(int));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void err_set_exit ([NullAllowed] Action<int>*);

		// extern void err_set_exit_b (void (^ _Nullable)(int)) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void err_set_exit_b ([NullAllowed] Action<int>);

		// extern int * __error ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int* __error ();

		// extern int feclearexcept (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int feclearexcept (int);

		// extern int fegetexceptflag (fexcept_t *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fegetexceptflag (ushort*, int);

		// extern int feraiseexcept (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int feraiseexcept (int);

		// extern int fesetexceptflag (const fexcept_t *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fesetexceptflag (ushort*, int);

		// extern int fetestexcept (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int fetestexcept (int);

		// extern int fegetround ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int fegetround ();

		// extern int fesetround (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int fesetround (int);

		// extern int fegetenv (fenv_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fegetenv (fenv_t*);

		// extern int feholdexcept (fenv_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int feholdexcept (fenv_t*);

		// extern int fesetenv (const fenv_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fesetenv (fenv_t*);

		// extern int feupdateenv (const fenv_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int feupdateenv (fenv_t*);

		// extern intmax_t imaxabs (intmax_t j) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint imaxabs (nint j);

		// extern imaxdiv_t imaxdiv (intmax_t __numer, intmax_t __denom) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern imaxdiv_t imaxdiv (nint __numer, nint __denom);

		// extern intmax_t strtoimax (const char *__restrict __nptr, char **__restrict __endptr, int __base) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint strtoimax (sbyte* __nptr, sbyte** __endptr, int __base);

		// extern uintmax_t strtoumax (const char *__restrict __nptr, char **__restrict __endptr, int __base) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint strtoumax (sbyte* __nptr, sbyte** __endptr, int __base);

		// extern intmax_t wcstoimax (const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr, int __base) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint wcstoimax (int* __nptr, int** __endptr, int __base);

		// extern uintmax_t wcstoumax (const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr, int __base) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint wcstoumax (int* __nptr, int** __endptr, int __base);

		// extern struct lconv * localeconv ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe lconv* localeconv ();

		// extern char * setlocale (int, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* setlocale (int, sbyte*);

		// extern int __math_errhandling ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __math_errhandling ();

		// extern int __fpclassifyf (float);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __fpclassifyf (float);

		// extern int __fpclassifyd (double);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __fpclassifyd (double);

		// extern int __fpclassifyl (long double);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __fpclassifyl ([unsupported Builtin: long double]);

		// extern int __inline_isfinitef (float) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isfinitef (float);

		// extern int __inline_isfinited (double) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isfinited (double);

		// extern int __inline_isfinitel (long double) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isfinitel ([unsupported Builtin: long double]);

		// extern int __inline_isinff (float) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isinff (float);

		// extern int __inline_isinfd (double) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isinfd (double);

		// extern int __inline_isinfl (long double) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isinfl ([unsupported Builtin: long double]);

		// extern int __inline_isnanf (float) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isnanf (float);

		// extern int __inline_isnand (double) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isnand (double);

		// extern int __inline_isnanl (long double) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isnanl ([unsupported Builtin: long double]);

		// extern int __inline_isnormalf (float) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isnormalf (float);

		// extern int __inline_isnormald (double) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isnormald (double);

		// extern int __inline_isnormall (long double) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isnormall ([unsupported Builtin: long double]);

		// extern int __inline_signbitf (float) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_signbitf (float);

		// extern int __inline_signbitd (double) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_signbitd (double);

		// extern int __inline_signbitl (long double) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_signbitl ([unsupported Builtin: long double]);

		// extern int __inline_isfinitef (float __x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isfinitef (float __x);

		// extern float __builtin_fabsf (float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __builtin_fabsf (float);

		// extern float __builtin_inff () __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __builtin_inff ();

		// extern int __inline_isfinited (double __x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isfinited (double __x);

		// extern double __builtin_fabs (double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __builtin_fabs (double);

		// extern double __builtin_inf () __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __builtin_inf ();

		// extern int __inline_isfinitel (long double __x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isfinitel ([unsupported Builtin: long double] __x);

		// extern long double __builtin_fabsl (long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __builtin_fabsl ([unsupported Builtin: long double]);

		// extern long double __builtin_infl () __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __builtin_infl ();

		// extern int __inline_isinff (float __x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isinff (float __x);

		// extern int __inline_isinfd (double __x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isinfd (double __x);

		// extern int __inline_isinfl (long double __x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isinfl ([unsupported Builtin: long double] __x);

		// extern int __inline_isnanf (float __x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isnanf (float __x);

		// extern int __inline_isnand (double __x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isnand (double __x);

		// extern int __inline_isnanl (long double __x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isnanl ([unsupported Builtin: long double] __x);

		// extern int __inline_signbitf (float __x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_signbitf (float __x);

		// extern int __inline_signbitd (double __x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_signbitd (double __x);

		// extern int __inline_signbitl (long double __x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_signbitl ([unsupported Builtin: long double] __x);

		// extern int __inline_isnormalf (float __x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isnormalf (float __x);

		// extern int __inline_isnormald (double __x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isnormald (double __x);

		// extern int __inline_isnormall (long double __x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isnormall ([unsupported Builtin: long double] __x);

		// extern float acosf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float acosf (float);

		// extern float acosf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float acosf (float);

		// extern double acos (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double acos (double);

		// extern double acos (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double acos (double);

		// extern long double acosl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] acosl ([unsupported Builtin: long double]);

		// extern long double acosl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] acosl ([unsupported Builtin: long double]);

		// extern float asinf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float asinf (float);

		// extern float asinf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float asinf (float);

		// extern double asin (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double asin (double);

		// extern double asin (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double asin (double);

		// extern long double asinl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] asinl ([unsupported Builtin: long double]);

		// extern long double asinl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] asinl ([unsupported Builtin: long double]);

		// extern float atanf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float atanf (float);

		// extern float atanf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float atanf (float);

		// extern double atan (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double atan (double);

		// extern double atan (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double atan (double);

		// extern long double atanl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] atanl ([unsupported Builtin: long double]);

		// extern long double atanl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] atanl ([unsupported Builtin: long double]);

		// extern float atan2f (float, float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float atan2f (float, float);

		// extern float atan2f (float, float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float atan2f (float, float);

		// extern double atan2 (double, double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double atan2 (double, double);

		// extern double atan2 (double, double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double atan2 (double, double);

		// extern long double atan2l (long double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] atan2l ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern long double atan2l (long double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] atan2l ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern float cosf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float cosf (float);

		// extern float cosf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float cosf (float);

		// extern double cos (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double cos (double);

		// extern double cos (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double cos (double);

		// extern long double cosl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] cosl ([unsupported Builtin: long double]);

		// extern long double cosl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] cosl ([unsupported Builtin: long double]);

		// extern float sinf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float sinf (float);

		// extern float sinf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float sinf (float);

		// extern double sin (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double sin (double);

		// extern double sin (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double sin (double);

		// extern long double sinl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] sinl ([unsupported Builtin: long double]);

		// extern long double sinl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] sinl ([unsupported Builtin: long double]);

		// extern float tanf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float tanf (float);

		// extern float tanf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float tanf (float);

		// extern double tan (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double tan (double);

		// extern double tan (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double tan (double);

		// extern long double tanl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] tanl ([unsupported Builtin: long double]);

		// extern long double tanl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] tanl ([unsupported Builtin: long double]);

		// extern float acoshf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float acoshf (float);

		// extern float acoshf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float acoshf (float);

		// extern double acosh (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double acosh (double);

		// extern double acosh (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double acosh (double);

		// extern long double acoshl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] acoshl ([unsupported Builtin: long double]);

		// extern long double acoshl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] acoshl ([unsupported Builtin: long double]);

		// extern float asinhf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float asinhf (float);

		// extern float asinhf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float asinhf (float);

		// extern double asinh (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double asinh (double);

		// extern double asinh (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double asinh (double);

		// extern long double asinhl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] asinhl ([unsupported Builtin: long double]);

		// extern long double asinhl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] asinhl ([unsupported Builtin: long double]);

		// extern float atanhf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float atanhf (float);

		// extern float atanhf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float atanhf (float);

		// extern double atanh (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double atanh (double);

		// extern double atanh (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double atanh (double);

		// extern long double atanhl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] atanhl ([unsupported Builtin: long double]);

		// extern long double atanhl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] atanhl ([unsupported Builtin: long double]);

		// extern float coshf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float coshf (float);

		// extern float coshf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float coshf (float);

		// extern double cosh (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double cosh (double);

		// extern double cosh (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double cosh (double);

		// extern long double coshl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] coshl ([unsupported Builtin: long double]);

		// extern long double coshl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] coshl ([unsupported Builtin: long double]);

		// extern float sinhf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float sinhf (float);

		// extern float sinhf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float sinhf (float);

		// extern double sinh (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double sinh (double);

		// extern double sinh (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double sinh (double);

		// extern long double sinhl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] sinhl ([unsupported Builtin: long double]);

		// extern long double sinhl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] sinhl ([unsupported Builtin: long double]);

		// extern float tanhf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float tanhf (float);

		// extern float tanhf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float tanhf (float);

		// extern double tanh (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double tanh (double);

		// extern double tanh (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double tanh (double);

		// extern long double tanhl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] tanhl ([unsupported Builtin: long double]);

		// extern long double tanhl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] tanhl ([unsupported Builtin: long double]);

		// extern float expf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float expf (float);

		// extern float expf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float expf (float);

		// extern double exp (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double exp (double);

		// extern double exp (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double exp (double);

		// extern long double expl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] expl ([unsupported Builtin: long double]);

		// extern long double expl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] expl ([unsupported Builtin: long double]);

		// extern float exp2f (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float exp2f (float);

		// extern float exp2f (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float exp2f (float);

		// extern double exp2 (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double exp2 (double);

		// extern double exp2 (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double exp2 (double);

		// extern long double exp2l (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] exp2l ([unsupported Builtin: long double]);

		// extern long double exp2l (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] exp2l ([unsupported Builtin: long double]);

		// extern float expm1f (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float expm1f (float);

		// extern float expm1f (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float expm1f (float);

		// extern double expm1 (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double expm1 (double);

		// extern double expm1 (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double expm1 (double);

		// extern long double expm1l (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] expm1l ([unsupported Builtin: long double]);

		// extern long double expm1l (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] expm1l ([unsupported Builtin: long double]);

		// extern float logf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float logf (float);

		// extern float logf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float logf (float);

		// extern double log (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double log (double);

		// extern double log (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double log (double);

		// extern long double logl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] logl ([unsupported Builtin: long double]);

		// extern long double logl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] logl ([unsupported Builtin: long double]);

		// extern float log10f (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float log10f (float);

		// extern float log10f (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float log10f (float);

		// extern double log10 (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double log10 (double);

		// extern double log10 (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double log10 (double);

		// extern long double log10l (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] log10l ([unsupported Builtin: long double]);

		// extern long double log10l (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] log10l ([unsupported Builtin: long double]);

		// extern float log2f (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float log2f (float);

		// extern float log2f (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float log2f (float);

		// extern double log2 (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double log2 (double);

		// extern double log2 (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double log2 (double);

		// extern long double log2l (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] log2l ([unsupported Builtin: long double]);

		// extern long double log2l (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] log2l ([unsupported Builtin: long double]);

		// extern float log1pf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float log1pf (float);

		// extern float log1pf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float log1pf (float);

		// extern double log1p (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double log1p (double);

		// extern double log1p (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double log1p (double);

		// extern long double log1pl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] log1pl ([unsupported Builtin: long double]);

		// extern long double log1pl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] log1pl ([unsupported Builtin: long double]);

		// extern float logbf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float logbf (float);

		// extern float logbf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float logbf (float);

		// extern double logb (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double logb (double);

		// extern double logb (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double logb (double);

		// extern long double logbl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] logbl ([unsupported Builtin: long double]);

		// extern long double logbl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] logbl ([unsupported Builtin: long double]);

		// extern float modff (float, float *) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe float modff (float, float*);

		// extern float modff (float, float *) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe float modff (float, float*);

		// extern double modf (double, double *) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double modf (double, double*);

		// extern double modf (double, double *) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double modf (double, double*);

		// extern long double modfl (long double, long double *) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe [unsupported Builtin: long double] modfl ([unsupported Builtin: long double], [unsupported Builtin: long double]*);

		// extern long double modfl (long double, long double *) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe [unsupported Builtin: long double] modfl ([unsupported Builtin: long double], [unsupported Builtin: long double]*);

		// extern float ldexpf (float, int) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float ldexpf (float, int);

		// extern float ldexpf (float, int) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float ldexpf (float, int);

		// extern double ldexp (double, int) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double ldexp (double, int);

		// extern double ldexp (double, int) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double ldexp (double, int);

		// extern long double ldexpl (long double, int) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] ldexpl ([unsupported Builtin: long double], int);

		// extern long double ldexpl (long double, int) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] ldexpl ([unsupported Builtin: long double], int);

		// extern float frexpf (float, int *) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe float frexpf (float, int*);

		// extern float frexpf (float, int *) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe float frexpf (float, int*);

		// extern double frexp (double, int *) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double frexp (double, int*);

		// extern double frexp (double, int *) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double frexp (double, int*);

		// extern long double frexpl (long double, int *) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe [unsupported Builtin: long double] frexpl ([unsupported Builtin: long double], int*);

		// extern long double frexpl (long double, int *) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe [unsupported Builtin: long double] frexpl ([unsupported Builtin: long double], int*);

		// extern int ilogbf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int ilogbf (float);

		// extern int ilogbf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int ilogbf (float);

		// extern int ilogb (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int ilogb (double);

		// extern int ilogb (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int ilogb (double);

		// extern int ilogbl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int ilogbl ([unsupported Builtin: long double]);

		// extern int ilogbl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int ilogbl ([unsupported Builtin: long double]);

		// extern float scalbnf (float, int) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float scalbnf (float, int);

		// extern float scalbnf (float, int) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float scalbnf (float, int);

		// extern double scalbn (double, int) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double scalbn (double, int);

		// extern double scalbn (double, int) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double scalbn (double, int);

		// extern long double scalbnl (long double, int) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] scalbnl ([unsupported Builtin: long double], int);

		// extern long double scalbnl (long double, int) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] scalbnl ([unsupported Builtin: long double], int);

		// extern float scalblnf (float, long) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float scalblnf (float, nint);

		// extern float scalblnf (float, long) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float scalblnf (float, nint);

		// extern double scalbln (double, long) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double scalbln (double, nint);

		// extern double scalbln (double, long) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double scalbln (double, nint);

		// extern long double scalblnl (long double, long) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] scalblnl ([unsupported Builtin: long double], nint);

		// extern long double scalblnl (long double, long) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] scalblnl ([unsupported Builtin: long double], nint);

		// extern float fabsf (float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float fabsf (float);

		// extern float fabsf (float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float fabsf (float);

		// extern double fabs (double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double fabs (double);

		// extern double fabs (double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double fabs (double);

		// extern long double fabsl (long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] fabsl ([unsupported Builtin: long double]);

		// extern long double fabsl (long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] fabsl ([unsupported Builtin: long double]);

		// extern float cbrtf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float cbrtf (float);

		// extern float cbrtf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float cbrtf (float);

		// extern double cbrt (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double cbrt (double);

		// extern double cbrt (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double cbrt (double);

		// extern long double cbrtl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] cbrtl ([unsupported Builtin: long double]);

		// extern long double cbrtl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] cbrtl ([unsupported Builtin: long double]);

		// extern float hypotf (float, float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float hypotf (float, float);

		// extern float hypotf (float, float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float hypotf (float, float);

		// extern double hypot (double, double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double hypot (double, double);

		// extern double hypot (double, double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double hypot (double, double);

		// extern long double hypotl (long double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] hypotl ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern long double hypotl (long double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] hypotl ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern float powf (float, float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float powf (float, float);

		// extern float powf (float, float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float powf (float, float);

		// extern double pow (double, double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double pow (double, double);

		// extern double pow (double, double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double pow (double, double);

		// extern long double powl (long double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] powl ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern long double powl (long double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] powl ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern float sqrtf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float sqrtf (float);

		// extern float sqrtf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float sqrtf (float);

		// extern double sqrt (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double sqrt (double);

		// extern double sqrt (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double sqrt (double);

		// extern long double sqrtl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] sqrtl ([unsupported Builtin: long double]);

		// extern long double sqrtl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] sqrtl ([unsupported Builtin: long double]);

		// extern float erff (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float erff (float);

		// extern float erff (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float erff (float);

		// extern double erf (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double erf (double);

		// extern double erf (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double erf (double);

		// extern long double erfl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] erfl ([unsupported Builtin: long double]);

		// extern long double erfl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] erfl ([unsupported Builtin: long double]);

		// extern float erfcf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float erfcf (float);

		// extern float erfcf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float erfcf (float);

		// extern double erfc (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double erfc (double);

		// extern double erfc (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double erfc (double);

		// extern long double erfcl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] erfcl ([unsupported Builtin: long double]);

		// extern long double erfcl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] erfcl ([unsupported Builtin: long double]);

		// extern float lgammaf (float) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float lgammaf (float);

		// extern float lgammaf (float) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float lgammaf (float);

		// extern double lgamma (double) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double lgamma (double);

		// extern double lgamma (double) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double lgamma (double);

		// extern long double lgammal (long double) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] lgammal ([unsupported Builtin: long double]);

		// extern long double lgammal (long double) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] lgammal ([unsupported Builtin: long double]);

		// extern float tgammaf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float tgammaf (float);

		// extern float tgammaf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float tgammaf (float);

		// extern double tgamma (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double tgamma (double);

		// extern double tgamma (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double tgamma (double);

		// extern long double tgammal (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] tgammal ([unsupported Builtin: long double]);

		// extern long double tgammal (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] tgammal ([unsupported Builtin: long double]);

		// extern float ceilf (float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float ceilf (float);

		// extern float ceilf (float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float ceilf (float);

		// extern double ceil (double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double ceil (double);

		// extern double ceil (double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double ceil (double);

		// extern long double ceill (long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] ceill ([unsupported Builtin: long double]);

		// extern long double ceill (long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] ceill ([unsupported Builtin: long double]);

		// extern float floorf (float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float floorf (float);

		// extern float floorf (float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float floorf (float);

		// extern double floor (double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double floor (double);

		// extern double floor (double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double floor (double);

		// extern long double floorl (long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] floorl ([unsupported Builtin: long double]);

		// extern long double floorl (long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] floorl ([unsupported Builtin: long double]);

		// extern float nearbyintf (float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float nearbyintf (float);

		// extern float nearbyintf (float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float nearbyintf (float);

		// extern double nearbyint (double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double nearbyint (double);

		// extern double nearbyint (double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double nearbyint (double);

		// extern long double nearbyintl (long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] nearbyintl ([unsupported Builtin: long double]);

		// extern long double nearbyintl (long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] nearbyintl ([unsupported Builtin: long double]);

		// extern float rintf (float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float rintf (float);

		// extern float rintf (float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float rintf (float);

		// extern double rint (double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double rint (double);

		// extern double rint (double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double rint (double);

		// extern long double rintl (long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] rintl ([unsupported Builtin: long double]);

		// extern long double rintl (long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] rintl ([unsupported Builtin: long double]);

		// extern long lrintf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint lrintf (float);

		// extern long lrintf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint lrintf (float);

		// extern long lrint (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint lrint (double);

		// extern long lrint (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint lrint (double);

		// extern long lrintl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint lrintl ([unsupported Builtin: long double]);

		// extern long lrintl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint lrintl ([unsupported Builtin: long double]);

		// extern float roundf (float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float roundf (float);

		// extern float roundf (float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float roundf (float);

		// extern double round (double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double round (double);

		// extern double round (double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double round (double);

		// extern long double roundl (long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] roundl ([unsupported Builtin: long double]);

		// extern long double roundl (long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] roundl ([unsupported Builtin: long double]);

		// extern long lroundf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint lroundf (float);

		// extern long lroundf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint lroundf (float);

		// extern long lround (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint lround (double);

		// extern long lround (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint lround (double);

		// extern long lroundl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint lroundl ([unsupported Builtin: long double]);

		// extern long lroundl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint lroundl ([unsupported Builtin: long double]);

		// extern long long llrintf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern long llrintf (float);

		// extern long long llrintf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern long llrintf (float);

		// extern long long llrint (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern long llrint (double);

		// extern long long llrint (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern long llrint (double);

		// extern long long llrintl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern long llrintl ([unsupported Builtin: long double]);

		// extern long long llrintl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern long llrintl ([unsupported Builtin: long double]);

		// extern long long llroundf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern long llroundf (float);

		// extern long long llroundf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern long llroundf (float);

		// extern long long llround (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern long llround (double);

		// extern long long llround (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern long llround (double);

		// extern long long llroundl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern long llroundl ([unsupported Builtin: long double]);

		// extern long long llroundl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern long llroundl ([unsupported Builtin: long double]);

		// extern float truncf (float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float truncf (float);

		// extern float truncf (float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float truncf (float);

		// extern double trunc (double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double trunc (double);

		// extern double trunc (double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double trunc (double);

		// extern long double truncl (long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] truncl ([unsupported Builtin: long double]);

		// extern long double truncl (long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] truncl ([unsupported Builtin: long double]);

		// extern float fmodf (float, float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float fmodf (float, float);

		// extern float fmodf (float, float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float fmodf (float, float);

		// extern double fmod (double, double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double fmod (double, double);

		// extern double fmod (double, double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double fmod (double, double);

		// extern long double fmodl (long double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] fmodl ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern long double fmodl (long double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] fmodl ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern float remainderf (float, float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float remainderf (float, float);

		// extern float remainderf (float, float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float remainderf (float, float);

		// extern double remainder (double, double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double remainder (double, double);

		// extern double remainder (double, double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double remainder (double, double);

		// extern long double remainderl (long double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] remainderl ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern long double remainderl (long double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] remainderl ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern float remquof (float, float, int *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe float remquof (float, float, int*);

		// extern double remquo (double, double, int *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double remquo (double, double, int*);

		// extern long double remquol (long double, long double, int *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe [unsupported Builtin: long double] remquol ([unsupported Builtin: long double], [unsupported Builtin: long double], int*);

		// extern float copysignf (float, float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float copysignf (float, float);

		// extern float copysignf (float, float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float copysignf (float, float);

		// extern double copysign (double, double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double copysign (double, double);

		// extern double copysign (double, double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double copysign (double, double);

		// extern long double copysignl (long double, long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] copysignl ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern long double copysignl (long double, long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] copysignl ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern float nanf (const char *) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe float nanf (sbyte*);

		// extern float nanf (const char *) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe float nanf (sbyte*);

		// extern double nan (const char *) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double nan (sbyte*);

		// extern double nan (const char *) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double nan (sbyte*);

		// extern long double nanl (const char *) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe [unsupported Builtin: long double] nanl (sbyte*);

		// extern long double nanl (const char *) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe [unsupported Builtin: long double] nanl (sbyte*);

		// extern float nextafterf (float, float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float nextafterf (float, float);

		// extern float nextafterf (float, float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float nextafterf (float, float);

		// extern double nextafter (double, double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double nextafter (double, double);

		// extern double nextafter (double, double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double nextafter (double, double);

		// extern long double nextafterl (long double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] nextafterl ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern long double nextafterl (long double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] nextafterl ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern double nexttoward (double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double nexttoward (double, [unsupported Builtin: long double]);

		// extern double nexttoward (double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double nexttoward (double, [unsupported Builtin: long double]);

		// extern float nexttowardf (float, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float nexttowardf (float, [unsupported Builtin: long double]);

		// extern float nexttowardf (float, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float nexttowardf (float, [unsupported Builtin: long double]);

		// extern long double nexttowardl (long double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] nexttowardl ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern long double nexttowardl (long double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] nexttowardl ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern float fdimf (float, float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float fdimf (float, float);

		// extern float fdimf (float, float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float fdimf (float, float);

		// extern double fdim (double, double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double fdim (double, double);

		// extern double fdim (double, double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double fdim (double, double);

		// extern long double fdiml (long double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] fdiml ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern long double fdiml (long double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] fdiml ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern float fmaxf (float, float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float fmaxf (float, float);

		// extern float fmaxf (float, float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float fmaxf (float, float);

		// extern double fmax (double, double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double fmax (double, double);

		// extern double fmax (double, double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double fmax (double, double);

		// extern long double fmaxl (long double, long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] fmaxl ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern long double fmaxl (long double, long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] fmaxl ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern float fminf (float, float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float fminf (float, float);

		// extern float fminf (float, float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float fminf (float, float);

		// extern double fmin (double, double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double fmin (double, double);

		// extern double fmin (double, double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double fmin (double, double);

		// extern long double fminl (long double, long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] fminl ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern long double fminl (long double, long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] fminl ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern float fmaf (float, float, float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float fmaf (float, float, float);

		// extern float fmaf (float, float, float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float fmaf (float, float, float);

		// extern double fma (double, double, double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double fma (double, double, double);

		// extern double fma (double, double, double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double fma (double, double, double);

		// extern long double fmal (long double, long double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] fmal ([unsupported Builtin: long double], [unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern long double fmal (long double, long double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] fmal ([unsupported Builtin: long double], [unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern float __inff () __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __inff ();

		// extern double __inf () __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __inf ();

		// extern long double __infl () __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __infl ();

		// extern float __nan () __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __nan ();

		// extern float __exp10f (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __exp10f (float);

		// extern float __exp10f (float) __attribute__((availability(ios, introduced=7.0))) __attribute__((const)) __attribute__((nothrow));
		[iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __exp10f (float);

		// extern double __exp10 (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __exp10 (double);

		// extern double __exp10 (double) __attribute__((availability(ios, introduced=7.0))) __attribute__((const)) __attribute__((nothrow));
		[iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __exp10 (double);

		// extern void __sincosf (float __x, float *__sinp, float *__cosp) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void __sincosf (float __x, float* __sinp, float* __cosp);

		// extern void __sincos (double __x, double *__sinp, double *__cosp) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void __sincos (double __x, double* __sinp, double* __cosp);

		// extern float __cospif (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __cospif (float);

		// extern float __cospif (float) __attribute__((availability(ios, introduced=7.0))) __attribute__((const)) __attribute__((nothrow));
		[iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __cospif (float);

		// extern double __cospi (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __cospi (double);

		// extern double __cospi (double) __attribute__((availability(ios, introduced=7.0))) __attribute__((const)) __attribute__((nothrow));
		[iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __cospi (double);

		// extern float __sinpif (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __sinpif (float);

		// extern float __sinpif (float) __attribute__((availability(ios, introduced=7.0))) __attribute__((const)) __attribute__((nothrow));
		[iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __sinpif (float);

		// extern double __sinpi (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __sinpi (double);

		// extern double __sinpi (double) __attribute__((availability(ios, introduced=7.0))) __attribute__((const)) __attribute__((nothrow));
		[iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __sinpi (double);

		// extern float __tanpif (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tanpif (float);

		// extern float __tanpif (float) __attribute__((availability(ios, introduced=7.0))) __attribute__((const)) __attribute__((nothrow));
		[iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tanpif (float);

		// extern double __tanpi (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tanpi (double);

		// extern double __tanpi (double) __attribute__((availability(ios, introduced=7.0))) __attribute__((const)) __attribute__((nothrow));
		[iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tanpi (double);

		// extern void __sincospif (float __x, float *__sinp, float *__cosp) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void __sincospif (float __x, float* __sinp, float* __cosp);

		// extern void __sincospi (double __x, double *__sinp, double *__cosp) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void __sincospi (double __x, double* __sinp, double* __cosp);

		// extern struct __float2 __sincosf_stret (float);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern __float2 __sincosf_stret (float);

		// extern struct __double2 __sincos_stret (double);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern __double2 __sincos_stret (double);

		// extern struct __float2 __sincospif_stret (float);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern __float2 __sincospif_stret (float);

		// extern struct __double2 __sincospi_stret (double);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern __double2 __sincospi_stret (double);

		// extern void __sincosf (float __x, float *__sinp, float *__cosp) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void __sincosf (float __x, float* __sinp, float* __cosp);

		// extern void __sincos (double __x, double *__sinp, double *__cosp) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void __sincos (double __x, double* __sinp, double* __cosp);

		// extern void __sincospif (float __x, float *__sinp, float *__cosp) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void __sincospif (float __x, float* __sinp, float* __cosp);

		// extern void __sincospi (double __x, double *__sinp, double *__cosp) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void __sincospi (double __x, double* __sinp, double* __cosp);

		// extern double j0 (double) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double j0 (double);

		// extern double j1 (double) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double j1 (double);

		// extern double jn (int, double) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double jn (int, double);

		// extern double y0 (double) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double y0 (double);

		// extern double y1 (double) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double y1 (double);

		// extern double yn (int, double) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double yn (int, double);

		// extern double scalb (double, double);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double scalb (double, double);

		// extern long rinttol (double) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint rinttol (double);

		// extern long roundtol (double) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint roundtol (double);

		// extern double drem (double, double) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double drem (double, double);

		// extern int finite (double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int finite (double);

		// extern int finite (double) __attribute__((availability(ios, unavailable))) __attribute__((nothrow)) __attribute__((const));
		[NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int finite (double);

		// extern double gamma (double) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double gamma (double);

		// extern double significand (double) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double significand (double);

		// extern int matherr (struct exception *) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int matherr (exception*);

		// extern char * readpassphrase (const char *, char *, size_t, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* readpassphrase (sbyte*, sbyte*, nuint, int);

		// extern int setjmp (int *) __attribute__((returns_twice));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int setjmp (int*);

		// extern int setjmp (int *) __attribute__((returns_twice));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int setjmp (int[]);

		// extern void longjmp (int *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void longjmp (int*, int);

		// extern void longjmp (int *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void longjmp (int[], int);

		// extern int _setjmp (int *) __attribute__((returns_twice));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int _setjmp (int*);

		// extern int _setjmp (int *) __attribute__((returns_twice));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int _setjmp (int[]);

		// extern void _longjmp (int *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void _longjmp (int*, int);

		// extern void _longjmp (int *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void _longjmp (int[], int);

		// extern int sigsetjmp (int *, int) __attribute__((returns_twice));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sigsetjmp (int*, int);

		// extern int sigsetjmp (int *, int) __attribute__((returns_twice));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int sigsetjmp (int[], int);

		// extern void siglongjmp (int *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void siglongjmp (int*, int);

		// extern void siglongjmp (int *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void siglongjmp (int[], int);

		// extern void longjmperror ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void longjmperror ();

		// extern void (*)(int) signal (int, void (*)(int));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe Action<int>* signal (int, Action<int>*);

		// extern int raise (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int raise (int);

		// extern void (* _Nullable)(int) bsd_signal (int, void (* _Nullable)(int));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe Action<int>* bsd_signal (int, [NullAllowed] Action<int>*);

		// extern int kill (pid_t, int) asm("_kill");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int kill (int, int);

		// extern int killpg (pid_t, int) asm("_killpg");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int killpg (int, int);

		// extern int pthread_kill (pthread_t, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_kill (pthread_t*, int);

		// extern int pthread_sigmask (int, const sigset_t *, sigset_t *) asm("_pthread_sigmask");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_sigmask (int, uint*, uint*);

		// extern int sigaction (int, const struct sigaction *__restrict, struct sigaction *__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sigaction (int, sigaction*, sigaction*);

		// extern int sigaddset (sigset_t *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sigaddset (uint*, int);

		// extern int sigaltstack (const stack_t *__restrict, stack_t *__restrict) asm("_sigaltstack") __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sigaltstack (stack_t*, stack_t*);

		// extern int sigdelset (sigset_t *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sigdelset (uint*, int);

		// extern int sigemptyset (sigset_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sigemptyset (uint*);

		// extern int sigfillset (sigset_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sigfillset (uint*);

		// extern int sighold (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int sighold (int);

		// extern int sigignore (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int sigignore (int);

		// extern int siginterrupt (int, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int siginterrupt (int, int);

		// extern int sigismember (const sigset_t *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sigismember (uint*, int);

		// extern int sigpause (int) asm("_sigpause");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int sigpause (int);

		// extern int sigpending (sigset_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sigpending (uint*);

		// extern int sigprocmask (int, const sigset_t *__restrict, sigset_t *__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sigprocmask (int, uint*, uint*);

		// extern int sigrelse (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int sigrelse (int);

		// extern void (* _Nullable)(int) sigset (int, void (* _Nullable)(int));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe Action<int>* sigset (int, [NullAllowed] Action<int>*);

		// extern int sigsuspend (const sigset_t *) asm("_sigsuspend");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sigsuspend (uint*);

		// extern int sigwait (const sigset_t *__restrict, int *__restrict) asm("_sigwait");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sigwait (uint*, int*);

		// extern void psignal (unsigned int, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void psignal (uint, sbyte*);

		// extern int sigblock (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int sigblock (int);

		// extern int sigsetmask (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int sigsetmask (int);

		// extern int sigvec (int, struct sigvec *, struct sigvec *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sigvec (int, sigvec*, sigvec*);

		// extern void atomic_thread_fence (memory_order);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void atomic_thread_fence (memory_order);

		// extern void atomic_signal_fence (memory_order);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void atomic_signal_fence (memory_order);

		// extern _Bool atomic_flag_test_and_set (volatile atomic_flag *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool atomic_flag_test_and_set (atomic_flag*);

		// extern _Bool atomic_flag_test_and_set_explicit (volatile atomic_flag *, memory_order);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool atomic_flag_test_and_set_explicit (atomic_flag*, memory_order);

		// extern void atomic_flag_clear (volatile atomic_flag *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void atomic_flag_clear (atomic_flag*);

		// extern void atomic_flag_clear_explicit (volatile atomic_flag *, memory_order);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void atomic_flag_clear_explicit (atomic_flag*, memory_order);

		// extern int renameat (int, const char *, int, const char *) __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int renameat (int, sbyte*, int, sbyte*);

		// extern int renamex_np (const char *, const char *, unsigned int) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int renamex_np (sbyte*, sbyte*, uint);

		// extern int renameatx_np (int, const char *, int, const char *, unsigned int) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int renameatx_np (int, sbyte*, int, sbyte*, uint);

		// extern void clearerr (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void clearerr (FILE*);

		// extern int fclose (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fclose (FILE*);

		// extern int feof (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int feof (FILE*);

		// extern int ferror (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int ferror (FILE*);

		// extern int fflush (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fflush (FILE*);

		// extern int fgetc (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fgetc (FILE*);

		// extern int fgetpos (FILE *__restrict, fpos_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fgetpos (FILE*, long*);

		// extern char * fgets (char *__restrict, int, FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* fgets (sbyte*, int, FILE*);

		// extern FILE * fopen (const char *__restrict __filename, const char *__restrict __mode) asm("_fopen");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe FILE* fopen (sbyte* __filename, sbyte* __mode);

		// extern int fprintf (FILE *, const char *, ...) __attribute__((format(printf, 2, 3)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fprintf (FILE*, sbyte*, IntPtr varArgs);

		// extern int fprintf (FILE *__restrict, const char *__restrict, ...) __attribute__((format(printf, 2, 3)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fprintf (FILE*, sbyte*, IntPtr varArgs);

		// extern int fputc (int, FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fputc (int, FILE*);

		// extern int fputs (const char *__restrict, FILE *__restrict) asm("_fputs");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fputs (sbyte*, FILE*);

		// extern size_t fread (void *__restrict __ptr, size_t __size, size_t __nitems, FILE *__restrict __stream);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint fread (void* __ptr, nuint __size, nuint __nitems, FILE* __stream);

		// extern FILE * freopen (const char *__restrict, const char *__restrict, FILE *__restrict) asm("_freopen");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe FILE* freopen (sbyte*, sbyte*, FILE*);

		// extern int fscanf (FILE *__restrict, const char *__restrict, ...) __attribute__((format(scanf, 2, 3)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fscanf (FILE*, sbyte*, IntPtr varArgs);

		// extern int fscanf (FILE *__restrict, const char *__restrict, ...) __attribute__((format(scanf, 2, 3)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fscanf (FILE*, sbyte*, IntPtr varArgs);

		// extern int fseek (FILE *, long, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fseek (FILE*, nint, int);

		// extern int fsetpos (FILE *, const fpos_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fsetpos (FILE*, long*);

		// extern long ftell (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint ftell (FILE*);

		// extern size_t fwrite (const void *__restrict __ptr, size_t __size, size_t __nitems, FILE *__restrict __stream) asm("_fwrite");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint fwrite (void* __ptr, nuint __size, nuint __nitems, FILE* __stream);

		// extern int getc (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getc (FILE*);

		// extern int getchar ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int getchar ();

		// extern char * gets (char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* gets (sbyte*);

		// extern void perror (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void perror (sbyte*);

		// extern int printf (const char *, ...) __attribute__((format(printf, 1, 2)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int printf (sbyte*, IntPtr varArgs);

		// extern int printf (const char *__restrict, ...) __attribute__((format(printf, 1, 2)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int printf (sbyte*, IntPtr varArgs);

		// extern int putc (int, FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int putc (int, FILE*);

		// extern int putchar (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int putchar (int);

		// extern int puts (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int puts (sbyte*);

		// extern int remove (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int remove (sbyte*);

		// extern int rename (const char *__old, const char *__new);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int rename (sbyte* __old, sbyte* __new);

		// extern void rewind (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void rewind (FILE*);

		// extern int scanf (const char *__restrict, ...) __attribute__((format(scanf, 1, 2)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int scanf (sbyte*, IntPtr varArgs);

		// extern int scanf (const char *__restrict, ...) __attribute__((format(scanf, 1, 2)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int scanf (sbyte*, IntPtr varArgs);

		// extern void setbuf (FILE *__restrict, char *__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void setbuf (FILE*, sbyte*);

		// extern int setvbuf (FILE *__restrict, char *__restrict, int, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int setvbuf (FILE*, sbyte*, int, nuint);

		// extern int sprintf (char *, const char *, ...) __attribute__((format(printf, 2, 3)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sprintf (sbyte*, sbyte*, IntPtr varArgs);

		// extern int sprintf (char *__restrict, const char *__restrict, ...) __attribute__((format(printf, 2, 3)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sprintf (sbyte*, sbyte*, IntPtr varArgs);

		// extern int sscanf (const char *__restrict, const char *__restrict, ...) __attribute__((format(scanf, 2, 3)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sscanf (sbyte*, sbyte*, IntPtr varArgs);

		// extern int sscanf (const char *__restrict, const char *__restrict, ...) __attribute__((format(scanf, 2, 3)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sscanf (sbyte*, sbyte*, IntPtr varArgs);

		// extern FILE * tmpfile ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe FILE* tmpfile ();

		// extern char * tmpnam (char *) __attribute__((deprecated("This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tmpnam(3), it is highly recommended that you use mkstemp(3) instead.")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* tmpnam (sbyte*);

		// extern int ungetc (int, FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int ungetc (int, FILE*);

		// extern int vfprintf (FILE *, const char *, __builtin_va_list) __attribute__((format(printf, 2, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vfprintf (FILE*, sbyte*, sbyte*);

		// extern int vfprintf (FILE *__restrict, const char *__restrict, va_list) __attribute__((format(printf, 2, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vfprintf (FILE*, sbyte*, sbyte*);

		// extern int vprintf (const char *, __builtin_va_list) __attribute__((format(printf, 1, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vprintf (sbyte*, sbyte*);

		// extern int vprintf (const char *__restrict, va_list) __attribute__((format(printf, 1, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vprintf (sbyte*, sbyte*);

		// extern int vsprintf (char *, const char *, __builtin_va_list) __attribute__((format(printf, 2, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vsprintf (sbyte*, sbyte*, sbyte*);

		// extern int vsprintf (char *__restrict, const char *__restrict, va_list) __attribute__((format(printf, 2, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vsprintf (sbyte*, sbyte*, sbyte*);

		// extern char * ctermid (char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* ctermid (sbyte*);

		// extern FILE * fdopen (int, const char *) asm("_fdopen");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe FILE* fdopen (int, sbyte*);

		// extern int fileno (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fileno (FILE*);

		// extern int pclose (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pclose (FILE*);

		// extern FILE * popen (const char *, const char *) asm("_popen");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe FILE* popen (sbyte*, sbyte*);

		// extern int __srget (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int __srget (FILE*);

		// extern int __svfscanf (FILE *, const char *, va_list) __attribute__((format(scanf, 2, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int __svfscanf (FILE*, sbyte*, sbyte*);

		// extern int __swbuf (int, FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int __swbuf (int, FILE*);

		// extern int __sputc (int _c, FILE *_p) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int __sputc (int _c, FILE* _p);

		// extern void flockfile (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void flockfile (FILE*);

		// extern int ftrylockfile (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int ftrylockfile (FILE*);

		// extern void funlockfile (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void funlockfile (FILE*);

		// extern int getc_unlocked (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getc_unlocked (FILE*);

		// extern int getchar_unlocked ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int getchar_unlocked ();

		// extern int putc_unlocked (int, FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int putc_unlocked (int, FILE*);

		// extern int putchar_unlocked (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int putchar_unlocked (int);

		// extern int getw (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getw (FILE*);

		// extern int putw (int, FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int putw (int, FILE*);

		// extern char * tempnam (const char *__dir, const char *__prefix) asm("_tempnam") __attribute__((deprecated("This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tempnam(3), it is highly recommended that you use mkstemp(3) instead.")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* tempnam (sbyte* __dir, sbyte* __prefix);

		// extern int fseeko (FILE *__stream, off_t __offset, int __whence);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fseeko (FILE* __stream, long __offset, int __whence);

		// extern off_t ftello (FILE *__stream);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe long ftello (FILE* __stream);

		// extern int snprintf (char *, unsigned long, const char *, ...) __attribute__((format(printf, 3, 4)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int snprintf (sbyte*, nuint, sbyte*, IntPtr varArgs);

		// extern int snprintf (char *__restrict __str, size_t __size, const char *__restrict __format, ...) __attribute__((format(printf, 3, 4)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int snprintf (sbyte* __str, nuint __size, sbyte* __format, IntPtr varArgs);

		// extern int vfscanf (FILE *__restrict, const char *__restrict, __builtin_va_list) __attribute__((format(scanf, 2, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vfscanf (FILE*, sbyte*, sbyte*);

		// extern int vfscanf (FILE *__restrict __stream, const char *__restrict __format, va_list) __attribute__((format(scanf, 2, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vfscanf (FILE* __stream, sbyte* __format, sbyte*);

		// extern int vscanf (const char *__restrict, __builtin_va_list) __attribute__((format(scanf, 1, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vscanf (sbyte*, sbyte*);

		// extern int vscanf (const char *__restrict __format, va_list) __attribute__((format(scanf, 1, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vscanf (sbyte* __format, sbyte*);

		// extern int vsnprintf (char *, unsigned long, const char *, __builtin_va_list) __attribute__((format(printf, 3, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vsnprintf (sbyte*, nuint, sbyte*, sbyte*);

		// extern int vsnprintf (char *__restrict __str, size_t __size, const char *__restrict __format, va_list) __attribute__((format(printf, 3, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vsnprintf (sbyte* __str, nuint __size, sbyte* __format, sbyte*);

		// extern int vsscanf (const char *__restrict, const char *__restrict, __builtin_va_list) __attribute__((format(scanf, 2, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vsscanf (sbyte*, sbyte*, sbyte*);

		// extern int vsscanf (const char *__restrict __str, const char *__restrict __format, va_list) __attribute__((format(scanf, 2, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vsscanf (sbyte* __str, sbyte* __format, sbyte*);

		// extern int dprintf (int, const char *__restrict, ...) __attribute__((availability(ios, introduced=4.3))) __attribute__((format(printf, 2, 3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int dprintf (int, sbyte*, IntPtr varArgs);

		// extern int vdprintf (int, const char *__restrict, va_list) __attribute__((availability(ios, introduced=4.3))) __attribute__((format(printf, 2, 0)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vdprintf (int, sbyte*, sbyte*);

		// extern ssize_t getdelim (char **__restrict __linep, size_t *__restrict __linecapp, int __delimiter, FILE *__restrict __stream) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint getdelim (sbyte** __linep, nuint* __linecapp, int __delimiter, FILE* __stream);

		// extern ssize_t getline (char **__restrict __linep, size_t *__restrict __linecapp, FILE *__restrict __stream) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint getline (sbyte** __linep, nuint* __linecapp, FILE* __stream);

		// extern FILE * fmemopen (void *__restrict __buf, size_t __size, const char *__restrict __mode) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe FILE* fmemopen (void* __buf, nuint __size, sbyte* __mode);

		// extern FILE * open_memstream (char **__bufp, size_t *__sizep) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe FILE* open_memstream (sbyte** __bufp, nuint* __sizep);

		// extern int asprintf (char **__restrict, const char *__restrict, ...) __attribute__((format(printf, 2, 3)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int asprintf (sbyte**, sbyte*, IntPtr varArgs);

		// extern char * ctermid_r (char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* ctermid_r (sbyte*);

		// extern char * fgetln (FILE *, size_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* fgetln (FILE*, nuint*);

		// extern const char * fmtcheck (const char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* fmtcheck (sbyte*, sbyte*);

		// extern int fpurge (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fpurge (FILE*);

		// extern void setbuffer (FILE *, char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void setbuffer (FILE*, sbyte*, int);

		// extern int setlinebuf (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int setlinebuf (FILE*);

		// extern int vasprintf (char **__restrict, const char *__restrict, va_list) __attribute__((format(printf, 2, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vasprintf (sbyte**, sbyte*, sbyte*);

		// extern FILE * zopen (const char *, const char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe FILE* zopen (sbyte*, sbyte*, int);

		// extern FILE * funopen (const void *, int (* _Nullable)(void *, char *, int), int (* _Nullable)(void *, const char *, int), fpos_t (* _Nullable)(void *, fpos_t, int), int (* _Nullable)(void *));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe FILE* funopen (void*, [NullAllowed] Func<void*, sbyte*, int, int>*, [NullAllowed] Func<void*, sbyte*, int, int>*, [NullAllowed] Func<void*, long, int, long>*, [NullAllowed] Func<void*, int>*);

		// extern int __sprintf_chk (char *__restrict, int, size_t, const char *__restrict, ...);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int __sprintf_chk (sbyte*, int, nuint, sbyte*, IntPtr varArgs);

		// extern int __snprintf_chk (char *__restrict, size_t, int, size_t, const char *__restrict, ...);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int __snprintf_chk (sbyte*, nuint, int, nuint, sbyte*, IntPtr varArgs);

		// extern int __vsprintf_chk (char *__restrict, int, size_t, const char *__restrict, va_list);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int __vsprintf_chk (sbyte*, int, nuint, sbyte*, sbyte*);

		// extern int __vsnprintf_chk (char *__restrict, size_t, int, size_t, const char *__restrict, va_list);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int __vsnprintf_chk (sbyte*, nuint, int, nuint, sbyte*, sbyte*);

		// extern int getpriority (int, id_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int getpriority (int, uint);

		// extern int getiopolicy_np (int, int) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int getiopolicy_np (int, int);

		// extern int getrlimit (int, struct rlimit *) asm("_getrlimit");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getrlimit (int, rlimit*);

		// extern int getrusage (int, struct rusage *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getrusage (int, rusage*);

		// extern int setpriority (int, id_t, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int setpriority (int, uint, int);

		// extern int setiopolicy_np (int, int, int) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int setiopolicy_np (int, int, int);

		// extern int setrlimit (int, const struct rlimit *) asm("_setrlimit");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int setrlimit (int, rlimit*);

		// uint16_t _OSSwapInt16 (uint16_t data);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ushort _OSSwapInt16 (ushort data);

		// uint32_t _OSSwapInt32 (uint32_t data);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint _OSSwapInt32 (uint data);

		// extern unsigned int __builtin_bswap32 (unsigned int) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint __builtin_bswap32 (uint);

		// uint64_t _OSSwapInt64 (uint64_t data);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ulong _OSSwapInt64 (ulong data);

		// extern unsigned long long __builtin_bswap64 (unsigned long long) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ulong __builtin_bswap64 (ulong);

		// uint16_t OSReadSwapInt16 (const volatile void *base, uintptr_t offset);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe ushort OSReadSwapInt16 (void* @base, UIntPtr offset);

		// uint32_t OSReadSwapInt32 (const volatile void *base, uintptr_t offset);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe uint OSReadSwapInt32 (void* @base, UIntPtr offset);

		// uint64_t OSReadSwapInt64 (const volatile void *base, uintptr_t offset);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe ulong OSReadSwapInt64 (void* @base, UIntPtr offset);

		// void OSWriteSwapInt16 (volatile void *base, uintptr_t offset, uint16_t data);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void OSWriteSwapInt16 (void* @base, UIntPtr offset, ushort data);

		// void OSWriteSwapInt32 (volatile void *base, uintptr_t offset, uint32_t data);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void OSWriteSwapInt32 (void* @base, UIntPtr offset, uint data);

		// void OSWriteSwapInt64 (volatile void *base, uintptr_t offset, uint64_t data);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void OSWriteSwapInt64 (void* @base, UIntPtr offset, ulong data);

		// extern pid_t wait (int *) asm("_wait");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int wait (int*);

		// extern pid_t waitpid (pid_t, int *, int) asm("_waitpid");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int waitpid (int, int*, int);

		// extern int waitid (idtype_t, id_t, siginfo_t *, int) asm("_waitid");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int waitid (idtype_t, uint, siginfo_t*, int);

		// extern pid_t wait3 (int *, int, struct rusage *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int wait3 (int*, int, rusage*);

		// extern pid_t wait4 (pid_t, int *, int, struct rusage *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int wait4 (int, int*, int, rusage*);

		// extern void * alloca (unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* alloca (nuint);

		// extern void * alloca (size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* alloca (nuint);

		// extern void abort ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void abort ();

		// extern void abort ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void abort ();

		// extern int abs (int) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int abs (int);

		// extern int abs (int) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int abs (int);

		// extern int atexit (void (* _Nonnull)(void));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int atexit (Action*);

		// extern double atof (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double atof (sbyte*);

		// extern int atoi (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int atoi (sbyte*);

		// extern long atol (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint atol (sbyte*);

		// extern long long atoll (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe long atoll (sbyte*);

		// extern void * bsearch (const void *__key, const void *__base, size_t __nel, size_t __width, int (* _Nonnull)(const void *, const void *) __compar);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* bsearch (void* __key, void* __base, nuint __nel, nuint __width, Func<void*, void*, int>* __compar);

		// extern void * calloc (unsigned long, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* calloc (nuint, nuint);

		// extern void * calloc (size_t __count, size_t __size) __attribute__((alloc_size(1, 2))) __attribute__((warn_unused_result));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* calloc (nuint __count, nuint __size);

		// extern div_t div (int, int) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern div_t div (int, int);

		// extern void exit (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void exit (int);

		// extern void exit (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void exit (int);

		// extern void free (void *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void free (void*);

		// extern char * getenv (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* getenv (sbyte*);

		// extern long labs (long) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint labs (nint);

		// extern long labs (long) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint labs (nint);

		// extern ldiv_t ldiv (long, long) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ldiv_t ldiv (nint, nint);

		// extern long long llabs (long long) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern long llabs (long);

		// extern long long llabs (long long) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern long llabs (long);

		// extern lldiv_t lldiv (long long, long long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern lldiv_t lldiv (long, long);

		// extern void * malloc (unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* malloc (nuint);

		// extern void * malloc (size_t __size) __attribute__((alloc_size(1, 0))) __attribute__((warn_unused_result));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* malloc (nuint __size);

		// extern int mblen (const char *__s, size_t __n);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mblen (sbyte* __s, nuint __n);

		// extern size_t mbstowcs (wchar_t *__restrict, const char *__restrict, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint mbstowcs (int*, sbyte*, nuint);

		// extern int mbtowc (wchar_t *__restrict, const char *__restrict, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mbtowc (int*, sbyte*, nuint);

		// extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size) __attribute__((availability(ios, introduced=3.0)));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int posix_memalign (void** __memptr, nuint __alignment, nuint __size);

		// extern void qsort (void *__base, size_t __nel, size_t __width, int (* _Nonnull)(const void *, const void *) __compar);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void qsort (void* __base, nuint __nel, nuint __width, Func<void*, void*, int>* __compar);

		// extern int rand ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int rand ();

		// extern void * realloc (void *, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* realloc (void*, nuint);

		// extern void * realloc (void *__ptr, size_t __size) __attribute__((alloc_size(2, 0))) __attribute__((warn_unused_result));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* realloc (void* __ptr, nuint __size);

		// extern void srand (unsigned int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void srand (uint);

		// extern double strtod (const char *, char **) asm("_strtod");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double strtod (sbyte*, sbyte**);

		// extern float strtof (const char *, char **) asm("_strtof");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe float strtof (sbyte*, sbyte**);

		// extern long strtol (const char *__str, char **__endptr, int __base);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint strtol (sbyte* __str, sbyte** __endptr, int __base);

		// extern long double strtold (const char *, char **);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe [unsupported Builtin: long double] strtold (sbyte*, sbyte**);

		// extern long long strtoll (const char *__str, char **__endptr, int __base);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe long strtoll (sbyte* __str, sbyte** __endptr, int __base);

		// extern unsigned long strtoul (const char *__str, char **__endptr, int __base);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint strtoul (sbyte* __str, sbyte** __endptr, int __base);

		// extern unsigned long long strtoull (const char *__str, char **__endptr, int __base);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe ulong strtoull (sbyte* __str, sbyte** __endptr, int __base);

		// extern int system (const char *) asm("_system") __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.0)));
		[NoWatch, NoTV, NoiOS, Mac (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int system (sbyte*);

		// extern size_t wcstombs (char *__restrict, const wchar_t *__restrict, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint wcstombs (sbyte*, int*, nuint);

		// extern int wctomb (char *, wchar_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int wctomb (sbyte*, int);

		// extern void _Exit (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void _Exit (int);

		// extern void _Exit (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void _Exit (int);

		// extern long a64l (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint a64l (sbyte*);

		// extern double drand48 ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double drand48 ();

		// extern char * ecvt (double, int, int *__restrict, int *__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* ecvt (double, int, int*, int*);

		// extern double erand48 (unsigned short *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double erand48 (ushort[]);

		// extern char * fcvt (double, int, int *__restrict, int *__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* fcvt (double, int, int*, int*);

		// extern char * gcvt (double, int, char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* gcvt (double, int, sbyte*);

		// extern int getsubopt (char **, char *const *, char **);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getsubopt (sbyte**, sbyte**, sbyte**);

		// extern int grantpt (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int grantpt (int);

		// extern char * initstate (unsigned int, char *, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* initstate (uint, sbyte*, nuint);

		// extern long jrand48 (unsigned short *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint jrand48 (ushort[]);

		// extern char * l64a (long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* l64a (nint);

		// extern void lcong48 (unsigned short *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void lcong48 (ushort[]);

		// extern long lrand48 ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint lrand48 ();

		// extern char * mktemp (char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* mktemp (sbyte*);

		// extern int mkstemp (char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mkstemp (sbyte*);

		// extern long mrand48 ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint mrand48 ();

		// extern long nrand48 (unsigned short *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint nrand48 (ushort[]);

		// extern int posix_openpt (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int posix_openpt (int);

		// extern char * ptsname (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* ptsname (int);

		// extern int putenv (char *) asm("_putenv");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int putenv (sbyte*);

		// extern long random ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint random ();

		// extern int rand_r (unsigned int *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int rand_r (uint*);

		// extern char * realpath (const char *__restrict, char *__restrict) asm("_realpath$DARWIN_EXTSN");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* realpath (sbyte*, sbyte*);

		// extern unsigned short * seed48 (unsigned short *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe ushort* seed48 (ushort[]);

		// extern int setenv (const char *__name, const char *__value, int __overwrite) asm("_setenv");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int setenv (sbyte* __name, sbyte* __value, int __overwrite);

		// extern void setkey (const char *) asm("_setkey");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void setkey (sbyte*);

		// extern char * setstate (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* setstate (sbyte*);

		// extern void srand48 (long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void srand48 (nint);

		// extern void srandom (unsigned int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void srandom (uint);

		// extern int unlockpt (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int unlockpt (int);

		// extern int unsetenv (const char *) asm("_unsetenv");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int unsetenv (sbyte*);

		// extern uint32_t arc4random ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint arc4random ();

		// extern void arc4random_addrandom (unsigned char *, int) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(tvos, introduced=2.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, deprecated=10.12))) __attribute__((availability(macos, introduced=10.0)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "use arc4random_stir")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "use arc4random_stir")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "use arc4random_stir")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "use arc4random_stir")]
		[Watch (1,0), TV (2,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void arc4random_addrandom (byte*, int);

		// extern void arc4random_buf (void *__buf, size_t __nbytes) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void arc4random_buf (void* __buf, nuint __nbytes);

		// extern void arc4random_stir ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void arc4random_stir ();

		// extern uint32_t arc4random_uniform (uint32_t __upper_bound) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint arc4random_uniform (uint __upper_bound);

		// extern int atexit_b (void (^ _Nonnull)(void)) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int atexit_b (Action);

		// extern void * bsearch_b (const void *__key, const void *__base, size_t __nel, size_t __width, int (^ _Nonnull)(const void *, const void *) __compar) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* bsearch_b (void* __key, void* __base, nuint __nel, nuint __width, Func<void*, void*, int> __compar);

		// extern char * cgetcap (char *, const char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* cgetcap (sbyte*, sbyte*, int);

		// extern int cgetclose ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int cgetclose ();

		// extern int cgetent (char **, char **, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int cgetent (sbyte**, sbyte**, sbyte*);

		// extern int cgetfirst (char **, char **);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int cgetfirst (sbyte**, sbyte**);

		// extern int cgetmatch (const char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int cgetmatch (sbyte*, sbyte*);

		// extern int cgetnext (char **, char **);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int cgetnext (sbyte**, sbyte**);

		// extern int cgetnum (char *, const char *, long *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int cgetnum (sbyte*, sbyte*, nint*);

		// extern int cgetset (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int cgetset (sbyte*);

		// extern int cgetstr (char *, const char *, char **);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int cgetstr (sbyte*, sbyte*, sbyte**);

		// extern int cgetustr (char *, const char *, char **);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int cgetustr (sbyte*, sbyte*, sbyte**);

		// extern int daemon (int, int) asm("_daemon") __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use posix_spawn APIs instead.")]
		[Deprecated (PlatformName.iOS, 2, 0, message: "Use posix_spawn APIs instead.")]
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int daemon (int, int);

		// extern char * devname (dev_t, mode_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* devname (int, ushort);

		// extern char * devname_r (dev_t, mode_t, char *buf, int len);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* devname_r (int, ushort, sbyte* buf, int len);

		// extern char * getbsize (int *, long *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* getbsize (int*, nint*);

		// extern int getloadavg (double *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int getloadavg (double[], int);

		// extern const char * getprogname ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* getprogname ();

		// extern int heapsort (void *__base, size_t __nel, size_t __width, int (* _Nonnull)(const void *, const void *) __compar);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int heapsort (void* __base, nuint __nel, nuint __width, Func<void*, void*, int>* __compar);

		// extern int heapsort_b (void *__base, size_t __nel, size_t __width, int (^ _Nonnull)(const void *, const void *) __compar) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int heapsort_b (void* __base, nuint __nel, nuint __width, Func<void*, void*, int> __compar);

		// extern int mergesort (void *__base, size_t __nel, size_t __width, int (* _Nonnull)(const void *, const void *) __compar);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mergesort (void* __base, nuint __nel, nuint __width, Func<void*, void*, int>* __compar);

		// extern int mergesort_b (void *__base, size_t __nel, size_t __width, int (^ _Nonnull)(const void *, const void *) __compar) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mergesort_b (void* __base, nuint __nel, nuint __width, Func<void*, void*, int> __compar);

		// extern void psort (void *__base, size_t __nel, size_t __width, int (* _Nonnull)(const void *, const void *) __compar) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void psort (void* __base, nuint __nel, nuint __width, Func<void*, void*, int>* __compar);

		// extern void psort_b (void *__base, size_t __nel, size_t __width, int (^ _Nonnull)(const void *, const void *) __compar) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void psort_b (void* __base, nuint __nel, nuint __width, Func<void*, void*, int> __compar);

		// extern void psort_r (void *__base, size_t __nel, size_t __width, void *, int (* _Nonnull)(void *, const void *, const void *) __compar) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void psort_r (void* __base, nuint __nel, nuint __width, void*, Func<void*, void*, void*, int>* __compar);

		// extern void qsort_b (void *__base, size_t __nel, size_t __width, int (^ _Nonnull)(const void *, const void *) __compar) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void qsort_b (void* __base, nuint __nel, nuint __width, Func<void*, void*, int> __compar);

		// extern void qsort_r (void *__base, size_t __nel, size_t __width, void *, int (* _Nonnull)(void *, const void *, const void *) __compar);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void qsort_r (void* __base, nuint __nel, nuint __width, void*, Func<void*, void*, void*, int>* __compar);

		// extern int radixsort (const unsigned char **__base, int __nel, const unsigned char *__table, unsigned int __endbyte);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int radixsort (byte** __base, int __nel, byte* __table, uint __endbyte);

		// extern void setprogname (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void setprogname (sbyte*);

		// extern int sradixsort (const unsigned char **__base, int __nel, const unsigned char *__table, unsigned int __endbyte);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sradixsort (byte** __base, int __nel, byte* __table, uint __endbyte);

		// extern void sranddev ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void sranddev ();

		// extern void srandomdev ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void srandomdev ();

		// extern void * reallocf (void *__ptr, size_t __size) __attribute__((alloc_size(2, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* reallocf (void* __ptr, nuint __size);

		// extern long long strtoq (const char *__str, char **__endptr, int __base);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe long strtoq (sbyte* __str, sbyte** __endptr, int __base);

		// extern unsigned long long strtouq (const char *__str, char **__endptr, int __base);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe ulong strtouq (sbyte* __str, sbyte** __endptr, int __base);

		// extern void * valloc (size_t) __attribute__((alloc_size(1, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* valloc (nuint);

		// extern void * memchr (const void *, int, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* memchr (void*, int, nuint);

		// extern void * memchr (const void *__s, int __c, size_t __n);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* memchr (void* __s, int __c, nuint __n);

		// extern int memcmp (const void *, const void *, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int memcmp (void*, void*, nuint);

		// extern int memcmp (const void *__s1, const void *__s2, size_t __n);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int memcmp (void* __s1, void* __s2, nuint __n);

		// extern void * memcpy (void *, const void *, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* memcpy (void*, void*, nuint);

		// extern void * memcpy (void *__dst, const void *__src, size_t __n);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* memcpy (void* __dst, void* __src, nuint __n);

		// extern void * memmove (void *, const void *, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* memmove (void*, void*, nuint);

		// extern void * memmove (void *__dst, const void *__src, size_t __len);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* memmove (void* __dst, void* __src, nuint __len);

		// extern void * memset (void *, int, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* memset (void*, int, nuint);

		// extern void * memset (void *__b, int __c, size_t __len);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* memset (void* __b, int __c, nuint __len);

		// extern char * strcat (char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strcat (sbyte*, sbyte*);

		// extern char * strcat (char *__s1, const char *__s2);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strcat (sbyte* __s1, sbyte* __s2);

		// extern char * strchr (const char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strchr (sbyte*, int);

		// extern char * strchr (const char *__s, int __c);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strchr (sbyte* __s, int __c);

		// extern int strcmp (const char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int strcmp (sbyte*, sbyte*);

		// extern int strcmp (const char *__s1, const char *__s2);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int strcmp (sbyte* __s1, sbyte* __s2);

		// extern int strcoll (const char *__s1, const char *__s2);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int strcoll (sbyte* __s1, sbyte* __s2);

		// extern char * strcpy (char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strcpy (sbyte*, sbyte*);

		// extern char * strcpy (char *__dst, const char *__src);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strcpy (sbyte* __dst, sbyte* __src);

		// extern unsigned long strcspn (const char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint strcspn (sbyte*, sbyte*);

		// extern unsigned long strcspn (const char *__s, const char *__charset);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint strcspn (sbyte* __s, sbyte* __charset);

		// extern char * strerror (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strerror (int);

		// extern char * strerror (int __errnum) asm("_strerror");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strerror (int __errnum);

		// extern unsigned long strlen (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint strlen (sbyte*);

		// extern unsigned long strlen (const char *__s);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint strlen (sbyte* __s);

		// extern char * strncat (char *, const char *, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strncat (sbyte*, sbyte*, nuint);

		// extern char * strncat (char *__s1, const char *__s2, size_t __n);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strncat (sbyte* __s1, sbyte* __s2, nuint __n);

		// extern int strncmp (const char *, const char *, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int strncmp (sbyte*, sbyte*, nuint);

		// extern int strncmp (const char *__s1, const char *__s2, size_t __n);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int strncmp (sbyte* __s1, sbyte* __s2, nuint __n);

		// extern char * strncpy (char *, const char *, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strncpy (sbyte*, sbyte*, nuint);

		// extern char * strncpy (char *__dst, const char *__src, size_t __n);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strncpy (sbyte* __dst, sbyte* __src, nuint __n);

		// extern char * strpbrk (const char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strpbrk (sbyte*, sbyte*);

		// extern char * strpbrk (const char *__s, const char *__charset);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strpbrk (sbyte* __s, sbyte* __charset);

		// extern char * strrchr (const char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strrchr (sbyte*, int);

		// extern char * strrchr (const char *__s, int __c);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strrchr (sbyte* __s, int __c);

		// extern unsigned long strspn (const char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint strspn (sbyte*, sbyte*);

		// extern unsigned long strspn (const char *__s, const char *__charset);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint strspn (sbyte* __s, sbyte* __charset);

		// extern char * strstr (const char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strstr (sbyte*, sbyte*);

		// extern char * strstr (const char *__big, const char *__little);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strstr (sbyte* __big, sbyte* __little);

		// extern char * strtok (char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strtok (sbyte*, sbyte*);

		// extern char * strtok (char *__str, const char *__sep);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strtok (sbyte* __str, sbyte* __sep);

		// extern unsigned long strxfrm (char *, const char *, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint strxfrm (sbyte*, sbyte*, nuint);

		// extern unsigned long strxfrm (char *__s1, const char *__s2, size_t __n);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint strxfrm (sbyte* __s1, sbyte* __s2, nuint __n);

		// extern char * strtok_r (char *__str, const char *__sep, char **__lasts);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strtok_r (sbyte* __str, sbyte* __sep, sbyte** __lasts);

		// extern int strerror_r (int __errnum, char *__strerrbuf, size_t __buflen);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int strerror_r (int __errnum, sbyte* __strerrbuf, nuint __buflen);

		// extern char * strdup (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strdup (sbyte*);

		// extern char * strdup (const char *__s1);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strdup (sbyte* __s1);

		// extern void * memccpy (void *__dst, const void *__src, int __c, size_t __n);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* memccpy (void* __dst, void* __src, int __c, nuint __n);

		// extern char * stpcpy (char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* stpcpy (sbyte*, sbyte*);

		// extern char * stpcpy (char *__dst, const char *__src);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* stpcpy (sbyte* __dst, sbyte* __src);

		// extern char * stpncpy (char *, const char *, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* stpncpy (sbyte*, sbyte*, nuint);

		// extern char * stpncpy (char *__dst, const char *__src, size_t __n) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* stpncpy (sbyte* __dst, sbyte* __src, nuint __n);

		// extern char * strndup (const char *, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strndup (sbyte*, nuint);

		// extern char * strndup (const char *__s1, size_t __n) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strndup (sbyte* __s1, nuint __n);

		// extern size_t strnlen (const char *__s1, size_t __n) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint strnlen (sbyte* __s1, nuint __n);

		// extern char * strsignal (int __sig);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strsignal (int __sig);

		// extern errno_t memset_s (void *__s, rsize_t __smax, int __c, rsize_t __n) __attribute__((availability(ios, introduced=7.0)));
		[iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int memset_s (void* __s, nuint __smax, int __c, nuint __n);

		// extern void * memmem (const void *__big, size_t __big_len, const void *__little, size_t __little_len) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* memmem (void* __big, nuint __big_len, void* __little, nuint __little_len);

		// extern void memset_pattern4 (void *__b, const void *__pattern4, size_t __len) __attribute__((availability(ios, introduced=3.0)));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void memset_pattern4 (void* __b, void* __pattern4, nuint __len);

		// extern void memset_pattern8 (void *__b, const void *__pattern8, size_t __len) __attribute__((availability(ios, introduced=3.0)));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void memset_pattern8 (void* __b, void* __pattern8, nuint __len);

		// extern void memset_pattern16 (void *__b, const void *__pattern16, size_t __len) __attribute__((availability(ios, introduced=3.0)));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void memset_pattern16 (void* __b, void* __pattern16, nuint __len);

		// extern char * strcasestr (const char *__big, const char *__little);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strcasestr (sbyte* __big, sbyte* __little);

		// extern char * strnstr (const char *__big, const char *__little, size_t __len);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strnstr (sbyte* __big, sbyte* __little, nuint __len);

		// extern unsigned long strlcat (char *, const char *, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint strlcat (sbyte*, sbyte*, nuint);

		// extern unsigned long strlcat (char *__dst, const char *__source, size_t __size);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint strlcat (sbyte* __dst, sbyte* __source, nuint __size);

		// extern unsigned long strlcpy (char *, const char *, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint strlcpy (sbyte*, sbyte*, nuint);

		// extern unsigned long strlcpy (char *__dst, const char *__source, size_t __size);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint strlcpy (sbyte* __dst, sbyte* __source, nuint __size);

		// extern void strmode (int __mode, char *__bp);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void strmode (int __mode, sbyte* __bp);

		// extern char * strsep (char **__stringp, const char *__delim);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strsep (sbyte** __stringp, sbyte* __delim);

		// extern void swab (const void *__restrict, void *__restrict, ssize_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void swab (void*, void*, nint);

		// extern int timingsafe_bcmp (const void *__b1, const void *__b2, size_t __len) __attribute__((availability(watchos, introduced=3.1))) __attribute__((availability(tvos, introduced=10.0.1))) __attribute__((availability(ios, introduced=10.1))) __attribute__((availability(macos, introduced=10.12.1)));
		[Watch (3,1), TV (10,0,1), Mac (10,12,1), iOS (10,1)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int timingsafe_bcmp (void* __b1, void* __b2, nuint __len);

		// extern int bcmp (const void *, const void *, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int bcmp (void*, void*, nuint);

		// extern void bcopy (const void *, void *, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void bcopy (void*, void*, nuint);

		// extern void bzero (void *, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void bzero (void*, nuint);

		// extern void bzero (void *, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void bzero (void*, nuint);

		// extern char * index (const char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* index (sbyte*, int);

		// extern char * index (const char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* index (sbyte*, int);

		// extern char * rindex (const char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* rindex (sbyte*, int);

		// extern char * rindex (const char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* rindex (sbyte*, int);

		// extern int ffs (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int ffs (int);

		// extern int strcasecmp (const char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int strcasecmp (sbyte*, sbyte*);

		// extern int strcasecmp (const char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int strcasecmp (sbyte*, sbyte*);

		// extern int strncasecmp (const char *, const char *, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int strncasecmp (sbyte*, sbyte*, nuint);

		// extern int strncasecmp (const char *, const char *, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int strncasecmp (sbyte*, sbyte*, nuint);

		// extern int ffsl (long) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int ffsl (nint);

		// extern int ffsll (long long) __attribute__((availability(ios, introduced=7.0)));
		[iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int ffsll (long);

		// extern int fls (int) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int fls (int);

		// extern int flsl (long) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int flsl (nint);

		// extern int flsll (long long) __attribute__((availability(ios, introduced=7.0)));
		[iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int flsll (long);

		// double __tg_promote (int) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_promote (int);

		// double __tg_promote (unsigned int) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_promote (uint);

		// double __tg_promote (long) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_promote (nint);

		// double __tg_promote (unsigned long) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_promote (nuint);

		// double __tg_promote (long long) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_promote (long);

		// double __tg_promote (unsigned long long) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_promote (ulong);

		// float __tg_promote (float) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_promote (float);

		// double __tg_promote (double) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_promote (double);

		// long double __tg_promote (long double) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_promote ([unsupported Builtin: long double]);

		// _Complex float __tg_promote (_Complex float) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] __tg_promote ([unsupported Complex: _Complex float]);

		// _Complex double __tg_promote (_Complex double) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] __tg_promote ([unsupported Complex: _Complex double]);

		// _Complex long double __tg_promote (_Complex long double) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] __tg_promote ([unsupported Complex: _Complex long double]);

		// float __tg_acos (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_acos (float __x);

		// double __tg_acos (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_acos (double __x);

		// long double __tg_acos (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_acos ([unsupported Builtin: long double] __x);

		// _Complex float __tg_acos (_Complex float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] __tg_acos ([unsupported Complex: _Complex float] __x);

		// _Complex double __tg_acos (_Complex double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] __tg_acos ([unsupported Complex: _Complex double] __x);

		// _Complex long double __tg_acos (_Complex long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] __tg_acos ([unsupported Complex: _Complex long double] __x);

		// float __tg_asin (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_asin (float __x);

		// double __tg_asin (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_asin (double __x);

		// long double __tg_asin (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_asin ([unsupported Builtin: long double] __x);

		// _Complex float __tg_asin (_Complex float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] __tg_asin ([unsupported Complex: _Complex float] __x);

		// _Complex double __tg_asin (_Complex double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] __tg_asin ([unsupported Complex: _Complex double] __x);

		// _Complex long double __tg_asin (_Complex long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] __tg_asin ([unsupported Complex: _Complex long double] __x);

		// float __tg_atan (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_atan (float __x);

		// double __tg_atan (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_atan (double __x);

		// long double __tg_atan (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_atan ([unsupported Builtin: long double] __x);

		// _Complex float __tg_atan (_Complex float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] __tg_atan ([unsupported Complex: _Complex float] __x);

		// _Complex double __tg_atan (_Complex double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] __tg_atan ([unsupported Complex: _Complex double] __x);

		// _Complex long double __tg_atan (_Complex long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] __tg_atan ([unsupported Complex: _Complex long double] __x);

		// float __tg_acosh (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_acosh (float __x);

		// double __tg_acosh (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_acosh (double __x);

		// long double __tg_acosh (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_acosh ([unsupported Builtin: long double] __x);

		// _Complex float __tg_acosh (_Complex float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] __tg_acosh ([unsupported Complex: _Complex float] __x);

		// _Complex double __tg_acosh (_Complex double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] __tg_acosh ([unsupported Complex: _Complex double] __x);

		// _Complex long double __tg_acosh (_Complex long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] __tg_acosh ([unsupported Complex: _Complex long double] __x);

		// float __tg_asinh (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_asinh (float __x);

		// double __tg_asinh (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_asinh (double __x);

		// long double __tg_asinh (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_asinh ([unsupported Builtin: long double] __x);

		// _Complex float __tg_asinh (_Complex float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] __tg_asinh ([unsupported Complex: _Complex float] __x);

		// _Complex double __tg_asinh (_Complex double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] __tg_asinh ([unsupported Complex: _Complex double] __x);

		// _Complex long double __tg_asinh (_Complex long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] __tg_asinh ([unsupported Complex: _Complex long double] __x);

		// float __tg_atanh (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_atanh (float __x);

		// double __tg_atanh (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_atanh (double __x);

		// long double __tg_atanh (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_atanh ([unsupported Builtin: long double] __x);

		// _Complex float __tg_atanh (_Complex float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] __tg_atanh ([unsupported Complex: _Complex float] __x);

		// _Complex double __tg_atanh (_Complex double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] __tg_atanh ([unsupported Complex: _Complex double] __x);

		// _Complex long double __tg_atanh (_Complex long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] __tg_atanh ([unsupported Complex: _Complex long double] __x);

		// float __tg_cos (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_cos (float __x);

		// double __tg_cos (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_cos (double __x);

		// long double __tg_cos (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_cos ([unsupported Builtin: long double] __x);

		// _Complex float __tg_cos (_Complex float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] __tg_cos ([unsupported Complex: _Complex float] __x);

		// _Complex double __tg_cos (_Complex double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] __tg_cos ([unsupported Complex: _Complex double] __x);

		// _Complex long double __tg_cos (_Complex long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] __tg_cos ([unsupported Complex: _Complex long double] __x);

		// float __tg_sin (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_sin (float __x);

		// double __tg_sin (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_sin (double __x);

		// long double __tg_sin (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_sin ([unsupported Builtin: long double] __x);

		// _Complex float __tg_sin (_Complex float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] __tg_sin ([unsupported Complex: _Complex float] __x);

		// _Complex double __tg_sin (_Complex double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] __tg_sin ([unsupported Complex: _Complex double] __x);

		// _Complex long double __tg_sin (_Complex long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] __tg_sin ([unsupported Complex: _Complex long double] __x);

		// float __tg_tan (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_tan (float __x);

		// double __tg_tan (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_tan (double __x);

		// long double __tg_tan (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_tan ([unsupported Builtin: long double] __x);

		// _Complex float __tg_tan (_Complex float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] __tg_tan ([unsupported Complex: _Complex float] __x);

		// _Complex double __tg_tan (_Complex double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] __tg_tan ([unsupported Complex: _Complex double] __x);

		// _Complex long double __tg_tan (_Complex long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] __tg_tan ([unsupported Complex: _Complex long double] __x);

		// float __tg_cosh (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_cosh (float __x);

		// double __tg_cosh (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_cosh (double __x);

		// long double __tg_cosh (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_cosh ([unsupported Builtin: long double] __x);

		// _Complex float __tg_cosh (_Complex float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] __tg_cosh ([unsupported Complex: _Complex float] __x);

		// _Complex double __tg_cosh (_Complex double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] __tg_cosh ([unsupported Complex: _Complex double] __x);

		// _Complex long double __tg_cosh (_Complex long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] __tg_cosh ([unsupported Complex: _Complex long double] __x);

		// float __tg_sinh (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_sinh (float __x);

		// double __tg_sinh (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_sinh (double __x);

		// long double __tg_sinh (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_sinh ([unsupported Builtin: long double] __x);

		// _Complex float __tg_sinh (_Complex float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] __tg_sinh ([unsupported Complex: _Complex float] __x);

		// _Complex double __tg_sinh (_Complex double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] __tg_sinh ([unsupported Complex: _Complex double] __x);

		// _Complex long double __tg_sinh (_Complex long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] __tg_sinh ([unsupported Complex: _Complex long double] __x);

		// float __tg_tanh (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_tanh (float __x);

		// double __tg_tanh (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_tanh (double __x);

		// long double __tg_tanh (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_tanh ([unsupported Builtin: long double] __x);

		// _Complex float __tg_tanh (_Complex float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] __tg_tanh ([unsupported Complex: _Complex float] __x);

		// _Complex double __tg_tanh (_Complex double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] __tg_tanh ([unsupported Complex: _Complex double] __x);

		// _Complex long double __tg_tanh (_Complex long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] __tg_tanh ([unsupported Complex: _Complex long double] __x);

		// float __tg_exp (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_exp (float __x);

		// double __tg_exp (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_exp (double __x);

		// long double __tg_exp (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_exp ([unsupported Builtin: long double] __x);

		// _Complex float __tg_exp (_Complex float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] __tg_exp ([unsupported Complex: _Complex float] __x);

		// _Complex double __tg_exp (_Complex double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] __tg_exp ([unsupported Complex: _Complex double] __x);

		// _Complex long double __tg_exp (_Complex long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] __tg_exp ([unsupported Complex: _Complex long double] __x);

		// float __tg_log (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_log (float __x);

		// double __tg_log (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_log (double __x);

		// long double __tg_log (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_log ([unsupported Builtin: long double] __x);

		// _Complex float __tg_log (_Complex float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] __tg_log ([unsupported Complex: _Complex float] __x);

		// _Complex double __tg_log (_Complex double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] __tg_log ([unsupported Complex: _Complex double] __x);

		// _Complex long double __tg_log (_Complex long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] __tg_log ([unsupported Complex: _Complex long double] __x);

		// float __tg_pow (float __x, float __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_pow (float __x, float __y);

		// double __tg_pow (double __x, double __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_pow (double __x, double __y);

		// long double __tg_pow (long double __x, long double __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_pow ([unsupported Builtin: long double] __x, [unsupported Builtin: long double] __y);

		// _Complex float __tg_pow (_Complex float __x, _Complex float __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] __tg_pow ([unsupported Complex: _Complex float] __x, [unsupported Complex: _Complex float] __y);

		// _Complex double __tg_pow (_Complex double __x, _Complex double __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] __tg_pow ([unsupported Complex: _Complex double] __x, [unsupported Complex: _Complex double] __y);

		// _Complex long double __tg_pow (_Complex long double __x, _Complex long double __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] __tg_pow ([unsupported Complex: _Complex long double] __x, [unsupported Complex: _Complex long double] __y);

		// float __tg_sqrt (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_sqrt (float __x);

		// double __tg_sqrt (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_sqrt (double __x);

		// long double __tg_sqrt (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_sqrt ([unsupported Builtin: long double] __x);

		// _Complex float __tg_sqrt (_Complex float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] __tg_sqrt ([unsupported Complex: _Complex float] __x);

		// _Complex double __tg_sqrt (_Complex double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] __tg_sqrt ([unsupported Complex: _Complex double] __x);

		// _Complex long double __tg_sqrt (_Complex long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] __tg_sqrt ([unsupported Complex: _Complex long double] __x);

		// float __tg_fabs (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_fabs (float __x);

		// double __tg_fabs (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_fabs (double __x);

		// long double __tg_fabs (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_fabs ([unsupported Builtin: long double] __x);

		// float __tg_fabs (_Complex float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_fabs ([unsupported Complex: _Complex float] __x);

		// double __tg_fabs (_Complex double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_fabs ([unsupported Complex: _Complex double] __x);

		// long double __tg_fabs (_Complex long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_fabs ([unsupported Complex: _Complex long double] __x);

		// float __tg_atan2 (float __x, float __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_atan2 (float __x, float __y);

		// double __tg_atan2 (double __x, double __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_atan2 (double __x, double __y);

		// long double __tg_atan2 (long double __x, long double __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_atan2 ([unsupported Builtin: long double] __x, [unsupported Builtin: long double] __y);

		// float __tg_cbrt (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_cbrt (float __x);

		// double __tg_cbrt (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_cbrt (double __x);

		// long double __tg_cbrt (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_cbrt ([unsupported Builtin: long double] __x);

		// float __tg_ceil (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_ceil (float __x);

		// double __tg_ceil (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_ceil (double __x);

		// long double __tg_ceil (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_ceil ([unsupported Builtin: long double] __x);

		// float __tg_copysign (float __x, float __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_copysign (float __x, float __y);

		// double __tg_copysign (double __x, double __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_copysign (double __x, double __y);

		// long double __tg_copysign (long double __x, long double __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_copysign ([unsupported Builtin: long double] __x, [unsupported Builtin: long double] __y);

		// float __tg_erf (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_erf (float __x);

		// double __tg_erf (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_erf (double __x);

		// long double __tg_erf (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_erf ([unsupported Builtin: long double] __x);

		// float __tg_erfc (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_erfc (float __x);

		// double __tg_erfc (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_erfc (double __x);

		// long double __tg_erfc (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_erfc ([unsupported Builtin: long double] __x);

		// float __tg_exp2 (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_exp2 (float __x);

		// double __tg_exp2 (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_exp2 (double __x);

		// long double __tg_exp2 (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_exp2 ([unsupported Builtin: long double] __x);

		// float __tg_expm1 (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_expm1 (float __x);

		// double __tg_expm1 (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_expm1 (double __x);

		// long double __tg_expm1 (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_expm1 ([unsupported Builtin: long double] __x);

		// float __tg_fdim (float __x, float __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_fdim (float __x, float __y);

		// double __tg_fdim (double __x, double __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_fdim (double __x, double __y);

		// long double __tg_fdim (long double __x, long double __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_fdim ([unsupported Builtin: long double] __x, [unsupported Builtin: long double] __y);

		// float __tg_floor (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_floor (float __x);

		// double __tg_floor (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_floor (double __x);

		// long double __tg_floor (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_floor ([unsupported Builtin: long double] __x);

		// float __tg_fma (float __x, float __y, float __z) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_fma (float __x, float __y, float __z);

		// double __tg_fma (double __x, double __y, double __z) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_fma (double __x, double __y, double __z);

		// long double __tg_fma (long double __x, long double __y, long double __z) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_fma ([unsupported Builtin: long double] __x, [unsupported Builtin: long double] __y, [unsupported Builtin: long double] __z);

		// float __tg_fmax (float __x, float __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_fmax (float __x, float __y);

		// double __tg_fmax (double __x, double __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_fmax (double __x, double __y);

		// long double __tg_fmax (long double __x, long double __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_fmax ([unsupported Builtin: long double] __x, [unsupported Builtin: long double] __y);

		// float __tg_fmin (float __x, float __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_fmin (float __x, float __y);

		// double __tg_fmin (double __x, double __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_fmin (double __x, double __y);

		// long double __tg_fmin (long double __x, long double __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_fmin ([unsupported Builtin: long double] __x, [unsupported Builtin: long double] __y);

		// float __tg_fmod (float __x, float __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_fmod (float __x, float __y);

		// double __tg_fmod (double __x, double __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_fmod (double __x, double __y);

		// long double __tg_fmod (long double __x, long double __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_fmod ([unsupported Builtin: long double] __x, [unsupported Builtin: long double] __y);

		// float __tg_frexp (float __x, int *__y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe float __tg_frexp (float __x, int* __y);

		// double __tg_frexp (double __x, int *__y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double __tg_frexp (double __x, int* __y);

		// long double __tg_frexp (long double __x, int *__y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe [unsupported Builtin: long double] __tg_frexp ([unsupported Builtin: long double] __x, int* __y);

		// float __tg_hypot (float __x, float __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_hypot (float __x, float __y);

		// double __tg_hypot (double __x, double __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_hypot (double __x, double __y);

		// long double __tg_hypot (long double __x, long double __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_hypot ([unsupported Builtin: long double] __x, [unsupported Builtin: long double] __y);

		// int __tg_ilogb (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __tg_ilogb (float __x);

		// int __tg_ilogb (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __tg_ilogb (double __x);

		// int __tg_ilogb (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __tg_ilogb ([unsupported Builtin: long double] __x);

		// float __tg_ldexp (float __x, int __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_ldexp (float __x, int __y);

		// double __tg_ldexp (double __x, int __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_ldexp (double __x, int __y);

		// long double __tg_ldexp (long double __x, int __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_ldexp ([unsupported Builtin: long double] __x, int __y);

		// float __tg_lgamma (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_lgamma (float __x);

		// double __tg_lgamma (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_lgamma (double __x);

		// long double __tg_lgamma (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_lgamma ([unsupported Builtin: long double] __x);

		// long long __tg_llrint (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern long __tg_llrint (float __x);

		// long long __tg_llrint (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern long __tg_llrint (double __x);

		// long long __tg_llrint (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern long __tg_llrint ([unsupported Builtin: long double] __x);

		// long long __tg_llround (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern long __tg_llround (float __x);

		// long long __tg_llround (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern long __tg_llround (double __x);

		// long long __tg_llround (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern long __tg_llround ([unsupported Builtin: long double] __x);

		// float __tg_log10 (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_log10 (float __x);

		// double __tg_log10 (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_log10 (double __x);

		// long double __tg_log10 (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_log10 ([unsupported Builtin: long double] __x);

		// float __tg_log1p (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_log1p (float __x);

		// double __tg_log1p (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_log1p (double __x);

		// long double __tg_log1p (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_log1p ([unsupported Builtin: long double] __x);

		// float __tg_log2 (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_log2 (float __x);

		// double __tg_log2 (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_log2 (double __x);

		// long double __tg_log2 (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_log2 ([unsupported Builtin: long double] __x);

		// float __tg_logb (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_logb (float __x);

		// double __tg_logb (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_logb (double __x);

		// long double __tg_logb (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_logb ([unsupported Builtin: long double] __x);

		// long __tg_lrint (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint __tg_lrint (float __x);

		// long __tg_lrint (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint __tg_lrint (double __x);

		// long __tg_lrint (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint __tg_lrint ([unsupported Builtin: long double] __x);

		// long __tg_lround (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint __tg_lround (float __x);

		// long __tg_lround (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint __tg_lround (double __x);

		// long __tg_lround (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint __tg_lround ([unsupported Builtin: long double] __x);

		// float __tg_nearbyint (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_nearbyint (float __x);

		// double __tg_nearbyint (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_nearbyint (double __x);

		// long double __tg_nearbyint (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_nearbyint ([unsupported Builtin: long double] __x);

		// float __tg_nextafter (float __x, float __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_nextafter (float __x, float __y);

		// double __tg_nextafter (double __x, double __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_nextafter (double __x, double __y);

		// long double __tg_nextafter (long double __x, long double __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_nextafter ([unsupported Builtin: long double] __x, [unsupported Builtin: long double] __y);

		// float __tg_nexttoward (float __x, long double __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_nexttoward (float __x, [unsupported Builtin: long double] __y);

		// double __tg_nexttoward (double __x, long double __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_nexttoward (double __x, [unsupported Builtin: long double] __y);

		// long double __tg_nexttoward (long double __x, long double __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_nexttoward ([unsupported Builtin: long double] __x, [unsupported Builtin: long double] __y);

		// float __tg_remainder (float __x, float __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_remainder (float __x, float __y);

		// double __tg_remainder (double __x, double __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_remainder (double __x, double __y);

		// long double __tg_remainder (long double __x, long double __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_remainder ([unsupported Builtin: long double] __x, [unsupported Builtin: long double] __y);

		// float __tg_remquo (float __x, float __y, int *__z) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe float __tg_remquo (float __x, float __y, int* __z);

		// double __tg_remquo (double __x, double __y, int *__z) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double __tg_remquo (double __x, double __y, int* __z);

		// long double __tg_remquo (long double __x, long double __y, int *__z) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe [unsupported Builtin: long double] __tg_remquo ([unsupported Builtin: long double] __x, [unsupported Builtin: long double] __y, int* __z);

		// float __tg_rint (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_rint (float __x);

		// double __tg_rint (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_rint (double __x);

		// long double __tg_rint (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_rint ([unsupported Builtin: long double] __x);

		// float __tg_round (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_round (float __x);

		// double __tg_round (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_round (double __x);

		// long double __tg_round (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_round ([unsupported Builtin: long double] __x);

		// float __tg_scalbn (float __x, int __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_scalbn (float __x, int __y);

		// double __tg_scalbn (double __x, int __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_scalbn (double __x, int __y);

		// long double __tg_scalbn (long double __x, int __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_scalbn ([unsupported Builtin: long double] __x, int __y);

		// float __tg_scalbln (float __x, long __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_scalbln (float __x, nint __y);

		// double __tg_scalbln (double __x, long __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_scalbln (double __x, nint __y);

		// long double __tg_scalbln (long double __x, long __y) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_scalbln ([unsupported Builtin: long double] __x, nint __y);

		// float __tg_tgamma (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_tgamma (float __x);

		// double __tg_tgamma (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_tgamma (double __x);

		// long double __tg_tgamma (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_tgamma ([unsupported Builtin: long double] __x);

		// float __tg_trunc (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_trunc (float __x);

		// double __tg_trunc (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_trunc (double __x);

		// long double __tg_trunc (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_trunc ([unsupported Builtin: long double] __x);

		// float __tg_carg (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_carg (float __x);

		// double __tg_carg (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_carg (double __x);

		// long double __tg_carg (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_carg ([unsupported Builtin: long double] __x);

		// float __tg_carg (_Complex float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_carg ([unsupported Complex: _Complex float] __x);

		// double __tg_carg (_Complex double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_carg ([unsupported Complex: _Complex double] __x);

		// long double __tg_carg (_Complex long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_carg ([unsupported Complex: _Complex long double] __x);

		// float __tg_cimag (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_cimag (float __x);

		// double __tg_cimag (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_cimag (double __x);

		// long double __tg_cimag (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_cimag ([unsupported Builtin: long double] __x);

		// float __tg_cimag (_Complex float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_cimag ([unsupported Complex: _Complex float] __x);

		// double __tg_cimag (_Complex double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_cimag ([unsupported Complex: _Complex double] __x);

		// long double __tg_cimag (_Complex long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_cimag ([unsupported Complex: _Complex long double] __x);

		// _Complex float __tg_conj (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] __tg_conj (float __x);

		// _Complex double __tg_conj (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] __tg_conj (double __x);

		// _Complex long double __tg_conj (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] __tg_conj ([unsupported Builtin: long double] __x);

		// _Complex float __tg_conj (_Complex float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] __tg_conj ([unsupported Complex: _Complex float] __x);

		// _Complex double __tg_conj (_Complex double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] __tg_conj ([unsupported Complex: _Complex double] __x);

		// _Complex long double __tg_conj (_Complex long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] __tg_conj ([unsupported Complex: _Complex long double] __x);

		// _Complex float __tg_cproj (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] __tg_cproj (float __x);

		// _Complex double __tg_cproj (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] __tg_cproj (double __x);

		// _Complex long double __tg_cproj (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] __tg_cproj ([unsupported Builtin: long double] __x);

		// _Complex float __tg_cproj (_Complex float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex float] __tg_cproj ([unsupported Complex: _Complex float] __x);

		// _Complex double __tg_cproj (_Complex double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex double] __tg_cproj ([unsupported Complex: _Complex double] __x);

		// _Complex long double __tg_cproj (_Complex long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Complex: _Complex long double] __tg_cproj ([unsupported Complex: _Complex long double] __x);

		// float __tg_creal (float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_creal (float __x);

		// double __tg_creal (double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_creal (double __x);

		// long double __tg_creal (long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_creal ([unsupported Builtin: long double] __x);

		// float __tg_creal (_Complex float __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tg_creal ([unsupported Complex: _Complex float] __x);

		// double __tg_creal (_Complex double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tg_creal ([unsupported Complex: _Complex double] __x);

		// long double __tg_creal (_Complex long double __x) __attribute__((always_inline)) __attribute__((overloadable));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __tg_creal ([unsupported Complex: _Complex long double] __x);

		// extern char * asctime (const struct tm *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* asctime (tm*);

		// extern clock_t clock () asm("_clock");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint clock ();

		// extern char * ctime (const time_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* ctime (nint*);

		// extern double difftime (time_t, time_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double difftime (nint, nint);

		// extern struct tm * getdate (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe tm* getdate (sbyte*);

		// extern struct tm * gmtime (const time_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe tm* gmtime (nint*);

		// extern struct tm * localtime (const time_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe tm* localtime (nint*);

		// extern time_t mktime (struct tm *) asm("_mktime");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint mktime (tm*);

		// extern size_t strftime (char *__restrict, size_t, const char *__restrict, const struct tm *__restrict) asm("_strftime");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint strftime (sbyte*, nuint, sbyte*, tm*);

		// extern char * strptime (const char *__restrict, const char *__restrict, struct tm *__restrict) asm("_strptime");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strptime (sbyte*, sbyte*, tm*);

		// extern time_t time (time_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint time (nint*);

		// extern void tzset ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void tzset ();

		// extern char * asctime_r (const struct tm *__restrict, char *__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* asctime_r (tm*, sbyte*);

		// extern char * ctime_r (const time_t *, char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* ctime_r (nint*, sbyte*);

		// extern struct tm * gmtime_r (const time_t *__restrict, struct tm *__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe tm* gmtime_r (nint*, tm*);

		// extern struct tm * localtime_r (const time_t *__restrict, struct tm *__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe tm* localtime_r (nint*, tm*);

		// extern time_t posix2time (time_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint posix2time (nint);

		// extern void tzsetwall ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void tzsetwall ();

		// extern time_t time2posix (time_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint time2posix (nint);

		// extern time_t timelocal (struct tm *const);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint timelocal (tm*);

		// extern time_t timegm (struct tm *const);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint timegm (tm*);

		// extern int nanosleep (const struct timespec *__rqtp, struct timespec *__rmtp) asm("_nanosleep");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int nanosleep (timespec* __rqtp, timespec* __rmtp);

		// extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int clock_getres (clockid_t __clock_id, timespec* __res);

		// extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int clock_gettime (clockid_t __clock_id, timespec* __tp);

		// extern __uint64_t clock_gettime_nsec_np (clockid_t __clock_id) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ulong clock_gettime_nsec_np (clockid_t __clock_id);

		// extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.12)));
		[NoWatch, NoTV, NoiOS, Mac (10,12)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int clock_settime (clockid_t __clock_id, timespec* __tp);

		// int __darwin_fd_isset (int _n, const struct fd_set *_p);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int __darwin_fd_isset (int _n, fd_set* _p);

		// extern struct passwd * getpwuid (uid_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe passwd* getpwuid (uint);

		// extern struct passwd * getpwnam (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe passwd* getpwnam (sbyte*);

		// extern int getpwuid_r (uid_t, struct passwd *, char *, size_t, struct passwd **);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getpwuid_r (uint, passwd*, sbyte*, nuint, passwd**);

		// extern int getpwnam_r (const char *, struct passwd *, char *, size_t, struct passwd **);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getpwnam_r (sbyte*, passwd*, sbyte*, nuint, passwd**);

		// extern struct passwd * getpwent ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe passwd* getpwent ();

		// extern void setpwent ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void setpwent ();

		// extern void endpwent ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void endpwent ();

		// extern void uuid_clear (unsigned char *uu);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void uuid_clear (byte[] uu);

		// extern int uuid_compare (const unsigned char *uu1, const unsigned char *uu2);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int uuid_compare (byte[] uu1, byte[] uu2);

		// extern void uuid_copy (unsigned char *dst, const unsigned char *src);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void uuid_copy (byte[] dst, byte[] src);

		// extern void uuid_generate (unsigned char *out);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void uuid_generate (byte[] @out);

		// extern void uuid_generate_random (unsigned char *out);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void uuid_generate_random (byte[] @out);

		// extern void uuid_generate_time (unsigned char *out);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void uuid_generate_time (byte[] @out);

		// extern int uuid_is_null (const unsigned char *uu);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int uuid_is_null (byte[] uu);

		// extern int uuid_parse (const char *in, unsigned char *uu);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int uuid_parse (sbyte[] @in, byte[] uu);

		// extern void uuid_unparse (const unsigned char *uu, char *out);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void uuid_unparse (byte[] uu, sbyte[] @out);

		// extern void uuid_unparse_lower (const unsigned char *uu, char *out);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void uuid_unparse_lower (byte[] uu, sbyte[] @out);

		// extern void uuid_unparse_upper (const unsigned char *uu, char *out);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void uuid_unparse_upper (byte[] uu, sbyte[] @out);

		// extern int setpassent (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int setpassent (int);

		// extern char * user_from_uid (uid_t, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* user_from_uid (uint, int);

		// extern struct passwd * getpwuuid (unsigned char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe passwd* getpwuuid (byte[]);

		// extern int getpwuuid_r (unsigned char *, struct passwd *, char *, size_t, struct passwd **);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getpwuuid_r (byte[], passwd*, sbyte*, nuint, passwd**);

		// extern speed_t cfgetispeed (const struct termios *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint cfgetispeed (termios*);

		// extern speed_t cfgetospeed (const struct termios *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint cfgetospeed (termios*);

		// extern int cfsetispeed (struct termios *, speed_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int cfsetispeed (termios*, nuint);

		// extern int cfsetospeed (struct termios *, speed_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int cfsetospeed (termios*, nuint);

		// extern int tcgetattr (int, struct termios *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int tcgetattr (int, termios*);

		// extern int tcsetattr (int, int, const struct termios *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int tcsetattr (int, int, termios*);

		// extern int tcdrain (int) asm("_tcdrain");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int tcdrain (int);

		// extern int tcflow (int, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int tcflow (int, int);

		// extern int tcflush (int, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int tcflush (int, int);

		// extern int tcsendbreak (int, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int tcsendbreak (int, int);

		// extern void cfmakeraw (struct termios *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void cfmakeraw (termios*);

		// extern int cfsetspeed (struct termios *, speed_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int cfsetspeed (termios*, nuint);

		// extern pid_t tcgetsid (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int tcgetsid (int);

		// extern int login_tty (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int login_tty (int);

		// extern void logwtmp (const char *, const char *, const char *) __attribute__((availability(ios, introduced=2.0, deprecated=2.0)));
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 2, 0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void logwtmp (sbyte*, sbyte*, sbyte*);

		// extern int opendev (char *, int, int, char **);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int opendev (sbyte*, int, int, sbyte**);

		// extern int openpty (int *, int *, char *, struct termios *, struct winsize *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int openpty (int*, int*, sbyte*, termios*, winsize*);

		// extern char * fparseln (FILE *, size_t *, size_t *, const char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* fparseln (FILE*, nuint*, nuint*, sbyte[], int);

		// extern pid_t forkpty (int *, char *, struct termios *, struct winsize *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int forkpty (int*, sbyte*, termios*, winsize*);

		// extern int pidlock (const char *, int, pid_t *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pidlock (sbyte*, int, int*, sbyte*);

		// extern int ttylock (const char *, int, pid_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int ttylock (sbyte*, int, int*);

		// extern int ttyunlock (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int ttyunlock (sbyte*);

		// extern int ttyaction (char *tty, char *act, char *user);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int ttyaction (sbyte* tty, sbyte* act, sbyte* user);

		// extern char * ttymsg (struct iovec *, int, const char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* ttymsg (iovec*, int, sbyte*, int);

		// extern int iswalnum (wint_t _wc);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int iswalnum (int _wc);

		// extern int iswalpha (wint_t _wc);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int iswalpha (int _wc);

		// extern int iswcntrl (wint_t _wc);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int iswcntrl (int _wc);

		// extern int iswctype (wint_t _wc, wctype_t _charclass);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int iswctype (int _wc, uint _charclass);

		// extern int iswdigit (wint_t _wc);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int iswdigit (int _wc);

		// extern int iswgraph (wint_t _wc);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int iswgraph (int _wc);

		// extern int iswlower (wint_t _wc);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int iswlower (int _wc);

		// extern int iswprint (wint_t _wc);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int iswprint (int _wc);

		// extern int iswpunct (wint_t _wc);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int iswpunct (int _wc);

		// extern int iswspace (wint_t _wc);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int iswspace (int _wc);

		// extern int iswupper (wint_t _wc);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int iswupper (int _wc);

		// extern int iswxdigit (wint_t _wc);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int iswxdigit (int _wc);

		// extern wint_t towlower (wint_t _wc);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int towlower (int _wc);

		// extern wint_t towupper (wint_t _wc);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int towupper (int _wc);

		// extern wctype_t wctype (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe uint wctype (sbyte*);

		// extern wint_t btowc (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int btowc (int);

		// extern wint_t fgetwc (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fgetwc (FILE*);

		// extern wchar_t * fgetws (wchar_t *__restrict, int, FILE *__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int* fgetws (int*, int, FILE*);

		// extern wint_t fputwc (wchar_t, FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fputwc (int, FILE*);

		// extern int fputws (const wchar_t *__restrict, FILE *__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fputws (int*, FILE*);

		// extern int fwide (FILE *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fwide (FILE*, int);

		// extern int fwprintf (FILE *__restrict, const wchar_t *__restrict, ...);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fwprintf (FILE*, int*, IntPtr varArgs);

		// extern int fwscanf (FILE *__restrict, const wchar_t *__restrict, ...);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fwscanf (FILE*, int*, IntPtr varArgs);

		// extern wint_t getwc (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getwc (FILE*);

		// extern wint_t getwchar ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int getwchar ();

		// extern size_t mbrlen (const char *__restrict, size_t, mbstate_t *__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint mbrlen (sbyte*, nuint, mbstate_t*);

		// extern size_t mbrtowc (wchar_t *__restrict, const char *__restrict, size_t, mbstate_t *__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint mbrtowc (int*, sbyte*, nuint, mbstate_t*);

		// extern int mbsinit (const mbstate_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mbsinit (mbstate_t*);

		// extern size_t mbsrtowcs (wchar_t *__restrict, const char **__restrict, size_t, mbstate_t *__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint mbsrtowcs (int*, sbyte**, nuint, mbstate_t*);

		// extern wint_t putwc (wchar_t, FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int putwc (int, FILE*);

		// extern wint_t putwchar (wchar_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int putwchar (int);

		// extern int swprintf (wchar_t *__restrict, size_t, const wchar_t *__restrict, ...);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int swprintf (int*, nuint, int*, IntPtr varArgs);

		// extern int swscanf (const wchar_t *__restrict, const wchar_t *__restrict, ...);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int swscanf (int*, int*, IntPtr varArgs);

		// extern wint_t ungetwc (wint_t, FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int ungetwc (int, FILE*);

		// extern int vfwprintf (FILE *__restrict, const wchar_t *__restrict, __darwin_va_list);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vfwprintf (FILE*, int*, sbyte*);

		// extern int vswprintf (wchar_t *__restrict, size_t, const wchar_t *__restrict, __darwin_va_list);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vswprintf (int*, nuint, int*, sbyte*);

		// extern int vwprintf (const wchar_t *__restrict, __darwin_va_list);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vwprintf (int*, sbyte*);

		// extern size_t wcrtomb (char *__restrict, wchar_t, mbstate_t *__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint wcrtomb (sbyte*, int, mbstate_t*);

		// extern wchar_t * wcscat (wchar_t *__restrict, const wchar_t *__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int* wcscat (int*, int*);

		// extern int * wcschr (const int *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int* wcschr (int*, int);

		// extern int * wcschr (const wchar_t *, wchar_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int* wcschr (int*, int);

		// extern int wcscmp (const int *, const int *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int wcscmp (int*, int*);

		// extern int wcscmp (const wchar_t *, const wchar_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int wcscmp (int*, int*);

		// extern int wcscoll (const wchar_t *, const wchar_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int wcscoll (int*, int*);

		// extern wchar_t * wcscpy (wchar_t *__restrict, const wchar_t *__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int* wcscpy (int*, int*);

		// extern size_t wcscspn (const wchar_t *, const wchar_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint wcscspn (int*, int*);

		// extern size_t wcsftime (wchar_t *__restrict, size_t, const wchar_t *__restrict, const struct tm *__restrict) asm("_wcsftime");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint wcsftime (int*, nuint, int*, tm*);

		// extern unsigned long wcslen (const int *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint wcslen (int*);

		// extern unsigned long wcslen (const wchar_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint wcslen (int*);

		// extern wchar_t * wcsncat (wchar_t *__restrict, const wchar_t *__restrict, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int* wcsncat (int*, int*, nuint);

		// extern int wcsncmp (const int *, const int *, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int wcsncmp (int*, int*, nuint);

		// extern int wcsncmp (const wchar_t *, const wchar_t *, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int wcsncmp (int*, int*, nuint);

		// extern wchar_t * wcsncpy (wchar_t *__restrict, const wchar_t *__restrict, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int* wcsncpy (int*, int*, nuint);

		// extern wchar_t * wcspbrk (const wchar_t *, const wchar_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int* wcspbrk (int*, int*);

		// extern wchar_t * wcsrchr (const wchar_t *, wchar_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int* wcsrchr (int*, int);

		// extern size_t wcsrtombs (char *__restrict, const wchar_t **__restrict, size_t, mbstate_t *__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint wcsrtombs (sbyte*, int**, nuint, mbstate_t*);

		// extern size_t wcsspn (const wchar_t *, const wchar_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint wcsspn (int*, int*);

		// extern wchar_t * wcsstr (const wchar_t *__restrict, const wchar_t *__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int* wcsstr (int*, int*);

		// extern size_t wcsxfrm (wchar_t *__restrict, const wchar_t *__restrict, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint wcsxfrm (int*, int*, nuint);

		// extern int wctob (wint_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int wctob (int);

		// extern double wcstod (const wchar_t *__restrict, wchar_t **__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double wcstod (int*, int**);

		// extern wchar_t * wcstok (wchar_t *__restrict, const wchar_t *__restrict, wchar_t **__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int* wcstok (int*, int*, int**);

		// extern long wcstol (const wchar_t *__restrict, wchar_t **__restrict, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint wcstol (int*, int**, int);

		// extern unsigned long wcstoul (const wchar_t *__restrict, wchar_t **__restrict, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint wcstoul (int*, int**, int);

		// extern int * wmemchr (const int *, int, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int* wmemchr (int*, int, nuint);

		// extern int * wmemchr (const wchar_t *, wchar_t, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int* wmemchr (int*, int, nuint);

		// extern int wmemcmp (const int *, const int *, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int wmemcmp (int*, int*, nuint);

		// extern int wmemcmp (const wchar_t *, const wchar_t *, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int wmemcmp (int*, int*, nuint);

		// extern wchar_t * wmemcpy (wchar_t *__restrict, const wchar_t *__restrict, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int* wmemcpy (int*, int*, nuint);

		// extern wchar_t * wmemmove (wchar_t *, const wchar_t *, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int* wmemmove (int*, int*, nuint);

		// extern wchar_t * wmemset (wchar_t *, wchar_t, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int* wmemset (int*, int, nuint);

		// extern int wprintf (const wchar_t *__restrict, ...);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int wprintf (int*, IntPtr varArgs);

		// extern int wscanf (const wchar_t *__restrict, ...);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int wscanf (int*, IntPtr varArgs);

		// extern int wcswidth (const wchar_t *, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int wcswidth (int*, nuint);

		// extern int wcwidth (wchar_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int wcwidth (int);

		// extern int vfwscanf (FILE *__restrict, const wchar_t *__restrict, __darwin_va_list);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vfwscanf (FILE*, int*, sbyte*);

		// extern int vswscanf (const wchar_t *__restrict, const wchar_t *__restrict, __darwin_va_list);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vswscanf (int*, int*, sbyte*);

		// extern int vwscanf (const wchar_t *__restrict, __darwin_va_list);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vwscanf (int*, sbyte*);

		// extern float wcstof (const wchar_t *__restrict, wchar_t **__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe float wcstof (int*, int**);

		// extern long double wcstold (const wchar_t *__restrict, wchar_t **__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe [unsupported Builtin: long double] wcstold (int*, int**);

		// extern long long wcstoll (const wchar_t *__restrict, wchar_t **__restrict, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe long wcstoll (int*, int**, int);

		// extern unsigned long long wcstoull (const wchar_t *__restrict, wchar_t **__restrict, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe ulong wcstoull (int*, int**, int);

		// extern size_t mbsnrtowcs (wchar_t *__restrict, const char **__restrict, size_t, size_t, mbstate_t *__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint mbsnrtowcs (int*, sbyte**, nuint, nuint, mbstate_t*);

		// extern wchar_t * wcpcpy (wchar_t *__restrict, const wchar_t *__restrict) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int* wcpcpy (int*, int*);

		// extern wchar_t * wcpncpy (wchar_t *__restrict, const wchar_t *__restrict, size_t) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int* wcpncpy (int*, int*, nuint);

		// extern wchar_t * wcsdup (const wchar_t *) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int* wcsdup (int*);

		// extern int wcscasecmp (const wchar_t *, const wchar_t *) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int wcscasecmp (int*, int*);

		// extern int wcsncasecmp (const wchar_t *, const wchar_t *, size_t n) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int wcsncasecmp (int*, int*, nuint n);

		// extern size_t wcsnlen (const wchar_t *, size_t) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint wcsnlen (int*, nuint);

		// extern size_t wcsnrtombs (char *__restrict, const wchar_t **__restrict, size_t, size_t, mbstate_t *__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint wcsnrtombs (sbyte*, int**, nuint, nuint, mbstate_t*);

		// extern FILE * open_wmemstream (wchar_t **__bufp, size_t *__sizep) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe FILE* open_wmemstream (int** __bufp, nuint* __sizep);

		// extern wchar_t * fgetwln (FILE *__restrict, size_t *) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int* fgetwln (FILE*, nuint*);

		// extern size_t wcslcat (wchar_t *, const wchar_t *, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint wcslcat (int*, int*, nuint);

		// extern size_t wcslcpy (wchar_t *, const wchar_t *, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint wcslcpy (int*, int*, nuint);

		// extern int iswblank (wint_t _wc);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int iswblank (int _wc);

		// extern int iswascii (wint_t _wc);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int iswascii (int _wc);

		// extern int iswhexnumber (wint_t _wc);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int iswhexnumber (int _wc);

		// extern int iswideogram (wint_t _wc);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int iswideogram (int _wc);

		// extern int iswnumber (wint_t _wc);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int iswnumber (int _wc);

		// extern int iswphonogram (wint_t _wc);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int iswphonogram (int _wc);

		// extern int iswrune (wint_t _wc);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int iswrune (int _wc);

		// extern int iswspecial (wint_t _wc);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int iswspecial (int _wc);

		// extern wint_t nextwctype (wint_t, wctype_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int nextwctype (int, uint);

		// extern wint_t towctrans (wint_t, wctrans_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int towctrans (int, int);

		// extern wctrans_t wctrans (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int wctrans (sbyte*);

		// extern int ___mb_cur_max ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int ___mb_cur_max ();

		// extern int ___mb_cur_max_l (locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int ___mb_cur_max_l (locale_t*);

		// extern locale_t duplocale (locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe locale_t* duplocale (locale_t*);

		// extern int freelocale (locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int freelocale (locale_t*);

		// extern struct lconv * localeconv_l (locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe lconv* localeconv_l (locale_t*);

		// extern locale_t newlocale (int, const char *, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe locale_t* newlocale (int, sbyte*, locale_t*);

		// extern const char * querylocale (int, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* querylocale (int, locale_t*);

		// extern locale_t uselocale (locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe locale_t* uselocale (locale_t*);

		// extern unsigned long ___runetype_l (__darwin_ct_rune_t, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint ___runetype_l (int, locale_t*);

		// extern __darwin_ct_rune_t ___tolower_l (__darwin_ct_rune_t, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int ___tolower_l (int, locale_t*);

		// extern __darwin_ct_rune_t ___toupper_l (__darwin_ct_rune_t, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int ___toupper_l (int, locale_t*);

		// extern int __maskrune_l (__darwin_ct_rune_t, unsigned long, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int __maskrune_l (int, nuint, locale_t*);

		// extern int __istype_l (__darwin_ct_rune_t _c, unsigned long _f, locale_t _l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int __istype_l (int _c, nuint _f, locale_t* _l);

		// extern __darwin_ct_rune_t __toupper_l (__darwin_ct_rune_t _c, locale_t _l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int __toupper_l (int _c, locale_t* _l);

		// extern __darwin_ct_rune_t __tolower_l (__darwin_ct_rune_t _c, locale_t _l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int __tolower_l (int _c, locale_t* _l);

		// extern int __wcwidth_l (__darwin_ct_rune_t _c, locale_t _l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int __wcwidth_l (int _c, locale_t* _l);

		// extern int digittoint_l (int c, locale_t l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int digittoint_l (int c, locale_t* l);

		// extern int isalnum_l (int c, locale_t l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int isalnum_l (int c, locale_t* l);

		// extern int isalpha_l (int c, locale_t l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int isalpha_l (int c, locale_t* l);

		// extern int isblank_l (int c, locale_t l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int isblank_l (int c, locale_t* l);

		// extern int iscntrl_l (int c, locale_t l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int iscntrl_l (int c, locale_t* l);

		// extern int isdigit_l (int c, locale_t l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int isdigit_l (int c, locale_t* l);

		// extern int isgraph_l (int c, locale_t l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int isgraph_l (int c, locale_t* l);

		// extern int ishexnumber_l (int c, locale_t l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int ishexnumber_l (int c, locale_t* l);

		// extern int isideogram_l (int c, locale_t l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int isideogram_l (int c, locale_t* l);

		// extern int islower_l (int c, locale_t l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int islower_l (int c, locale_t* l);

		// extern int isnumber_l (int c, locale_t l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int isnumber_l (int c, locale_t* l);

		// extern int isphonogram_l (int c, locale_t l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int isphonogram_l (int c, locale_t* l);

		// extern int isprint_l (int c, locale_t l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int isprint_l (int c, locale_t* l);

		// extern int ispunct_l (int c, locale_t l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int ispunct_l (int c, locale_t* l);

		// extern int isrune_l (int c, locale_t l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int isrune_l (int c, locale_t* l);

		// extern int isspace_l (int c, locale_t l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int isspace_l (int c, locale_t* l);

		// extern int isspecial_l (int c, locale_t l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int isspecial_l (int c, locale_t* l);

		// extern int isupper_l (int c, locale_t l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int isupper_l (int c, locale_t* l);

		// extern int isxdigit_l (int c, locale_t l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int isxdigit_l (int c, locale_t* l);

		// extern int tolower_l (int c, locale_t l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int tolower_l (int c, locale_t* l);

		// extern int toupper_l (int c, locale_t l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int toupper_l (int c, locale_t* l);

		// extern int iswalnum_l (wint_t _wc, locale_t _l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int iswalnum_l (int _wc, locale_t* _l);

		// extern int iswalpha_l (wint_t _wc, locale_t _l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int iswalpha_l (int _wc, locale_t* _l);

		// extern int iswcntrl_l (wint_t _wc, locale_t _l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int iswcntrl_l (int _wc, locale_t* _l);

		// extern int iswctype_l (wint_t _wc, wctype_t _charclass, locale_t _l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int iswctype_l (int _wc, uint _charclass, locale_t* _l);

		// extern int iswdigit_l (wint_t _wc, locale_t _l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int iswdigit_l (int _wc, locale_t* _l);

		// extern int iswgraph_l (wint_t _wc, locale_t _l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int iswgraph_l (int _wc, locale_t* _l);

		// extern int iswlower_l (wint_t _wc, locale_t _l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int iswlower_l (int _wc, locale_t* _l);

		// extern int iswprint_l (wint_t _wc, locale_t _l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int iswprint_l (int _wc, locale_t* _l);

		// extern int iswpunct_l (wint_t _wc, locale_t _l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int iswpunct_l (int _wc, locale_t* _l);

		// extern int iswspace_l (wint_t _wc, locale_t _l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int iswspace_l (int _wc, locale_t* _l);

		// extern int iswupper_l (wint_t _wc, locale_t _l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int iswupper_l (int _wc, locale_t* _l);

		// extern int iswxdigit_l (wint_t _wc, locale_t _l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int iswxdigit_l (int _wc, locale_t* _l);

		// extern wint_t towlower_l (wint_t _wc, locale_t _l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int towlower_l (int _wc, locale_t* _l);

		// extern wint_t towupper_l (wint_t _wc, locale_t _l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int towupper_l (int _wc, locale_t* _l);

		// extern wctype_t wctype_l (const char *, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe uint wctype_l (sbyte*, locale_t*);

		// extern intmax_t strtoimax_l (const char *__restrict nptr, char **__restrict endptr, int base, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint strtoimax_l (sbyte* nptr, sbyte** endptr, int @base, locale_t*);

		// extern uintmax_t strtoumax_l (const char *__restrict nptr, char **__restrict endptr, int base, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint strtoumax_l (sbyte* nptr, sbyte** endptr, int @base, locale_t*);

		// extern intmax_t wcstoimax_l (const wchar_t *__restrict nptr, wchar_t **__restrict endptr, int base, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint wcstoimax_l (int* nptr, int** endptr, int @base, locale_t*);

		// extern uintmax_t wcstoumax_l (const wchar_t *__restrict nptr, wchar_t **__restrict endptr, int base, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint wcstoumax_l (int* nptr, int** endptr, int @base, locale_t*);

		// extern int fprintf_l (FILE *__restrict, __restrict locale_t, const char *__restrict, ...) __attribute__((format(printf, 3, 4)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fprintf_l (FILE*, locale_t*, sbyte*, IntPtr varArgs);

		// extern int fscanf_l (FILE *__restrict, __restrict locale_t, const char *__restrict, ...) __attribute__((format(scanf, 3, 4)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fscanf_l (FILE*, locale_t*, sbyte*, IntPtr varArgs);

		// extern int printf_l (__restrict locale_t, const char *__restrict, ...) __attribute__((format(printf, 2, 3)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int printf_l (locale_t*, sbyte*, IntPtr varArgs);

		// extern int scanf_l (__restrict locale_t, const char *__restrict, ...) __attribute__((format(scanf, 2, 3)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int scanf_l (locale_t*, sbyte*, IntPtr varArgs);

		// extern int sprintf_l (char *__restrict, __restrict locale_t, const char *__restrict, ...) __attribute__((format(printf, 3, 4)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sprintf_l (sbyte*, locale_t*, sbyte*, IntPtr varArgs);

		// extern int sscanf_l (const char *__restrict, __restrict locale_t, const char *__restrict, ...) __attribute__((format(scanf, 3, 4)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sscanf_l (sbyte*, locale_t*, sbyte*, IntPtr varArgs);

		// extern int vfprintf_l (FILE *__restrict, __restrict locale_t, const char *__restrict, va_list) __attribute__((format(printf, 3, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vfprintf_l (FILE*, locale_t*, sbyte*, sbyte*);

		// extern int vprintf_l (__restrict locale_t, const char *__restrict, va_list) __attribute__((format(printf, 2, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vprintf_l (locale_t*, sbyte*, sbyte*);

		// extern int vsprintf_l (char *__restrict, __restrict locale_t, const char *__restrict, va_list) __attribute__((format(printf, 3, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vsprintf_l (sbyte*, locale_t*, sbyte*, sbyte*);

		// extern int snprintf_l (char *__restrict, size_t, __restrict locale_t, const char *__restrict, ...) __attribute__((format(printf, 4, 5)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int snprintf_l (sbyte*, nuint, locale_t*, sbyte*, IntPtr varArgs);

		// extern int vfscanf_l (FILE *__restrict, __restrict locale_t, const char *__restrict, va_list) __attribute__((format(scanf, 3, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vfscanf_l (FILE*, locale_t*, sbyte*, sbyte*);

		// extern int vscanf_l (__restrict locale_t, const char *__restrict, va_list) __attribute__((format(scanf, 2, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vscanf_l (locale_t*, sbyte*, sbyte*);

		// extern int vsnprintf_l (char *__restrict, size_t, __restrict locale_t, const char *__restrict, va_list) __attribute__((format(printf, 4, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vsnprintf_l (sbyte*, nuint, locale_t*, sbyte*, sbyte*);

		// extern int vsscanf_l (const char *__restrict, __restrict locale_t, const char *__restrict, va_list) __attribute__((format(scanf, 3, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vsscanf_l (sbyte*, locale_t*, sbyte*, sbyte*);

		// extern int dprintf_l (int, __restrict locale_t, const char *__restrict, ...) __attribute__((availability(ios, introduced=4.3))) __attribute__((format(printf, 3, 4)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int dprintf_l (int, locale_t*, sbyte*, IntPtr varArgs);

		// extern int vdprintf_l (int, __restrict locale_t, const char *__restrict, va_list) __attribute__((availability(ios, introduced=4.3))) __attribute__((format(printf, 3, 0)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vdprintf_l (int, locale_t*, sbyte*, sbyte*);

		// extern int asprintf_l (char **__restrict, __restrict locale_t, const char *__restrict, ...) __attribute__((format(printf, 3, 4)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int asprintf_l (sbyte**, locale_t*, sbyte*, IntPtr varArgs);

		// extern int vasprintf_l (char **__restrict, __restrict locale_t, const char *__restrict, va_list) __attribute__((format(printf, 3, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vasprintf_l (sbyte**, locale_t*, sbyte*, sbyte*);

		// extern double atof_l (const char *, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double atof_l (sbyte*, locale_t*);

		// extern int atoi_l (const char *, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int atoi_l (sbyte*, locale_t*);

		// extern long atol_l (const char *, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint atol_l (sbyte*, locale_t*);

		// extern long long atoll_l (const char *, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe long atoll_l (sbyte*, locale_t*);

		// extern int mblen_l (const char *, size_t, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mblen_l (sbyte*, nuint, locale_t*);

		// extern size_t mbstowcs_l (wchar_t *__restrict, const char *__restrict, size_t, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint mbstowcs_l (int*, sbyte*, nuint, locale_t*);

		// extern int mbtowc_l (wchar_t *__restrict, const char *__restrict, size_t, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mbtowc_l (int*, sbyte*, nuint, locale_t*);

		// extern double strtod_l (const char *, char **, locale_t) asm("_strtod_l");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double strtod_l (sbyte*, sbyte**, locale_t*);

		// extern float strtof_l (const char *, char **, locale_t) asm("_strtof_l");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe float strtof_l (sbyte*, sbyte**, locale_t*);

		// extern long strtol_l (const char *, char **, int, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint strtol_l (sbyte*, sbyte**, int, locale_t*);

		// extern long double strtold_l (const char *, char **, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe [unsupported Builtin: long double] strtold_l (sbyte*, sbyte**, locale_t*);

		// extern long long strtoll_l (const char *, char **, int, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe long strtoll_l (sbyte*, sbyte**, int, locale_t*);

		// extern long long strtoq_l (const char *, char **, int, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe long strtoq_l (sbyte*, sbyte**, int, locale_t*);

		// extern unsigned long strtoul_l (const char *, char **, int, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint strtoul_l (sbyte*, sbyte**, int, locale_t*);

		// extern unsigned long long strtoull_l (const char *, char **, int, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe ulong strtoull_l (sbyte*, sbyte**, int, locale_t*);

		// extern unsigned long long strtouq_l (const char *, char **, int, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe ulong strtouq_l (sbyte*, sbyte**, int, locale_t*);

		// extern size_t wcstombs_l (char *__restrict, const wchar_t *__restrict, size_t, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint wcstombs_l (sbyte*, int*, nuint, locale_t*);

		// extern int wctomb_l (char *, wchar_t, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int wctomb_l (sbyte*, int, locale_t*);

		// extern int strcoll_l (const char *, const char *, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int strcoll_l (sbyte*, sbyte*, locale_t*);

		// extern size_t strxfrm_l (char *, const char *, size_t, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint strxfrm_l (sbyte*, sbyte*, nuint, locale_t*);

		// extern int strcasecmp_l (const char *, const char *, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int strcasecmp_l (sbyte*, sbyte*, locale_t*);

		// extern char * strcasestr_l (const char *, const char *, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strcasestr_l (sbyte*, sbyte*, locale_t*);

		// extern int strncasecmp_l (const char *, const char *, size_t, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int strncasecmp_l (sbyte*, sbyte*, nuint, locale_t*);

		// extern size_t strftime_l (char *__restrict, size_t, const char *__restrict, const struct tm *__restrict, locale_t) asm("_strftime_l") __attribute__((format(strftime, 3, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint strftime_l (sbyte*, nuint, sbyte*, tm*, locale_t*);

		// extern char * strptime_l (const char *__restrict, const char *__restrict, struct tm *__restrict, locale_t) asm("_strptime_l") __attribute__((format(strftime, 2, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strptime_l (sbyte*, sbyte*, tm*, locale_t*);

		// extern wint_t btowc_l (int, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int btowc_l (int, locale_t*);

		// extern wint_t fgetwc_l (FILE *, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fgetwc_l (FILE*, locale_t*);

		// extern wchar_t * fgetws_l (wchar_t *__restrict, int, FILE *__restrict, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int* fgetws_l (int*, int, FILE*, locale_t*);

		// extern wint_t fputwc_l (wchar_t, FILE *, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fputwc_l (int, FILE*, locale_t*);

		// extern int fputws_l (const wchar_t *__restrict, FILE *__restrict, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fputws_l (int*, FILE*, locale_t*);

		// extern int fwprintf_l (FILE *__restrict, locale_t, const wchar_t *__restrict, ...);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fwprintf_l (FILE*, locale_t*, int*, IntPtr varArgs);

		// extern int fwscanf_l (FILE *__restrict, locale_t, const wchar_t *__restrict, ...);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fwscanf_l (FILE*, locale_t*, int*, IntPtr varArgs);

		// extern wint_t getwc_l (FILE *, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getwc_l (FILE*, locale_t*);

		// extern wint_t getwchar_l (locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getwchar_l (locale_t*);

		// extern size_t mbrlen_l (const char *__restrict, size_t, mbstate_t *__restrict, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint mbrlen_l (sbyte*, nuint, mbstate_t*, locale_t*);

		// extern size_t mbrtowc_l (wchar_t *__restrict, const char *__restrict, size_t, mbstate_t *__restrict, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint mbrtowc_l (int*, sbyte*, nuint, mbstate_t*, locale_t*);

		// extern int mbsinit_l (const mbstate_t *, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mbsinit_l (mbstate_t*, locale_t*);

		// extern size_t mbsrtowcs_l (wchar_t *__restrict, const char **__restrict, size_t, mbstate_t *__restrict, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint mbsrtowcs_l (int*, sbyte**, nuint, mbstate_t*, locale_t*);

		// extern wint_t putwc_l (wchar_t, FILE *, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int putwc_l (int, FILE*, locale_t*);

		// extern wint_t putwchar_l (wchar_t, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int putwchar_l (int, locale_t*);

		// extern int swprintf_l (wchar_t *__restrict, size_t n, locale_t, const wchar_t *__restrict, ...);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int swprintf_l (int*, nuint n, locale_t*, int*, IntPtr varArgs);

		// extern int swscanf_l (const wchar_t *__restrict, locale_t, const wchar_t *__restrict, ...);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int swscanf_l (int*, locale_t*, int*, IntPtr varArgs);

		// extern wint_t ungetwc_l (wint_t, FILE *, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int ungetwc_l (int, FILE*, locale_t*);

		// extern int vfwprintf_l (FILE *__restrict, locale_t, const wchar_t *__restrict, __darwin_va_list);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vfwprintf_l (FILE*, locale_t*, int*, sbyte*);

		// extern int vswprintf_l (wchar_t *__restrict, size_t n, locale_t, const wchar_t *__restrict, __darwin_va_list);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vswprintf_l (int*, nuint n, locale_t*, int*, sbyte*);

		// extern int vwprintf_l (locale_t, const wchar_t *__restrict, __darwin_va_list);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vwprintf_l (locale_t*, int*, sbyte*);

		// extern size_t wcrtomb_l (char *__restrict, wchar_t, mbstate_t *__restrict, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint wcrtomb_l (sbyte*, int, mbstate_t*, locale_t*);

		// extern int wcscoll_l (const wchar_t *, const wchar_t *, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int wcscoll_l (int*, int*, locale_t*);

		// extern size_t wcsftime_l (wchar_t *__restrict, size_t, const wchar_t *__restrict, const struct tm *__restrict, locale_t) asm("_wcsftime_l");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint wcsftime_l (int*, nuint, int*, tm*, locale_t*);

		// extern size_t wcsrtombs_l (char *__restrict, const wchar_t **__restrict, size_t, mbstate_t *__restrict, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint wcsrtombs_l (sbyte*, int**, nuint, mbstate_t*, locale_t*);

		// extern double wcstod_l (const wchar_t *__restrict, wchar_t **__restrict, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double wcstod_l (int*, int**, locale_t*);

		// extern long wcstol_l (const wchar_t *__restrict, wchar_t **__restrict, int, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint wcstol_l (int*, int**, int, locale_t*);

		// extern unsigned long wcstoul_l (const wchar_t *__restrict, wchar_t **__restrict, int, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint wcstoul_l (int*, int**, int, locale_t*);

		// extern int wcswidth_l (const wchar_t *, size_t, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int wcswidth_l (int*, nuint, locale_t*);

		// extern size_t wcsxfrm_l (wchar_t *__restrict, const wchar_t *__restrict, size_t, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint wcsxfrm_l (int*, int*, nuint, locale_t*);

		// extern int wctob_l (wint_t, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int wctob_l (int, locale_t*);

		// extern int wcwidth_l (wchar_t, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int wcwidth_l (int, locale_t*);

		// extern int wprintf_l (locale_t, const wchar_t *__restrict, ...);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int wprintf_l (locale_t*, int*, IntPtr varArgs);

		// extern int wscanf_l (locale_t, const wchar_t *__restrict, ...);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int wscanf_l (locale_t*, int*, IntPtr varArgs);

		// extern int vfwscanf_l (FILE *__restrict, locale_t, const wchar_t *__restrict, __darwin_va_list);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vfwscanf_l (FILE*, locale_t*, int*, sbyte*);

		// extern int vswscanf_l (const wchar_t *__restrict, locale_t, const wchar_t *__restrict, __darwin_va_list);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vswscanf_l (int*, locale_t*, int*, sbyte*);

		// extern int vwscanf_l (locale_t, const wchar_t *__restrict, __darwin_va_list);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vwscanf_l (locale_t*, int*, sbyte*);

		// extern float wcstof_l (const wchar_t *__restrict, wchar_t **__restrict, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe float wcstof_l (int*, int**, locale_t*);

		// extern long double wcstold_l (const wchar_t *__restrict, wchar_t **__restrict, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe [unsupported Builtin: long double] wcstold_l (int*, int**, locale_t*);

		// extern long long wcstoll_l (const wchar_t *__restrict, wchar_t **__restrict, int, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe long wcstoll_l (int*, int**, int, locale_t*);

		// extern unsigned long long wcstoull_l (const wchar_t *__restrict, wchar_t **__restrict, int, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe ulong wcstoull_l (int*, int**, int, locale_t*);

		// extern size_t mbsnrtowcs_l (wchar_t *__restrict, const char **__restrict, size_t, size_t, mbstate_t *__restrict, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint mbsnrtowcs_l (int*, sbyte**, nuint, nuint, mbstate_t*, locale_t*);

		// extern int wcscasecmp_l (const wchar_t *, const wchar_t *, locale_t) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int wcscasecmp_l (int*, int*, locale_t*);

		// extern int wcsncasecmp_l (const wchar_t *, const wchar_t *, size_t n, locale_t) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int wcsncasecmp_l (int*, int*, nuint n, locale_t*);

		// extern size_t wcsnrtombs_l (char *__restrict, const wchar_t **__restrict, size_t, size_t, mbstate_t *__restrict, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint wcsnrtombs_l (sbyte*, int**, nuint, nuint, mbstate_t*, locale_t*);

		// extern wchar_t * fgetwln_l (FILE *__restrict, size_t *, locale_t) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int* fgetwln_l (FILE*, nuint*, locale_t*);

		// extern int iswblank_l (wint_t _wc, locale_t _l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int iswblank_l (int _wc, locale_t* _l);

		// extern int iswhexnumber_l (wint_t _wc, locale_t _l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int iswhexnumber_l (int _wc, locale_t* _l);

		// extern int iswideogram_l (wint_t _wc, locale_t _l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int iswideogram_l (int _wc, locale_t* _l);

		// extern int iswnumber_l (wint_t _wc, locale_t _l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int iswnumber_l (int _wc, locale_t* _l);

		// extern int iswphonogram_l (wint_t _wc, locale_t _l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int iswphonogram_l (int _wc, locale_t* _l);

		// extern int iswrune_l (wint_t _wc, locale_t _l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int iswrune_l (int _wc, locale_t* _l);

		// extern int iswspecial_l (wint_t _wc, locale_t _l);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int iswspecial_l (int _wc, locale_t* _l);

		// extern wint_t nextwctype_l (wint_t, wctype_t, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int nextwctype_l (int, uint, locale_t*);

		// extern wint_t towctrans_l (wint_t, wctrans_t, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int towctrans_l (int, int, locale_t*);

		// extern wctrans_t wctrans_l (const char *, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int wctrans_l (sbyte*, locale_t*);

		// extern int xattr_preserve_for_intent (const char *, xattr_operation_intent_t) __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int xattr_preserve_for_intent (sbyte*, uint);

		// extern char * xattr_name_with_flags (const char *, xattr_flags_t) __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* xattr_name_with_flags (sbyte*, ulong);

		// extern char * xattr_name_without_flags (const char *) __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* xattr_name_without_flags (sbyte*);

		// extern xattr_flags_t xattr_flags_from_name (const char *) __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe ulong xattr_flags_from_name (sbyte*);

		// extern int xattr_intent_with_flags (xattr_operation_intent_t, xattr_flags_t) __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int xattr_intent_with_flags (uint, ulong);

		// extern int aio_cancel (int fd, struct aiocb *aiocbp);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int aio_cancel (int fd, aiocb* aiocbp);

		// extern int aio_error (const struct aiocb *aiocbp);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int aio_error (aiocb* aiocbp);

		// extern int aio_fsync (int op, struct aiocb *aiocbp);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int aio_fsync (int op, aiocb* aiocbp);

		// extern int aio_read (struct aiocb *aiocbp);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int aio_read (aiocb* aiocbp);

		// extern ssize_t aio_return (struct aiocb *aiocbp);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint aio_return (aiocb* aiocbp);

		// extern int aio_suspend (const struct aiocb *const *aiocblist, int nent, const struct timespec *timeoutp) asm("_aio_suspend");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int aio_suspend (aiocb*[] aiocblist, int nent, timespec* timeoutp);

		// extern int aio_write (struct aiocb *aiocbp);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int aio_write (aiocb* aiocbp);

		// extern int lio_listio (int mode, struct aiocb *const *aiocblist, int nent, struct sigevent *sigp);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int lio_listio (int mode, aiocb*[] aiocblist, int nent, sigevent* sigp);

		// extern int accept (int, struct sockaddr *__restrict, socklen_t *__restrict) asm("_accept");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int accept (int, sockaddr*, uint*);

		// extern int bind (int, const struct sockaddr *, socklen_t) asm("_bind");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int bind (int, sockaddr*, uint);

		// extern int connect (int, const struct sockaddr *, socklen_t) asm("_connect");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int connect (int, sockaddr*, uint);

		// extern int getpeername (int, struct sockaddr *__restrict, socklen_t *__restrict) asm("_getpeername");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getpeername (int, sockaddr*, uint*);

		// extern int getsockname (int, struct sockaddr *__restrict, socklen_t *__restrict) asm("_getsockname");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getsockname (int, sockaddr*, uint*);

		// extern int getsockopt (int, int, int, void *__restrict, socklen_t *__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getsockopt (int, int, int, void*, uint*);

		// extern int listen (int, int) asm("_listen");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int listen (int, int);

		// extern ssize_t recv (int, void *, size_t, int) asm("_recv");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint recv (int, void*, nuint, int);

		// extern ssize_t recvfrom (int, void *, size_t, int, struct sockaddr *__restrict, socklen_t *__restrict) asm("_recvfrom");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint recvfrom (int, void*, nuint, int, sockaddr*, uint*);

		// extern ssize_t recvmsg (int, struct msghdr *, int) asm("_recvmsg");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint recvmsg (int, msghdr*, int);

		// extern ssize_t send (int, const void *, size_t, int) asm("_send");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint send (int, void*, nuint, int);

		// extern ssize_t sendmsg (int, const struct msghdr *, int) asm("_sendmsg");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint sendmsg (int, msghdr*, int);

		// extern ssize_t sendto (int, const void *, size_t, int, const struct sockaddr *, socklen_t) asm("_sendto");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint sendto (int, void*, nuint, int, sockaddr*, uint);

		// extern int setsockopt (int, int, int, const void *, socklen_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int setsockopt (int, int, int, void*, uint);

		// extern int shutdown (int, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int shutdown (int, int);

		// extern int sockatmark (int) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int sockatmark (int);

		// extern int socket (int, int, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int socket (int, int, int);

		// extern int socketpair (int, int, int, int *) asm("_socketpair");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int socketpair (int, int, int, int*);

		// extern int sendfile (int, int, off_t, off_t *, struct sf_hdtr *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sendfile (int, int, long, long*, sf_hdtr*, int);

		// extern void pfctlinput (int, struct sockaddr *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void pfctlinput (int, sockaddr*);

		// extern int connectx (int, const sa_endpoints_t *, sae_associd_t, unsigned int, const struct iovec *, unsigned int, size_t *, sae_connid_t *) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
		[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int connectx (int, sa_endpoints_t*, uint, uint, iovec*, uint, nuint*, uint*);

		// extern int disconnectx (int, sae_associd_t, sae_connid_t) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
		[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int disconnectx (int, uint, uint);

		// extern int setipv4sourcefilter (int, struct in_addr, struct in_addr, uint32_t, uint32_t, struct in_addr *) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int setipv4sourcefilter (int, in_addr, in_addr, uint, uint, in_addr*);

		// extern int getipv4sourcefilter (int, struct in_addr, struct in_addr, uint32_t *, uint32_t *, struct in_addr *) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getipv4sourcefilter (int, in_addr, in_addr, uint*, uint*, in_addr*);

		// extern int setsourcefilter (int, uint32_t, struct sockaddr *, socklen_t, uint32_t, uint32_t, struct sockaddr_storage *) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int setsourcefilter (int, uint, sockaddr*, uint, uint, uint, sockaddr_storage*);

		// extern int getsourcefilter (int, uint32_t, struct sockaddr *, socklen_t, uint32_t *, uint32_t *, struct sockaddr_storage *) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getsourcefilter (int, uint, sockaddr*, uint, uint*, uint*, sockaddr_storage*);

		// extern int inet6_option_space (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int inet6_option_space (int);

		// extern int inet6_option_init (void *, struct cmsghdr **, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int inet6_option_init (void*, cmsghdr**, int);

		// extern int inet6_option_append (struct cmsghdr *, const __uint8_t *, int, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int inet6_option_append (cmsghdr*, byte*, int, int);

		// extern __uint8_t * inet6_option_alloc (struct cmsghdr *, int, int, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte* inet6_option_alloc (cmsghdr*, int, int, int);

		// extern int inet6_option_next (const struct cmsghdr *, __uint8_t **);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int inet6_option_next (cmsghdr*, byte**);

		// extern int inet6_option_find (const struct cmsghdr *, __uint8_t **, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int inet6_option_find (cmsghdr*, byte**, int);

		// extern size_t inet6_rthdr_space (int, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint inet6_rthdr_space (int, int);

		// extern struct cmsghdr * inet6_rthdr_init (void *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe cmsghdr* inet6_rthdr_init (void*, int);

		// extern int inet6_rthdr_add (struct cmsghdr *, const struct in6_addr *, unsigned int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int inet6_rthdr_add (cmsghdr*, in6_addr*, uint);

		// extern int inet6_rthdr_lasthop (struct cmsghdr *, unsigned int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int inet6_rthdr_lasthop (cmsghdr*, uint);

		// extern int inet6_rthdr_segments (const struct cmsghdr *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int inet6_rthdr_segments (cmsghdr*);

		// extern struct in6_addr * inet6_rthdr_getaddr (struct cmsghdr *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe in6_addr* inet6_rthdr_getaddr (cmsghdr*, int);

		// extern int inet6_rthdr_getflags (const struct cmsghdr *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int inet6_rthdr_getflags (cmsghdr*, int);

		// extern int inet6_opt_init (void *, socklen_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int inet6_opt_init (void*, uint);

		// extern int inet6_opt_append (void *, socklen_t, int, __uint8_t, socklen_t, __uint8_t, void **);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int inet6_opt_append (void*, uint, int, byte, uint, byte, void**);

		// extern int inet6_opt_finish (void *, socklen_t, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int inet6_opt_finish (void*, uint, int);

		// extern int inet6_opt_set_val (void *, int, void *, socklen_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int inet6_opt_set_val (void*, int, void*, uint);

		// extern int inet6_opt_next (void *, socklen_t, int, __uint8_t *, socklen_t *, void **);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int inet6_opt_next (void*, uint, int, byte*, uint*, void**);

		// extern int inet6_opt_find (void *, socklen_t, int, __uint8_t, socklen_t *, void **);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int inet6_opt_find (void*, uint, int, byte, uint*, void**);

		// extern int inet6_opt_get_val (void *, int, void *, socklen_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int inet6_opt_get_val (void*, int, void*, uint);

		// extern socklen_t inet6_rth_space (int, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint inet6_rth_space (int, int);

		// extern void * inet6_rth_init (void *, socklen_t, int, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* inet6_rth_init (void*, uint, int, int);

		// extern int inet6_rth_add (void *, const struct in6_addr *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int inet6_rth_add (void*, in6_addr*);

		// extern int inet6_rth_reverse (const void *, void *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int inet6_rth_reverse (void*, void*);

		// extern int inet6_rth_segments (const void *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int inet6_rth_segments (void*);

		// extern struct in6_addr * inet6_rth_getaddr (const void *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe in6_addr* inet6_rth_getaddr (void*, int);

		// extern void addrsel_policy_init ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void addrsel_policy_init ();

		// extern int bindresvport (int, struct sockaddr_in *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int bindresvport (int, sockaddr_in*);

		// extern int bindresvport_sa (int, struct sockaddr *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int bindresvport_sa (int, sockaddr*);

		// extern in_addr_t inet_addr (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe uint inet_addr (sbyte*);

		// extern char * inet_ntoa (struct in_addr);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* inet_ntoa (in_addr);

		// extern const char * inet_ntop (int, const void *, char *, socklen_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* inet_ntop (int, void*, sbyte*, uint);

		// extern int inet_pton (int, const char *, void *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int inet_pton (int, sbyte*, void*);

		// extern int ascii2addr (int, const char *, void *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int ascii2addr (int, sbyte*, void*);

		// extern char * addr2ascii (int, const void *, int, char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* addr2ascii (int, void*, int, sbyte*);

		// extern int inet_aton (const char *, struct in_addr *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int inet_aton (sbyte*, in_addr*);

		// extern in_addr_t inet_lnaof (struct in_addr);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint inet_lnaof (in_addr);

		// extern struct in_addr inet_makeaddr (in_addr_t, in_addr_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern in_addr inet_makeaddr (uint, uint);

		// extern in_addr_t inet_netof (struct in_addr);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint inet_netof (in_addr);

		// extern in_addr_t inet_network (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe uint inet_network (sbyte*);

		// extern char * inet_net_ntop (int, const void *, int, char *, __darwin_size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* inet_net_ntop (int, void*, int, sbyte*, nuint);

		// extern int inet_net_pton (int, const char *, void *, __darwin_size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int inet_net_pton (int, sbyte*, void*, nuint);

		// extern char * inet_neta (in_addr_t, char *, __darwin_size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* inet_neta (uint, sbyte*, nuint);

		// extern unsigned int inet_nsap_addr (const char *, unsigned char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe uint inet_nsap_addr (sbyte*, byte*, int);

		// extern char * inet_nsap_ntoa (int, const unsigned char *, char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* inet_nsap_ntoa (int, byte*, sbyte*);

		// extern int closedir (DIR *) asm("_closedir");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int closedir (DIR*);

		// extern DIR * opendir (const char *) asm("_opendir");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe DIR* opendir (sbyte*);

		// extern struct dirent * readdir (DIR *) asm("_readdir");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe dirent* readdir (DIR*);

		// extern int readdir_r (DIR *, struct dirent *, struct dirent **) asm("_readdir_r");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int readdir_r (DIR*, dirent*, dirent**);

		// extern void rewinddir (DIR *) asm("_rewinddir");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void rewinddir (DIR*);

		// extern void seekdir (DIR *, long) asm("_seekdir");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void seekdir (DIR*, nint);

		// extern long telldir (DIR *) asm("_telldir");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint telldir (DIR*);

		// extern DIR * fdopendir (int) asm("_fdopendir") __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe DIR* fdopendir (int);

		// extern int alphasort (const struct dirent **, const struct dirent **) asm("_alphasort");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int alphasort (dirent**, dirent**);

		// extern int dirfd (DIR *dirp) __attribute__((availability(ios, introduced=6.0)));
		[iOS (6,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int dirfd (DIR* dirp);

		// extern int scandir (const char *, struct dirent ***, int (*)(const struct dirent *), int (*)(const struct dirent **, const struct dirent **)) asm("_scandir");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int scandir (sbyte*, dirent***, Func<Darwin.dirent*, int>*, Func<Darwin.dirent**, Darwin.dirent**, int>*);

		// extern int scandir_b (const char *, struct dirent ***, int (^)(const struct dirent *), int (^)(const struct dirent **, const struct dirent **)) asm("_scandir_b") __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int scandir_b (sbyte*, dirent***, Func<Darwin.dirent*, int>, Func<Darwin.dirent**, Darwin.dirent**, int>);

		// extern int getdirentries (int, char *, int, long *) asm("_getdirentries_is_not_available_when_64_bit_inodes_are_in_effect");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getdirentries (int, sbyte*, int, nint*);

		// extern DIR * __opendir2 (const char *, int) asm("___opendir2");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe DIR* __opendir2 (sbyte*, int);

		// extern int dladdr (const void *, Dl_info *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int dladdr (void*, Dl_info*);

		// extern int dlclose (void *__handle);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int dlclose (void* __handle);

		// extern char * dlerror ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* dlerror ();

		// extern void * dlopen (const char *__path, int __mode);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* dlopen (sbyte* __path, int __mode);

		// extern void * dlsym (void *__handle, const char *__symbol);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* dlsym (void* __handle, sbyte* __symbol);

		// extern _Bool dlopen_preflight (const char *__path) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool dlopen_preflight (sbyte* __path);

		// extern int open (const char *, int, ...) asm("_open");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int open (sbyte*, int, IntPtr varArgs);

		// extern int openat (int, const char *, int, ...) asm("_openat") __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int openat (int, sbyte*, int, IntPtr varArgs);

		// extern int creat (const char *, mode_t) asm("_creat");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int creat (sbyte*, ushort);

		// extern int fcntl (int, int, ...) asm("_fcntl");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int fcntl (int, int, IntPtr varArgs);

		// extern int openx_np (const char *, int, filesec_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int openx_np (sbyte*, int, filesec_t*);

		// extern int open_dprotected_np (const char *, int, int, int, ...);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int open_dprotected_np (sbyte*, int, int, int, IntPtr varArgs);

		// extern int flock (int, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int flock (int, int);

		// extern filesec_t filesec_init ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe filesec_t* filesec_init ();

		// extern filesec_t filesec_dup (filesec_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe filesec_t* filesec_dup (filesec_t*);

		// extern void filesec_free (filesec_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void filesec_free (filesec_t*);

		// extern int filesec_get_property (filesec_t, filesec_property_t, void *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int filesec_get_property (filesec_t*, filesec_property_t, void*);

		// extern int filesec_query_property (filesec_t, filesec_property_t, int *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int filesec_query_property (filesec_t*, filesec_property_t, int*);

		// extern int filesec_set_property (filesec_t, filesec_property_t, const void *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int filesec_set_property (filesec_t*, filesec_property_t, void*);

		// extern int filesec_unset_property (filesec_t, filesec_property_t) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int filesec_unset_property (filesec_t*, filesec_property_t);

		// extern int fmtmsg (long, const char *, int, const char *, const char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fmtmsg (nint, sbyte*, int, sbyte*, sbyte*, sbyte*);

		// extern int fnmatch (const char *, const char *, int) asm("_fnmatch");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fnmatch (sbyte*, sbyte*, int);

		// extern int chmod (const char *, mode_t) asm("_chmod");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int chmod (sbyte*, ushort);

		// extern int fchmod (int, mode_t) asm("_fchmod");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int fchmod (int, ushort);

		// extern int fstat (int, struct stat *) asm("_fstat");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fstat (int, stat*);

		// extern int lstat (const char *, struct stat *) asm("_lstat");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int lstat (sbyte*, stat*);

		// extern int mkdir (const char *, mode_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mkdir (sbyte*, ushort);

		// extern int mkfifo (const char *, mode_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mkfifo (sbyte*, ushort);

		// extern int stat (const char *, struct stat *) asm("_stat");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int stat (sbyte*, stat*);

		// extern int mknod (const char *, mode_t, dev_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mknod (sbyte*, ushort, int);

		// extern mode_t umask (mode_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ushort umask (ushort);

		// extern int fchmodat (int, const char *, mode_t, int) __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fchmodat (int, sbyte*, ushort, int);

		// extern int fstatat (int, const char *, struct stat *, int) asm("_fstatat") __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fstatat (int, sbyte*, stat*, int);

		// extern int mkdirat (int, const char *, mode_t) __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mkdirat (int, sbyte*, ushort);

		// extern int futimens (int __fd, const struct timespec *__times) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int futimens (int __fd, timespec[] __times);

		// extern int utimensat (int __fd, const char *__path, const struct timespec *__times, int __flag) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int utimensat (int __fd, sbyte* __path, timespec[] __times, int __flag);

		// extern int chflags (const char *, __uint32_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int chflags (sbyte*, uint);

		// extern int chmodx_np (const char *, filesec_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int chmodx_np (sbyte*, filesec_t*);

		// extern int fchflags (int, __uint32_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int fchflags (int, uint);

		// extern int fchmodx_np (int, filesec_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fchmodx_np (int, filesec_t*);

		// extern int fstatx_np (int, struct stat *, filesec_t) asm("_fstatx_np");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fstatx_np (int, stat*, filesec_t*);

		// extern int lchflags (const char *, __uint32_t) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int lchflags (sbyte*, uint);

		// extern int lchmod (const char *, mode_t) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int lchmod (sbyte*, ushort);

		// extern int lstatx_np (const char *, struct stat *, filesec_t) asm("_lstatx_np");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int lstatx_np (sbyte*, stat*, filesec_t*);

		// extern int mkdirx_np (const char *, filesec_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mkdirx_np (sbyte*, filesec_t*);

		// extern int mkfifox_np (const char *, filesec_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mkfifox_np (sbyte*, filesec_t*);

		// extern int statx_np (const char *, struct stat *, filesec_t) asm("_statx_np");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int statx_np (sbyte*, stat*, filesec_t*);

		// extern int umaskx_np (filesec_t) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int umaskx_np (filesec_t*);

		// extern int ftw (const char *, int (*)(const char *, const struct stat *, int), int) asm("_ftw");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int ftw (sbyte*, Func<sbyte*, Darwin.stat*, int, int>*, int);

		// extern int nftw (const char *, int (*)(const char *, const struct stat *, int, struct FTW *), int, int) asm("_nftw");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int nftw (sbyte*, Func<sbyte*, Darwin.stat*, int, Darwin.FTW*, int>*, int, int);

		// extern int glob (const char *__restrict, int, int (*)(const char *, int), glob_t *__restrict) asm("_glob");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int glob (sbyte*, int, Func<sbyte*, int, int>*, glob_t*);

		// extern int glob_b (const char *__restrict, int, int (^)(const char *, int), glob_t *__restrict) asm("_glob_b") __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int glob_b (sbyte*, int, Func<sbyte*, int, int>, glob_t*);

		// extern void globfree (glob_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void globfree (glob_t*);

		// extern struct group * getgrgid (gid_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe group* getgrgid (uint);

		// extern struct group * getgrnam (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe group* getgrnam (sbyte*);

		// extern int getgrgid_r (gid_t, struct group *, char *, size_t, struct group **);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getgrgid_r (uint, group*, sbyte*, nuint, group**);

		// extern int getgrnam_r (const char *, struct group *, char *, size_t, struct group **);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getgrnam_r (sbyte*, group*, sbyte*, nuint, group**);

		// extern struct group * getgrent ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe group* getgrent ();

		// extern void setgrent ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void setgrent ();

		// extern void endgrent ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void endgrent ();

		// extern char * group_from_gid (gid_t, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* group_from_gid (uint, int);

		// extern struct group * getgruuid (unsigned char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe group* getgruuid (byte[]);

		// extern int getgruuid_r (unsigned char *, struct group *, char *, size_t, struct group **);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getgruuid_r (byte[], group*, sbyte*, nuint, group**);

		// extern void setgrfile (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void setgrfile (sbyte*);

		// extern int setgroupent (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int setgroupent (int);

		// extern iconv_t iconv_open (const char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* iconv_open (sbyte*, sbyte*);

		// extern size_t iconv (iconv_t, char **__restrict, size_t *__restrict, char **__restrict, size_t *__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint iconv (void*, sbyte**, nuint*, sbyte**, nuint*);

		// extern int iconv_close (iconv_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int iconv_close (void*);

		// extern int iconvctl (iconv_t, int, void *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int iconvctl (void*, int, void*);

		// extern void iconvlist (int (*)(unsigned int, const char *const *, void *), void *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void iconvlist (Func<uint, sbyte**, void*, int>*, void*);

		// extern const char * iconv_canonicalize (const char *name);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* iconv_canonicalize (sbyte* name);

		// extern void libiconv_set_relocation_prefix (const char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void libiconv_set_relocation_prefix (sbyte*, sbyte*);

		// extern int getifaddrs (struct ifaddrs **);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getifaddrs (ifaddrs**);

		// extern void freeifaddrs (struct ifaddrs *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void freeifaddrs (ifaddrs*);

		// extern int getifmaddrs (struct ifmaddrs **) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getifmaddrs (ifmaddrs**);

		// extern void freeifmaddrs (struct ifmaddrs *) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void freeifmaddrs (ifmaddrs*);

		// extern int ioctl (int, unsigned long, ...);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int ioctl (int, nuint, IntPtr varArgs);

		// extern char * nl_langinfo (nl_item);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* nl_langinfo (int);

		// extern char * nl_langinfo_l (nl_item, locale_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* nl_langinfo_l (int, locale_t*);

		// extern char * basename (char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* basename (sbyte*);

		// extern char * dirname (char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* dirname (sbyte*);

		// extern char * basename_r (const char *, char *) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* basename_r (sbyte*, sbyte*);

		// extern char * dirname_r (const char *, char *) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* dirname_r (sbyte*, sbyte*);

		// extern ssize_t strfmon (char *, size_t, const char *, ...);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint strfmon (sbyte*, nuint, sbyte*, IntPtr varArgs);

		// extern ssize_t strfmon_l (char *, size_t, locale_t, const char *, ...) __attribute__((format(strfmon, 4, 5)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint strfmon_l (sbyte*, nuint, locale_t*, sbyte*, IntPtr varArgs);

		// extern int dbm_clearerr (DBM *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int dbm_clearerr (DBM*);

		// extern void dbm_close (DBM *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void dbm_close (DBM*);

		// extern int dbm_delete (DBM *, datum);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int dbm_delete (DBM*, datum);

		// extern int dbm_dirfno (DBM *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int dbm_dirfno (DBM*);

		// extern int dbm_error (DBM *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int dbm_error (DBM*);

		// extern datum dbm_fetch (DBM *, datum);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe datum dbm_fetch (DBM*, datum);

		// extern datum dbm_firstkey (DBM *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe datum dbm_firstkey (DBM*);

		// extern long dbm_forder (DBM *, datum);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint dbm_forder (DBM*, datum);

		// extern datum dbm_nextkey (DBM *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe datum dbm_nextkey (DBM*);

		// extern DBM * dbm_open (const char *, int, mode_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe DBM* dbm_open (sbyte*, int, ushort);

		// extern int dbm_store (DBM *, datum, datum, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int dbm_store (DBM*, datum, datum, int);

		// extern void endhostent ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void endhostent ();

		// extern void endnetent ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void endnetent ();

		// extern void endprotoent ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void endprotoent ();

		// extern void endservent ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void endservent ();

		// extern void freeaddrinfo (struct addrinfo *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void freeaddrinfo (addrinfo*);

		// extern const char * gai_strerror (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* gai_strerror (int);

		// extern int getaddrinfo (const char *__restrict, const char *__restrict, const struct addrinfo *__restrict, struct addrinfo **__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getaddrinfo (sbyte*, sbyte*, addrinfo*, addrinfo**);

		// extern struct hostent * gethostbyaddr (const void *, socklen_t, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe hostent* gethostbyaddr (void*, uint, int);

		// extern struct hostent * gethostbyname (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe hostent* gethostbyname (sbyte*);

		// extern struct hostent * gethostent ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe hostent* gethostent ();

		// extern int getnameinfo (const struct sockaddr *__restrict, socklen_t, char *__restrict, socklen_t, char *__restrict, socklen_t, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getnameinfo (sockaddr*, uint, sbyte*, uint, sbyte*, uint, int);

		// extern struct netent * getnetbyaddr (uint32_t, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe netent* getnetbyaddr (uint, int);

		// extern struct netent * getnetbyname (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe netent* getnetbyname (sbyte*);

		// extern struct netent * getnetent ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe netent* getnetent ();

		// extern struct protoent * getprotobyname (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe protoent* getprotobyname (sbyte*);

		// extern struct protoent * getprotobynumber (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe protoent* getprotobynumber (int);

		// extern struct protoent * getprotoent ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe protoent* getprotoent ();

		// extern struct servent * getservbyname (const char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe servent* getservbyname (sbyte*, sbyte*);

		// extern struct servent * getservbyport (int, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe servent* getservbyport (int, sbyte*);

		// extern struct servent * getservent ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe servent* getservent ();

		// extern void sethostent (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void sethostent (int);

		// extern void setnetent (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void setnetent (int);

		// extern void setprotoent (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void setprotoent (int);

		// extern void setservent (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void setservent (int);

		// extern void freehostent (struct hostent *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void freehostent (hostent*);

		// extern struct hostent * gethostbyname2 (const char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe hostent* gethostbyname2 (sbyte*, int);

		// extern struct hostent * getipnodebyaddr (const void *, size_t, int, int *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe hostent* getipnodebyaddr (void*, nuint, int, int*);

		// extern struct hostent * getipnodebyname (const char *, int, int, int *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe hostent* getipnodebyname (sbyte*, int, int, int*);

		// extern struct rpcent * getrpcbyname (const char *name);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe rpcent* getrpcbyname (sbyte* name);

		// extern struct rpcent * getrpcbynumber (int number);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe rpcent* getrpcbynumber (int number);

		// extern struct rpcent * getrpcent ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe rpcent* getrpcent ();

		// extern void setrpcent (int stayopen);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void setrpcent (int stayopen);

		// extern void endrpcent ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void endrpcent ();

		// extern void herror (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void herror (sbyte*);

		// extern const char * hstrerror (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* hstrerror (int);

		// extern int innetgr (const char *, const char *, const char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int innetgr (sbyte*, sbyte*, sbyte*, sbyte*);

		// extern int getnetgrent (char **, char **, char **);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getnetgrent (sbyte**, sbyte**, sbyte**);

		// extern void endnetgrent ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void endnetgrent ();

		// extern void setnetgrent (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void setnetgrent (sbyte*);

		// extern void link_addr (const char *, struct sockaddr_dl *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void link_addr (sbyte*, sockaddr_dl*);

		// extern char * link_ntoa (const struct sockaddr_dl *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* link_ntoa (sockaddr_dl*);

		// extern int adjtime (const struct timeval *, struct timeval *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int adjtime (timeval*, timeval*);

		// extern int futimes (int, const struct timeval *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int futimes (int, timeval*);

		// extern int lutimes (const char *, const struct timeval *) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int lutimes (sbyte*, timeval*);

		// extern int settimeofday (const struct timeval *, const struct timezone *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int settimeofday (timeval*, timezone*);

		// extern int getitimer (int, struct itimerval *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getitimer (int, itimerval*);

		// extern int gettimeofday (struct timeval *__restrict, void *__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int gettimeofday (timeval*, void*);

		// extern int select (int, fd_set *__restrict, fd_set *__restrict, fd_set *__restrict, struct timeval *__restrict) asm("_select");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int select (int, fd_set*, fd_set*, fd_set*, timeval*);

		// extern int setitimer (int, const struct itimerval *__restrict, struct itimerval *__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int setitimer (int, itimerval*, itimerval*);

		// extern int utimes (const char *, const struct timeval *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int utimes (sbyte*, timeval*);

		// extern unsigned int if_nametoindex (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe uint if_nametoindex (sbyte*);

		// extern char * if_indextoname (unsigned int, char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* if_indextoname (uint, sbyte*);

		// extern struct if_nameindex * if_nameindex ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe if_nameindex* if_nameindex ();

		// extern void if_freenameindex (struct if_nameindex *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void if_freenameindex (if_nameindex*);

		// extern nl_catd catopen (const char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nl_catd* catopen (sbyte*, int);

		// extern char * catgets (nl_catd, int, int, const char *) __attribute__((format_arg(4)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* catgets (nl_catd*, int, int, sbyte*);

		// extern int catclose (nl_catd);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int catclose (nl_catd*);

		// extern int poll (struct pollfd *, nfds_t, int) asm("_poll");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int poll (pollfd*, uint, int);

		// extern int sched_yield ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int sched_yield ();

		// extern int sched_get_priority_min (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int sched_get_priority_min (int);

		// extern int sched_get_priority_max (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int sched_get_priority_max (int);

		// extern qos_class_t qos_class_self () __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
		[Mac (10,10), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern qos_class_t qos_class_self ();

		// extern qos_class_t qos_class_main () __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
		[Mac (10,10), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern qos_class_t qos_class_main ();

		// extern int pthread_attr_set_qos_class_np (pthread_attr_t * _Nonnull __attr, qos_class_t __qos_class, int __relative_priority) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
		[Mac (10,10), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_set_qos_class_np (pthread_attr_t* __attr, qos_class_t __qos_class, int __relative_priority);

		// extern int pthread_attr_get_qos_class_np (pthread_attr_t *__restrict _Nonnull __attr, qos_class_t *__restrict _Nullable __qos_class, int *__restrict _Nullable __relative_priority) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
		[Mac (10,10), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_get_qos_class_np (pthread_attr_t* __attr, [NullAllowed] qos_class_t* __qos_class, [NullAllowed] int* __relative_priority);

		// extern int pthread_set_qos_class_self_np (qos_class_t __qos_class, int __relative_priority) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
		[Mac (10,10), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int pthread_set_qos_class_self_np (qos_class_t __qos_class, int __relative_priority);

		// extern int pthread_get_qos_class_np (pthread_t _Nonnull __pthread, qos_class_t *__restrict _Nullable __qos_class, int *__restrict _Nullable __relative_priority) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
		[Mac (10,10), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_get_qos_class_np (pthread_t* __pthread, [NullAllowed] qos_class_t* __qos_class, [NullAllowed] int* __relative_priority);

		// extern pthread_override_t _Nonnull pthread_override_qos_class_start_np (pthread_t _Nonnull __pthread, qos_class_t __qos_class, int __relative_priority) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
		[Mac (10,10), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe pthread_override_t* pthread_override_qos_class_start_np (pthread_t* __pthread, qos_class_t __qos_class, int __relative_priority);

		// extern int pthread_override_qos_class_end_np (pthread_override_t _Nonnull __override) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
		[Mac (10,10), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_override_qos_class_end_np (pthread_override_t* __override);

		// extern int pthread_atfork (void (* _Nullable)(void), void (* _Nullable)(void), void (* _Nullable)(void)) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_atfork ([NullAllowed] Action*, [NullAllowed] Action*, [NullAllowed] Action*);

		// extern int pthread_attr_destroy (pthread_attr_t * _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_destroy (pthread_attr_t*);

		// extern int pthread_attr_getdetachstate (const pthread_attr_t * _Nonnull, int * _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_getdetachstate (pthread_attr_t*, int*);

		// extern int pthread_attr_getguardsize (const pthread_attr_t *__restrict _Nonnull, size_t *__restrict _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_getguardsize (pthread_attr_t*, nuint*);

		// extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict _Nonnull, int *__restrict _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_getinheritsched (pthread_attr_t*, int*);

		// extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict _Nonnull, struct sched_param *__restrict _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_getschedparam (pthread_attr_t*, sched_param*);

		// extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict _Nonnull, int *__restrict _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_getschedpolicy (pthread_attr_t*, int*);

		// extern int pthread_attr_getscope (const pthread_attr_t *__restrict _Nonnull, int *__restrict _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_getscope (pthread_attr_t*, int*);

		// extern int pthread_attr_getstack (const pthread_attr_t *__restrict _Nonnull, void * _Nullable *__restrict _Nonnull, size_t *__restrict _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_getstack (pthread_attr_t*, [NullAllowed] void**, nuint*);

		// extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict _Nonnull, void * _Nullable *__restrict _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_getstackaddr (pthread_attr_t*, [NullAllowed] void**);

		// extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict _Nonnull, size_t *__restrict _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_getstacksize (pthread_attr_t*, nuint*);

		// extern int pthread_attr_init (pthread_attr_t * _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_init (pthread_attr_t*);

		// extern int pthread_attr_setdetachstate (pthread_attr_t * _Nonnull, int) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_setdetachstate (pthread_attr_t*, int);

		// extern int pthread_attr_setguardsize (pthread_attr_t * _Nonnull, size_t) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_setguardsize (pthread_attr_t*, nuint);

		// extern int pthread_attr_setinheritsched (pthread_attr_t * _Nonnull, int) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_setinheritsched (pthread_attr_t*, int);

		// extern int pthread_attr_setschedparam (pthread_attr_t *__restrict _Nonnull, const struct sched_param *__restrict _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_setschedparam (pthread_attr_t*, sched_param*);

		// extern int pthread_attr_setschedpolicy (pthread_attr_t * _Nonnull, int) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_setschedpolicy (pthread_attr_t*, int);

		// extern int pthread_attr_setscope (pthread_attr_t * _Nonnull, int) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_setscope (pthread_attr_t*, int);

		// extern int pthread_attr_setstack (pthread_attr_t * _Nonnull, void * _Nonnull, size_t) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_setstack (pthread_attr_t*, void*, nuint);

		// extern int pthread_attr_setstackaddr (pthread_attr_t * _Nonnull, void * _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_setstackaddr (pthread_attr_t*, void*);

		// extern int pthread_attr_setstacksize (pthread_attr_t * _Nonnull, size_t) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_setstacksize (pthread_attr_t*, nuint);

		// extern int pthread_cancel (pthread_t _Nonnull) asm("_pthread_cancel") __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_cancel (pthread_t*);

		// extern int pthread_cond_broadcast (pthread_cond_t * _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_cond_broadcast (pthread_cond_t*);

		// extern int pthread_cond_destroy (pthread_cond_t * _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_cond_destroy (pthread_cond_t*);

		// extern int pthread_cond_init (pthread_cond_t *__restrict _Nonnull, const pthread_condattr_t *__restrict _Nullable) asm("_pthread_cond_init") __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_cond_init (pthread_cond_t*, [NullAllowed] pthread_condattr_t*);

		// extern int pthread_cond_signal (pthread_cond_t * _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_cond_signal (pthread_cond_t*);

		// extern int pthread_cond_timedwait (pthread_cond_t *__restrict _Nonnull, pthread_mutex_t *__restrict _Nonnull, const struct timespec *__restrict _Nullable) asm("_pthread_cond_timedwait") __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_cond_timedwait (pthread_cond_t*, pthread_mutex_t*, [NullAllowed] timespec*);

		// extern int pthread_cond_wait (pthread_cond_t *__restrict _Nonnull, pthread_mutex_t *__restrict _Nonnull) asm("_pthread_cond_wait") __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_cond_wait (pthread_cond_t*, pthread_mutex_t*);

		// extern int pthread_condattr_destroy (pthread_condattr_t * _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_condattr_destroy (pthread_condattr_t*);

		// extern int pthread_condattr_init (pthread_condattr_t * _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_condattr_init (pthread_condattr_t*);

		// extern int pthread_condattr_getpshared (const pthread_condattr_t *__restrict _Nonnull, int *__restrict _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_condattr_getpshared (pthread_condattr_t*, int*);

		// extern int pthread_condattr_setpshared (pthread_condattr_t * _Nonnull, int) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_condattr_setpshared (pthread_condattr_t*, int);

		// extern int pthread_create (pthread_t  _Nullable *__restrict _Nonnull, const pthread_attr_t *__restrict _Nullable, void * _Nullable (* _Nonnull)(void * _Nullable), void *__restrict _Nullable) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_create ([NullAllowed] pthread_t**, [NullAllowed] pthread_attr_t*, Func<void*, void*>*, [NullAllowed] void*);

		// extern int pthread_detach (pthread_t _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_detach (pthread_t*);

		// extern int pthread_equal (pthread_t _Nullable, pthread_t _Nullable) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_equal ([NullAllowed] pthread_t*, [NullAllowed] pthread_t*);

		// extern void pthread_exit (void * _Nullable) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void pthread_exit ([NullAllowed] void*);

		// extern int pthread_getconcurrency () __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int pthread_getconcurrency ();

		// extern int pthread_getschedparam (pthread_t _Nonnull, int *__restrict _Nullable, struct sched_param *__restrict _Nullable) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_getschedparam (pthread_t*, [NullAllowed] int*, [NullAllowed] sched_param*);

		// extern void * _Nullable pthread_getspecific (pthread_key_t) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe void* pthread_getspecific (nuint);

		// extern int pthread_join (pthread_t _Nonnull, void * _Nullable * _Nullable) asm("_pthread_join") __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_join (pthread_t*, [NullAllowed] void**);

		// extern int pthread_key_create (pthread_key_t * _Nonnull, void (* _Nullable)(void * _Nonnull)) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_key_create (nuint*, [NullAllowed] Action<void*>*);

		// extern int pthread_key_delete (pthread_key_t) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int pthread_key_delete (nuint);

		// extern int pthread_mutex_destroy (pthread_mutex_t * _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_mutex_destroy (pthread_mutex_t*);

		// extern int pthread_mutex_getprioceiling (const pthread_mutex_t *__restrict _Nonnull, int *__restrict _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_mutex_getprioceiling (pthread_mutex_t*, int*);

		// extern int pthread_mutex_init (pthread_mutex_t *__restrict _Nonnull, const pthread_mutexattr_t *__restrict _Nullable) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_mutex_init (pthread_mutex_t*, [NullAllowed] pthread_mutexattr_t*);

		// extern int pthread_mutex_lock (pthread_mutex_t * _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_mutex_lock (pthread_mutex_t*);

		// extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict _Nonnull, int, int *__restrict _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_mutex_setprioceiling (pthread_mutex_t*, int, int*);

		// extern int pthread_mutex_trylock (pthread_mutex_t * _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_mutex_trylock (pthread_mutex_t*);

		// extern int pthread_mutex_unlock (pthread_mutex_t * _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_mutex_unlock (pthread_mutex_t*);

		// extern int pthread_mutexattr_destroy (pthread_mutexattr_t * _Nonnull) asm("_pthread_mutexattr_destroy") __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_mutexattr_destroy (pthread_mutexattr_t*);

		// extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *__restrict _Nonnull, int *__restrict _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_mutexattr_getprioceiling (pthread_mutexattr_t*, int*);

		// extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *__restrict _Nonnull, int *__restrict _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_mutexattr_getprotocol (pthread_mutexattr_t*, int*);

		// extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *__restrict _Nonnull, int *__restrict _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_mutexattr_getpshared (pthread_mutexattr_t*, int*);

		// extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict _Nonnull, int *__restrict _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_mutexattr_gettype (pthread_mutexattr_t*, int*);

		// extern int pthread_mutexattr_init (pthread_mutexattr_t * _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_mutexattr_init (pthread_mutexattr_t*);

		// extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t * _Nonnull, int) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_mutexattr_setprioceiling (pthread_mutexattr_t*, int);

		// extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t * _Nonnull, int) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_mutexattr_setprotocol (pthread_mutexattr_t*, int);

		// extern int pthread_mutexattr_setpshared (pthread_mutexattr_t * _Nonnull, int) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_mutexattr_setpshared (pthread_mutexattr_t*, int);

		// extern int pthread_mutexattr_settype (pthread_mutexattr_t * _Nonnull, int) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_mutexattr_settype (pthread_mutexattr_t*, int);

		// extern int pthread_once (pthread_once_t * _Nonnull, void (* _Nonnull)(void)) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_once (pthread_once_t*, Action*);

		// extern int pthread_rwlock_destroy (pthread_rwlock_t * _Nonnull) asm("_pthread_rwlock_destroy") __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_rwlock_destroy (pthread_rwlock_t*);

		// extern int pthread_rwlock_init (pthread_rwlock_t *__restrict _Nonnull, const pthread_rwlockattr_t *__restrict _Nullable) asm("_pthread_rwlock_init") __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_rwlock_init (pthread_rwlock_t*, [NullAllowed] pthread_rwlockattr_t*);

		// extern int pthread_rwlock_rdlock (pthread_rwlock_t * _Nonnull) asm("_pthread_rwlock_rdlock") __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_rwlock_rdlock (pthread_rwlock_t*);

		// extern int pthread_rwlock_tryrdlock (pthread_rwlock_t * _Nonnull) asm("_pthread_rwlock_tryrdlock") __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_rwlock_tryrdlock (pthread_rwlock_t*);

		// extern int pthread_rwlock_trywrlock (pthread_rwlock_t * _Nonnull) asm("_pthread_rwlock_trywrlock") __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_rwlock_trywrlock (pthread_rwlock_t*);

		// extern int pthread_rwlock_wrlock (pthread_rwlock_t * _Nonnull) asm("_pthread_rwlock_wrlock") __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_rwlock_wrlock (pthread_rwlock_t*);

		// extern int pthread_rwlock_unlock (pthread_rwlock_t * _Nonnull) asm("_pthread_rwlock_unlock") __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_rwlock_unlock (pthread_rwlock_t*);

		// extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t * _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_rwlockattr_destroy (pthread_rwlockattr_t*);

		// extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *__restrict _Nonnull, int *__restrict _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_rwlockattr_getpshared (pthread_rwlockattr_t*, int*);

		// extern int pthread_rwlockattr_init (pthread_rwlockattr_t * _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_rwlockattr_init (pthread_rwlockattr_t*);

		// extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t * _Nonnull, int) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_rwlockattr_setpshared (pthread_rwlockattr_t*, int);

		// extern pthread_t _Nonnull pthread_self () __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe pthread_t* pthread_self ();

		// extern int pthread_setcancelstate (int, int * _Nullable) asm("_pthread_setcancelstate") __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_setcancelstate (int, [NullAllowed] int*);

		// extern int pthread_setcanceltype (int, int * _Nullable) asm("_pthread_setcanceltype") __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_setcanceltype (int, [NullAllowed] int*);

		// extern int pthread_setconcurrency (int) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int pthread_setconcurrency (int);

		// extern int pthread_setschedparam (pthread_t _Nonnull, int, const struct sched_param * _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_setschedparam (pthread_t*, int, sched_param*);

		// extern int pthread_setspecific (pthread_key_t, const void * _Nullable) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_setspecific (nuint, [NullAllowed] void*);

		// extern void pthread_testcancel () asm("_pthread_testcancel") __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void pthread_testcancel ();

		// extern int pthread_is_threaded_np () __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int pthread_is_threaded_np ();

		// extern int pthread_threadid_np (pthread_t _Nullable, __uint64_t * _Nullable) __attribute__((availability(ios, introduced=3.2))) __attribute__((availability(macos, introduced=10.6)));
		[Mac (10,6), iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_threadid_np ([NullAllowed] pthread_t*, [NullAllowed] ulong*);

		// extern int pthread_getname_np (pthread_t _Nonnull, char * _Nonnull, size_t) __attribute__((availability(ios, introduced=3.2))) __attribute__((availability(macos, introduced=10.6)));
		[Mac (10,6), iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_getname_np (pthread_t*, sbyte*, nuint);

		// extern int pthread_setname_np (const char * _Nonnull) __attribute__((availability(ios, introduced=3.2))) __attribute__((availability(macos, introduced=10.6)));
		[Mac (10,6), iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_setname_np (sbyte*);

		// extern int pthread_main_np () __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int pthread_main_np ();

		// extern mach_port_t pthread_mach_thread_np (pthread_t _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe uint pthread_mach_thread_np (pthread_t*);

		// extern size_t pthread_get_stacksize_np (pthread_t _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint pthread_get_stacksize_np (pthread_t*);

		// extern void * _Nonnull pthread_get_stackaddr_np (pthread_t _Nonnull) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* pthread_get_stackaddr_np (pthread_t*);

		// extern int pthread_cond_signal_thread_np (pthread_cond_t * _Nonnull, pthread_t _Nullable) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_cond_signal_thread_np (pthread_cond_t*, [NullAllowed] pthread_t*);

		// extern int pthread_cond_timedwait_relative_np (pthread_cond_t * _Nonnull, pthread_mutex_t * _Nonnull, const struct timespec * _Nullable) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_cond_timedwait_relative_np (pthread_cond_t*, pthread_mutex_t*, [NullAllowed] timespec*);

		// extern int pthread_create_suspended_np (pthread_t  _Nullable * _Nonnull, const pthread_attr_t * _Nullable, void * _Nullable (* _Nonnull)(void * _Nullable), void * _Nullable) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_create_suspended_np ([NullAllowed] pthread_t**, [NullAllowed] pthread_attr_t*, Func<void*, void*>*, [NullAllowed] void*);

		// extern int pthread_kill (pthread_t _Nonnull, int) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_kill (pthread_t*, int);

		// extern pthread_t _Nullable pthread_from_mach_thread_np (mach_port_t) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe pthread_t* pthread_from_mach_thread_np (uint);

		// extern int pthread_sigmask (int, const sigset_t * _Nullable, sigset_t * _Nullable) asm("_pthread_sigmask") __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_sigmask (int, [NullAllowed] uint*, [NullAllowed] uint*);

		// extern void pthread_yield_np () __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void pthread_yield_np ();

		// extern int pthread_mutexattr_setpolicy_np (pthread_mutexattr_t * _Nonnull, int) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
		[Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_mutexattr_setpolicy_np (pthread_mutexattr_t*, int);

		// extern void _pthread_mutex_enable_legacy_mode () __attribute__((availability(macos, introduced=10.11)));
		[Mac (10,11)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void _pthread_mutex_enable_legacy_mode ();

		// extern int pthread_create_from_mach_thread (pthread_t  _Nullable *__restrict _Nonnull, const pthread_attr_t *__restrict _Nullable, void * _Nullable (* _Nonnull)(void * _Nullable), void *__restrict _Nullable) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_create_from_mach_thread ([NullAllowed] pthread_t**, [NullAllowed] pthread_attr_t*, Func<void*, void*>*, [NullAllowed] void*);

		// extern int posix_spawn (pid_t *__restrict, const char *__restrict, const posix_spawn_file_actions_t *, const posix_spawnattr_t *__restrict, char *const *__restrict __argv, char *const *__restrict __envp) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=2.0)));
		[NoWatch, NoTV, iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int posix_spawn (int*, sbyte*, void**, void**, sbyte*[] __argv, sbyte*[] __envp);

		// extern int posix_spawnp (pid_t *__restrict, const char *__restrict, const posix_spawn_file_actions_t *, const posix_spawnattr_t *__restrict, char *const *__restrict __argv, char *const *__restrict __envp) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=2.0)));
		[NoWatch, NoTV, iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int posix_spawnp (int*, sbyte*, void**, void**, sbyte*[] __argv, sbyte*[] __envp);

		// extern int posix_spawn_file_actions_addclose (posix_spawn_file_actions_t *, int) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=2.0)));
		[NoWatch, NoTV, iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int posix_spawn_file_actions_addclose (void**, int);

		// extern int posix_spawn_file_actions_adddup2 (posix_spawn_file_actions_t *, int, int) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=2.0)));
		[NoWatch, NoTV, iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int posix_spawn_file_actions_adddup2 (void**, int, int);

		// extern int posix_spawn_file_actions_addopen (posix_spawn_file_actions_t *__restrict, int, const char *__restrict, int, mode_t) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=2.0)));
		[NoWatch, NoTV, iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int posix_spawn_file_actions_addopen (void**, int, sbyte*, int, ushort);

		// extern int posix_spawn_file_actions_destroy (posix_spawn_file_actions_t *) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=2.0)));
		[NoWatch, NoTV, iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int posix_spawn_file_actions_destroy (void**);

		// extern int posix_spawn_file_actions_init (posix_spawn_file_actions_t *) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=2.0)));
		[NoWatch, NoTV, iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int posix_spawn_file_actions_init (void**);

		// extern int posix_spawnattr_destroy (posix_spawnattr_t *) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=2.0)));
		[NoWatch, NoTV, iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int posix_spawnattr_destroy (void**);

		// extern int posix_spawnattr_getsigdefault (const posix_spawnattr_t *__restrict, sigset_t *__restrict) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=2.0)));
		[NoWatch, NoTV, iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int posix_spawnattr_getsigdefault (void**, uint*);

		// extern int posix_spawnattr_getflags (const posix_spawnattr_t *__restrict, short *__restrict) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=2.0)));
		[NoWatch, NoTV, iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int posix_spawnattr_getflags (void**, short*);

		// extern int posix_spawnattr_getpgroup (const posix_spawnattr_t *__restrict, pid_t *__restrict) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=2.0)));
		[NoWatch, NoTV, iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int posix_spawnattr_getpgroup (void**, int*);

		// extern int posix_spawnattr_getsigmask (const posix_spawnattr_t *__restrict, sigset_t *__restrict) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=2.0)));
		[NoWatch, NoTV, iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int posix_spawnattr_getsigmask (void**, uint*);

		// extern int posix_spawnattr_init (posix_spawnattr_t *) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=2.0)));
		[NoWatch, NoTV, iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int posix_spawnattr_init (void**);

		// extern int posix_spawnattr_setsigdefault (posix_spawnattr_t *__restrict, const sigset_t *__restrict) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=2.0)));
		[NoWatch, NoTV, iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int posix_spawnattr_setsigdefault (void**, uint*);

		// extern int posix_spawnattr_setflags (posix_spawnattr_t *, short) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=2.0)));
		[NoWatch, NoTV, iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int posix_spawnattr_setflags (void**, short);

		// extern int posix_spawnattr_setpgroup (posix_spawnattr_t *, pid_t) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=2.0)));
		[NoWatch, NoTV, iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int posix_spawnattr_setpgroup (void**, int);

		// extern int posix_spawnattr_setsigmask (posix_spawnattr_t *__restrict, const sigset_t *__restrict) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=2.0)));
		[NoWatch, NoTV, iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int posix_spawnattr_setsigmask (void**, uint*);

		// extern mach_msg_return_t mach_msg_overwrite (mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify, mach_msg_header_t *rcv_msg, mach_msg_size_t rcv_limit) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_msg_overwrite (mach_msg_header_t* msg, int option, uint send_size, uint rcv_size, uint rcv_name, uint timeout, uint notify, mach_msg_header_t* rcv_msg, uint rcv_limit);

		// extern mach_msg_return_t mach_msg (mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_msg (mach_msg_header_t* msg, int option, uint send_size, uint rcv_size, uint rcv_name, uint timeout, uint notify);

		// extern kern_return_t mach_voucher_deallocate (mach_port_name_t voucher) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int mach_voucher_deallocate (uint voucher);

		// extern int posix_spawnattr_getbinpref_np (const posix_spawnattr_t *__restrict, size_t, cpu_type_t *__restrict, size_t *__restrict) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=2.0)));
		[NoWatch, NoTV, iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int posix_spawnattr_getbinpref_np (void**, nuint, int*, nuint*);

		// extern int posix_spawnattr_setauditsessionport_np (posix_spawnattr_t *__restrict, mach_port_t) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=3.2)));
		[NoWatch, NoTV, iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int posix_spawnattr_setauditsessionport_np (void**, uint);

		// extern int posix_spawnattr_setbinpref_np (posix_spawnattr_t *__restrict, size_t, cpu_type_t *__restrict, size_t *__restrict) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=2.0)));
		[NoWatch, NoTV, iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int posix_spawnattr_setbinpref_np (void**, nuint, int*, nuint*);

		// extern int posix_spawnattr_setexceptionports_np (posix_spawnattr_t *__restrict, exception_mask_t, mach_port_t, exception_behavior_t, thread_state_flavor_t) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=2.0)));
		[NoWatch, NoTV, iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int posix_spawnattr_setexceptionports_np (void**, uint, uint, int, int);

		// extern int posix_spawnattr_setspecialport_np (posix_spawnattr_t *__restrict, mach_port_t, int) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=2.0)));
		[NoWatch, NoTV, iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int posix_spawnattr_setspecialport_np (void**, uint, int);

		// extern int posix_spawn_file_actions_addinherit_np (posix_spawn_file_actions_t *, int) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=4.3)));
		[NoWatch, NoTV, iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int posix_spawn_file_actions_addinherit_np (void**, int);

		// extern int posix_spawnattr_set_qos_class_np (posix_spawnattr_t *__restrict __attr, qos_class_t __qos_class) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
		[Mac (10,10), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int posix_spawnattr_set_qos_class_np (void** __attr, qos_class_t __qos_class);

		// extern int posix_spawnattr_get_qos_class_np (const posix_spawnattr_t *__restrict __attr, qos_class_t *__restrict __qos_class) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
		[Mac (10,10), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int posix_spawnattr_get_qos_class_np (void** __attr, qos_class_t* __qos_class);

		// extern int regcomp (regex_t *__restrict, const char *__restrict, int) asm("_regcomp");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int regcomp (regex_t*, sbyte*, int);

		// extern size_t regerror (int, const regex_t *__restrict, char *__restrict, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint regerror (int, regex_t*, sbyte*, nuint);

		// extern int regexec (const regex_t *__restrict, const char *__restrict, size_t, regmatch_t *__restrict __pmatch, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int regexec (regex_t*, sbyte*, nuint, regmatch_t[] __pmatch, int);

		// extern void regfree (regex_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void regfree (regex_t*);

		// extern int regncomp (regex_t *__restrict, const char *__restrict, size_t, int) __attribute__((availability(ios, introduced=6.0)));
		[iOS (6,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int regncomp (regex_t*, sbyte*, nuint, int);

		// extern int regnexec (const regex_t *__restrict, const char *__restrict, size_t, size_t, regmatch_t *__restrict __pmatch, int) __attribute__((availability(ios, introduced=6.0)));
		[iOS (6,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int regnexec (regex_t*, sbyte*, nuint, nuint, regmatch_t[] __pmatch, int);

		// extern int regwcomp (regex_t *__restrict, const wchar_t *__restrict, int) __attribute__((availability(ios, introduced=6.0)));
		[iOS (6,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int regwcomp (regex_t*, int*, int);

		// extern int regwexec (const regex_t *__restrict, const wchar_t *__restrict, size_t, regmatch_t *__restrict __pmatch, int) __attribute__((availability(ios, introduced=6.0)));
		[iOS (6,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int regwexec (regex_t*, int*, nuint, regmatch_t[] __pmatch, int);

		// extern int regwncomp (regex_t *__restrict, const wchar_t *__restrict, size_t, int) __attribute__((availability(ios, introduced=6.0)));
		[iOS (6,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int regwncomp (regex_t*, int*, nuint, int);

		// extern int regwnexec (const regex_t *__restrict, const wchar_t *__restrict, size_t, size_t, regmatch_t *__restrict __pmatch, int) __attribute__((availability(ios, introduced=6.0)));
		[iOS (6,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int regwnexec (regex_t*, int*, nuint, nuint, regmatch_t[] __pmatch, int);

		// extern int regcomp_l (regex_t *__restrict, const char *__restrict, int, __restrict locale_t) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int regcomp_l (regex_t*, sbyte*, int, locale_t*);

		// extern int regncomp_l (regex_t *__restrict, const char *__restrict, size_t, int, __restrict locale_t) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int regncomp_l (regex_t*, sbyte*, nuint, int, locale_t*);

		// extern int regwcomp_l (regex_t *__restrict, const wchar_t *__restrict, int, __restrict locale_t) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int regwcomp_l (regex_t*, int*, int, locale_t*);

		// extern int regwnexec_l (const regex_t *__restrict, const wchar_t *__restrict, size_t, size_t, regmatch_t *__restrict __pmatch, int, __restrict locale_t) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int regwnexec_l (regex_t*, int*, nuint, nuint, regmatch_t[] __pmatch, int, locale_t*);

		// extern int hcreate (size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int hcreate (nuint);

		// extern void hdestroy ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void hdestroy ();

		// extern ENTRY * hsearch (ENTRY, ACTION);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe ENTRY* hsearch (ENTRY, ACTION);

		// extern void insque (void *, void *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void insque (void*, void*);

		// extern void * lfind (const void *, const void *, size_t *, size_t, int (*)(const void *, const void *));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* lfind (void*, void*, nuint*, nuint, Func<void*, void*, int>*);

		// extern void * lsearch (const void *, void *, size_t *, size_t, int (*)(const void *, const void *));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* lsearch (void*, void*, nuint*, nuint, Func<void*, void*, int>*);

		// extern void remque (void *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void remque (void*);

		// extern void * tdelete (const void *__restrict, void **__restrict, int (*)(const void *, const void *));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* tdelete (void*, void**, Func<void*, void*, int>*);

		// extern void * tfind (const void *, void *const *, int (*)(const void *, const void *));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* tfind (void*, void**, Func<void*, void*, int>*);

		// extern void * tsearch (const void *, void **, int (*)(const void *, const void *));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* tsearch (void*, void**, Func<void*, void*, int>*);

		// extern void twalk (const void *, void (*)(const void *, VISIT, int));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void twalk (void*, Action<void*, VISIT, int>*);

		// extern int sem_close (sem_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sem_close (int*);

		// extern int sem_destroy (sem_t *) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sem_destroy (int*);

		// extern int sem_getvalue (sem_t *__restrict, int *__restrict) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sem_getvalue (int*, int*);

		// extern int sem_init (sem_t *, int, unsigned int) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sem_init (int*, int, uint);

		// extern sem_t * sem_open (const char *, int, ...);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int* sem_open (sbyte*, int, IntPtr varArgs);

		// extern int sem_post (sem_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sem_post (int*);

		// extern int sem_trywait (sem_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sem_trywait (int*);

		// extern int sem_unlink (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sem_unlink (sbyte*);

		// extern int sem_wait (sem_t *) asm("_sem_wait");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sem_wait (int*);

		// extern key_t ftok (const char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int ftok (sbyte*, int);

		// extern int mlockall (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int mlockall (int);

		// extern int munlockall ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int munlockall ();

		// extern int mlock (const void *, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mlock (void*, nuint);

		// extern void * mmap (void *, size_t, int, int, int, off_t) asm("_mmap");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* mmap (void*, nuint, int, int, int, long);

		// extern int mprotect (void *, size_t, int) asm("_mprotect");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mprotect (void*, nuint, int);

		// extern int msync (void *, size_t, int) asm("_msync");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int msync (void*, nuint, int);

		// extern int munlock (const void *, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int munlock (void*, nuint);

		// extern int munmap (void *, size_t) asm("_munmap");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int munmap (void*, nuint);

		// extern int shm_open (const char *, int, ...);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int shm_open (sbyte*, int, IntPtr varArgs);

		// extern int shm_unlink (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int shm_unlink (sbyte*);

		// extern int posix_madvise (void *, size_t, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int posix_madvise (void*, nuint, int);

		// extern int madvise (void *, size_t, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int madvise (void*, nuint, int);

		// extern int mincore (const void *, size_t, char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mincore (void*, nuint, sbyte*);

		// extern int minherit (void *, size_t, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int minherit (void*, nuint, int);

		// extern int msgsys (int, ...);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int msgsys (int, IntPtr varArgs);

		// extern int msgctl (int, int, struct __msqid_ds_new *) asm("_msgctl");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int msgctl (int, int, __msqid_ds_new*);

		// extern int msgget (key_t, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int msgget (int, int);

		// extern ssize_t msgrcv (int, void *, size_t, long, int) asm("_msgrcv");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint msgrcv (int, void*, nuint, nint, int);

		// extern int msgsnd (int, const void *, size_t, int) asm("_msgsnd");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int msgsnd (int, void*, nuint, int);

		// extern int pselect (int, fd_set *__restrict, fd_set *__restrict, fd_set *__restrict, const struct timespec *__restrict, const sigset_t *__restrict) asm("_pselect");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pselect (int, fd_set*, fd_set*, fd_set*, timespec*, uint*);

		// extern int semsys (int, ...);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int semsys (int, IntPtr varArgs);

		// extern int semctl (int, int, int, ...) asm("_semctl");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int semctl (int, int, int, IntPtr varArgs);

		// extern int semget (key_t, int, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int semget (int, int, int);

		// extern int semop (int, struct sembuf *, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int semop (int, sembuf*, nuint);

		// extern int shmsys (int, ...);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int shmsys (int, IntPtr varArgs);

		// extern void * shmat (int, const void *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* shmat (int, void*, int);

		// extern int shmctl (int, int, struct __shmid_ds_new *) asm("_shmctl");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int shmctl (int, int, __shmid_ds_new*);

		// extern int shmdt (const void *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int shmdt (void*);

		// extern int shmget (key_t, size_t, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int shmget (int, nuint, int);

		// extern int fstatvfs (int, struct statvfs *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fstatvfs (int, statvfs*);

		// extern int statvfs (const char *__restrict, struct statvfs *__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int statvfs (sbyte*, statvfs*);

		// extern clock_t times (struct tms *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint times (tms*);

		// extern ssize_t readv (int, const struct iovec *, int) asm("_readv");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint readv (int, iovec*, int);

		// extern ssize_t writev (int, const struct iovec *, int) asm("_writev");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint writev (int, iovec*, int);

		// extern int uname (struct utsname *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int uname (utsname*);

		// extern ssize_t getxattr (const char *path, const char *name, void *value, size_t size, u_int32_t position, int options);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint getxattr (sbyte* path, sbyte* name, void* value, nuint size, uint position, int options);

		// extern ssize_t fgetxattr (int fd, const char *name, void *value, size_t size, u_int32_t position, int options);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint fgetxattr (int fd, sbyte* name, void* value, nuint size, uint position, int options);

		// extern int setxattr (const char *path, const char *name, const void *value, size_t size, u_int32_t position, int options);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int setxattr (sbyte* path, sbyte* name, void* value, nuint size, uint position, int options);

		// extern int fsetxattr (int fd, const char *name, const void *value, size_t size, u_int32_t position, int options);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fsetxattr (int fd, sbyte* name, void* value, nuint size, uint position, int options);

		// extern int removexattr (const char *path, const char *name, int options);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int removexattr (sbyte* path, sbyte* name, int options);

		// extern int fremovexattr (int fd, const char *name, int options);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fremovexattr (int fd, sbyte* name, int options);

		// extern ssize_t listxattr (const char *path, char *namebuff, size_t size, int options);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint listxattr (sbyte* path, sbyte* namebuff, nuint size, int options);

		// extern ssize_t flistxattr (int fd, char *namebuff, size_t size, int options);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint flistxattr (int fd, sbyte* namebuff, nuint size, int options);

		// extern void closelog ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void closelog ();

		// extern void openlog (const char *, int, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void openlog (sbyte*, int, int);

		// extern int setlogmask (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int setlogmask (int);

		// extern void syslog (int, const char *, ...) __attribute__((not_tail_called)) __attribute__((format(printf, 2, 3)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void syslog (int, sbyte*, IntPtr varArgs);

		// extern void vsyslog (int, const char *, __darwin_va_list) __attribute__((not_tail_called)) __attribute__((format(printf, 2, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void vsyslog (int, sbyte*, sbyte*);

		// extern long ulimit (int, ...);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint ulimit (int, IntPtr varArgs);

		// extern int getattrlistbulk (int, void *, void *, size_t, uint64_t) __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getattrlistbulk (int, void*, void*, nuint, ulong);

		// extern int getattrlistat (int, const char *, void *, void *, size_t, unsigned long) __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getattrlistat (int, sbyte*, void*, void*, nuint, nuint);

		// extern int setattrlistat (int, const char *, void *, void *, size_t, uint32_t) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int setattrlistat (int, sbyte*, void*, void*, nuint, uint);

		// extern int faccessat (int, const char *, int, int) __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int faccessat (int, sbyte*, int, int);

		// extern int fchownat (int, const char *, uid_t, gid_t, int) __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fchownat (int, sbyte*, uint, uint, int);

		// extern int linkat (int, const char *, int, const char *, int) __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int linkat (int, sbyte*, int, sbyte*, int);

		// extern ssize_t readlinkat (int, const char *, char *, size_t) __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint readlinkat (int, sbyte*, sbyte*, nuint);

		// extern int symlinkat (const char *, int, const char *) __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int symlinkat (sbyte*, int, sbyte*);

		// extern int unlinkat (int, const char *, int) __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int unlinkat (int, sbyte*, int);

		// extern void _exit (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void _exit (int);

		// extern void _exit (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void _exit (int);

		// extern int access (const char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int access (sbyte*, int);

		// extern unsigned int alarm (unsigned int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint alarm (uint);

		// extern int chdir (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int chdir (sbyte*);

		// extern int chown (const char *, uid_t, gid_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int chown (sbyte*, uint, uint);

		// extern int close (int) asm("_close");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int close (int);

		// extern int dup (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int dup (int);

		// extern int dup2 (int, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int dup2 (int, int);

		// extern int execl (const char *__path, const char *__arg0, ...) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int execl (sbyte* __path, sbyte* __arg0, IntPtr varArgs);

		// extern int execle (const char *__path, const char *__arg0, ...) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int execle (sbyte* __path, sbyte* __arg0, IntPtr varArgs);

		// extern int execlp (const char *__file, const char *__arg0, ...) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int execlp (sbyte* __file, sbyte* __arg0, IntPtr varArgs);

		// extern int execv (const char *__path, char *const *__argv) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int execv (sbyte* __path, sbyte** __argv);

		// extern int execve (const char *__file, char *const *__argv, char *const *__envp) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int execve (sbyte* __file, sbyte** __argv, sbyte** __envp);

		// extern int execvp (const char *__file, char *const *__argv) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int execvp (sbyte* __file, sbyte** __argv);

		// extern pid_t fork () __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int fork ();

		// extern long fpathconf (int, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint fpathconf (int, int);

		// extern char * getcwd (char *, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* getcwd (sbyte*, nuint);

		// extern gid_t getegid ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint getegid ();

		// extern uid_t geteuid ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint geteuid ();

		// extern gid_t getgid ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint getgid ();

		// extern int getgroups (int, gid_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int getgroups (int, uint[]);

		// extern char * getlogin ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* getlogin ();

		// extern pid_t getpgrp ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int getpgrp ();

		// extern pid_t getpid ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int getpid ();

		// extern pid_t getppid ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int getppid ();

		// extern uid_t getuid ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint getuid ();

		// extern int isatty (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isatty (int);

		// extern int link (const char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int link (sbyte*, sbyte*);

		// extern off_t lseek (int, off_t, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern long lseek (int, long, int);

		// extern long pathconf (const char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint pathconf (sbyte*, int);

		// extern int pause () asm("_pause");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int pause ();

		// extern int pipe (int *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int pipe (int[]);

		// extern ssize_t read (int, void *, size_t) asm("_read");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint read (int, void*, nuint);

		// extern int rmdir (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int rmdir (sbyte*);

		// extern int setgid (gid_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int setgid (uint);

		// extern int setpgid (pid_t, pid_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int setpgid (int, int);

		// extern pid_t setsid ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int setsid ();

		// extern int setuid (uid_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int setuid (uint);

		// extern unsigned int sleep (unsigned int) asm("_sleep");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint sleep (uint);

		// extern long sysconf (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint sysconf (int);

		// extern pid_t tcgetpgrp (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int tcgetpgrp (int);

		// extern int tcsetpgrp (int, pid_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int tcsetpgrp (int, int);

		// extern char * ttyname (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* ttyname (int);

		// extern int ttyname_r (int, char *, size_t) asm("_ttyname_r");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int ttyname_r (int, sbyte*, nuint);

		// extern int unlink (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int unlink (sbyte*);

		// extern ssize_t write (int __fd, const void *__buf, size_t __nbyte) asm("_write");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint write (int __fd, void* __buf, nuint __nbyte);

		// extern size_t confstr (int, char *, size_t) asm("_confstr");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint confstr (int, sbyte*, nuint);

		// extern int getopt (int, char *const *, const char *) asm("_getopt");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getopt (int, sbyte*[], sbyte*);

		// extern void * brk (const void *) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((deprecated("")));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* brk (void*);

		// extern int chroot (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int chroot (sbyte*);

		// extern char * crypt (const char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* crypt (sbyte*, sbyte*);

		// extern void encrypt (char *, int) asm("_encrypt");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void encrypt (sbyte*, int);

		// extern int fchdir (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int fchdir (int);

		// extern long gethostid ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint gethostid ();

		// extern pid_t getpgid (pid_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int getpgid (int);

		// extern pid_t getsid (pid_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int getsid (int);

		// extern int getdtablesize ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int getdtablesize ();

		// extern int getpagesize () __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int getpagesize ();

		// extern char * getpass (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* getpass (sbyte*);

		// extern char * getwd (char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* getwd (sbyte*);

		// extern int lchown (const char *, uid_t, gid_t) asm("_lchown");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int lchown (sbyte*, uint, uint);

		// extern int lockf (int, int, off_t) asm("_lockf");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int lockf (int, int, long);

		// extern int nice (int) asm("_nice");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int nice (int);

		// extern ssize_t pread (int __fd, void *__buf, size_t __nbyte, off_t __offset) asm("_pread");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint pread (int __fd, void* __buf, nuint __nbyte, long __offset);

		// extern ssize_t pwrite (int __fd, const void *__buf, size_t __nbyte, off_t __offset) asm("_pwrite");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint pwrite (int __fd, void* __buf, nuint __nbyte, long __offset);

		// extern void * sbrk (int) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((deprecated("")));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* sbrk (int);

		// extern pid_t setpgrp () asm("_setpgrp");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int setpgrp ();

		// extern int setregid (gid_t, gid_t) asm("_setregid");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int setregid (uint, uint);

		// extern int setreuid (uid_t, uid_t) asm("_setreuid");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int setreuid (uint, uint);

		// extern void swab (const void *__restrict, void *__restrict, ssize_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void swab (void*, void*, nint);

		// extern void sync ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void sync ();

		// extern int truncate (const char *, off_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int truncate (sbyte*, long);

		// extern useconds_t ualarm (useconds_t, useconds_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint ualarm (uint, uint);

		// extern int usleep (useconds_t) asm("_usleep");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int usleep (uint);

		// extern int vfork () __attribute__((returns_twice));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int vfork ();

		// extern int vfork () __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((returns_twice));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int vfork ();

		// extern int fsync (int) asm("_fsync");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int fsync (int);

		// extern int ftruncate (int, off_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int ftruncate (int, long);

		// extern int getlogin_r (char *, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getlogin_r (sbyte*, nuint);

		// extern int fchown (int, uid_t, gid_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int fchown (int, uint, uint);

		// extern int gethostname (char *, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int gethostname (sbyte*, nuint);

		// extern ssize_t readlink (const char *__restrict, char *__restrict, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint readlink (sbyte*, sbyte*, nuint);

		// extern int setegid (gid_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int setegid (uint);

		// extern int seteuid (uid_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int seteuid (uint);

		// extern int symlink (const char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int symlink (sbyte*, sbyte*);

		// extern void _Exit (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void _Exit (int);

		// extern int accessx_np (const struct accessx_descriptor *, size_t, int *, uid_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int accessx_np (accessx_descriptor*, nuint, int*, uint);

		// extern int acct (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acct (sbyte*);

		// extern int add_profil (char *, size_t, unsigned long, unsigned int) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int add_profil (sbyte*, nuint, nuint, uint);

		// extern void endusershell ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void endusershell ();

		// extern int execvP (const char *__file, const char *__searchpath, char *const *__argv) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int execvP (sbyte* __file, sbyte* __searchpath, sbyte** __argv);

		// extern char * fflagstostr (unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* fflagstostr (nuint);

		// extern int getdomainname (char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getdomainname (sbyte*, int);

		// extern int getgrouplist (const char *, int, int *, int *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getgrouplist (sbyte*, int, int*, int*);

		// extern int gethostuuid (unsigned char *, const struct timespec *) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int gethostuuid (byte[], timespec*);

		// extern mode_t getmode (const void *, mode_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe ushort getmode (void*, ushort);

		// extern int getpeereid (int, uid_t *, gid_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getpeereid (int, uint*, uint*);

		// extern int getsgroups_np (int *, unsigned char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getsgroups_np (int*, byte[]);

		// extern char * getusershell ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* getusershell ();

		// extern int getwgroups_np (int *, unsigned char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getwgroups_np (int*, byte[]);

		// extern int initgroups (const char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int initgroups (sbyte*, int);

		// extern int issetugid ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int issetugid ();

		// extern char * mkdtemp (char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* mkdtemp (sbyte*);

		// extern int mknod (const char *, mode_t, dev_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mknod (sbyte*, ushort, int);

		// extern int mkpath_np (const char *path, mode_t omode) __attribute__((availability(ios, introduced=5.0)));
		[iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mkpath_np (sbyte* path, ushort omode);

		// extern int mkpathat_np (int dfd, const char *path, mode_t omode) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mkpathat_np (int dfd, sbyte* path, ushort omode);

		// extern int mkstemp (char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mkstemp (sbyte*);

		// extern int mkstemps (char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mkstemps (sbyte*, int);

		// extern char * mktemp (char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* mktemp (sbyte*);

		// extern int mkostemp (char *path, int oflags) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mkostemp (sbyte* path, int oflags);

		// extern int mkostemps (char *path, int slen, int oflags) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mkostemps (sbyte* path, int slen, int oflags);

		// extern int mkstemp_dprotected_np (char *path, int dpclass, int dpflags) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, unavailable)));
		[Watch (3,0), TV (10,0), NoMac, iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mkstemp_dprotected_np (sbyte* path, int dpclass, int dpflags);

		// extern char * mkdtempat_np (int dfd, char *path) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* mkdtempat_np (int dfd, sbyte* path);

		// extern int mkstempsat_np (int dfd, char *path, int slen) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mkstempsat_np (int dfd, sbyte* path, int slen);

		// extern int mkostempsat_np (int dfd, char *path, int slen, int oflags) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mkostempsat_np (int dfd, sbyte* path, int slen, int oflags);

		// extern int nfssvc (int, void *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int nfssvc (int, void*);

		// extern int profil (char *, size_t, unsigned long, unsigned int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int profil (sbyte*, nuint, nuint, uint);

		// extern int pthread_setugid_np (uid_t, gid_t) __attribute__((deprecated("Use of per-thread security contexts is error-prone and discouraged.")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int pthread_setugid_np (uint, uint);

		// extern int pthread_getugid_np (uid_t *, gid_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_getugid_np (uint*, uint*);

		// extern int reboot (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int reboot (int);

		// extern int revoke (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int revoke (sbyte*);

		// extern int rcmd (char **, int, const char *, const char *, const char *, int *) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int rcmd (sbyte**, int, sbyte*, sbyte*, sbyte*, int*);

		// extern int rcmd_af (char **, int, const char *, const char *, const char *, int *, int) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int rcmd_af (sbyte**, int, sbyte*, sbyte*, sbyte*, int*, int);

		// extern int rresvport (int *) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int rresvport (int*);

		// extern int rresvport_af (int *, int) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int rresvport_af (int*, int);

		// extern int iruserok (unsigned long, int, const char *, const char *) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int iruserok (nuint, int, sbyte*, sbyte*);

		// extern int iruserok_sa (const void *, int, int, const char *, const char *) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int iruserok_sa (void*, int, int, sbyte*, sbyte*);

		// extern int ruserok (const char *, int, const char *, const char *) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int ruserok (sbyte*, int, sbyte*, sbyte*);

		// extern int setdomainname (const char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int setdomainname (sbyte*, int);

		// extern int setgroups (int, const gid_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int setgroups (int, uint*);

		// extern void sethostid (long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void sethostid (nint);

		// extern int sethostname (const char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sethostname (sbyte*, int);

		// extern void setkey (const char *) asm("_setkey");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void setkey (sbyte*);

		// extern int setlogin (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int setlogin (sbyte*);

		// extern void * setmode (const char *) asm("_setmode");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* setmode (sbyte*);

		// extern int setrgid (gid_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int setrgid (uint);

		// extern int setruid (uid_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int setruid (uint);

		// extern int setsgroups_np (int, const unsigned char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int setsgroups_np (int, byte[]);

		// extern void setusershell ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void setusershell ();

		// extern int setwgroups_np (int, const unsigned char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int setwgroups_np (int, byte[]);

		// extern int strtofflags (char **, unsigned long *, unsigned long *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int strtofflags (sbyte**, nuint*, nuint*);

		// extern int swapon (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int swapon (sbyte*);

		// extern int ttyslot ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int ttyslot ();

		// extern int undelete (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int undelete (sbyte*);

		// extern int unwhiteout (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int unwhiteout (sbyte*);

		// extern void * valloc (size_t) __attribute__((alloc_size(1, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* valloc (nuint);

		// extern int syscall (int, ...) __attribute__((availability(macos, deprecated=10.12))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "syscall(2) is unsupported; please switch to a supported interface. For SYS_kdebug_trace use kdebug_signpost().")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "syscall(2) is unsupported; please switch to a supported interface. For SYS_kdebug_trace use kdebug_signpost().")]
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int syscall (int, IntPtr varArgs);

		// extern int getsubopt (char **, char *const *, char **);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getsubopt (sbyte**, sbyte**, sbyte**);

		// extern int fgetattrlist (int, void *, void *, size_t, unsigned int) __attribute__((availability(ios, introduced=3.0)));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fgetattrlist (int, void*, void*, nuint, uint);

		// extern int fsetattrlist (int, void *, void *, size_t, unsigned int) __attribute__((availability(ios, introduced=3.0)));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fsetattrlist (int, void*, void*, nuint, uint);

		// extern int getattrlist (const char *, void *, void *, size_t, unsigned int) asm("_getattrlist");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getattrlist (sbyte*, void*, void*, nuint, uint);

		// extern int setattrlist (const char *, void *, void *, size_t, unsigned int) asm("_setattrlist");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int setattrlist (sbyte*, void*, void*, nuint, uint);

		// extern int exchangedata (const char *, const char *, unsigned int) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int exchangedata (sbyte*, sbyte*, uint);

		// extern int getdirentriesattr (int, void *, void *, size_t, unsigned int *, unsigned int *, unsigned int *, unsigned int) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getdirentriesattr (int, void*, void*, nuint, uint*, uint*, uint*, uint);

		// extern int searchfs (const char *, struct fssearchblock *, unsigned long *, unsigned int, unsigned int, struct searchstate *) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int searchfs (sbyte*, fssearchblock*, nuint*, uint, uint, searchstate*);

		// extern int fsctl (const char *, unsigned long, void *, unsigned int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fsctl (sbyte*, nuint, void*, uint);

		// extern int ffsctl (int, unsigned long, void *, unsigned int) __attribute__((availability(ios, introduced=3.0)));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int ffsctl (int, nuint, void*, uint);

		// extern int fsync_volume_np (int, int) __attribute__((availability(ios, introduced=6.0)));
		[iOS (6,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int fsync_volume_np (int, int);

		// extern int sync_volume_np (const char *, int) __attribute__((availability(ios, introduced=6.0)));
		[iOS (6,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sync_volume_np (sbyte*, int);

		// extern int utime (const char *, const struct utimbuf *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int utime (sbyte*, utimbuf*);

		// extern void endutxent ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void endutxent ();

		// extern void endutxent_wtmp () __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void endutxent_wtmp ();

		// extern struct lastlogx * getlastlogx (uid_t, struct lastlogx *) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe lastlogx* getlastlogx (uint, lastlogx*);

		// extern struct lastlogx * getlastlogxbyname (const char *, struct lastlogx *) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe lastlogx* getlastlogxbyname (sbyte*, lastlogx*);

		// extern struct utmpx * getutxent ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe utmpx* getutxent ();

		// extern struct utmpx * getutxent_wtmp () __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe utmpx* getutxent_wtmp ();

		// extern struct utmpx * getutxid (const struct utmpx *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe utmpx* getutxid (utmpx*);

		// extern struct utmpx * getutxline (const struct utmpx *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe utmpx* getutxline (utmpx*);

		// extern struct utmpx * pututxline (const struct utmpx *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe utmpx* pututxline (utmpx*);

		// extern void setutxent ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void setutxent ();

		// extern void setutxent_wtmp (int) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void setutxent_wtmp (int);

		// extern int utmpxname (const char *) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int utmpxname (sbyte*);

		// extern int wtmpxname (const char *) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int wtmpxname (sbyte*);

		// extern int wordexp (const char *__restrict, wordexp_t *__restrict, int) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int wordexp (sbyte*, wordexp_t*, int);

		// extern void wordfree (wordexp_t *) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void wordfree (wordexp_t*);

		// extern int getopt_long (int, char *const *, const char *, const struct option *, int *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getopt_long (int, sbyte**, sbyte*, option*, int*);

		// extern int getopt_long_only (int, char *const *, const char *, const struct option *, int *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getopt_long_only (int, sbyte**, sbyte*, option*, int*);

		// extern int getopt (int, char *const *, const char *) asm("_getopt");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getopt (int, sbyte*[], sbyte*);

		// extern void Debugger () __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Debugger ();

		// extern void DebugStr (ConstStr255Param debuggerMsg) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void DebugStr (byte* debuggerMsg);

		// extern void SysBreak () __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void SysBreak ();

		// extern void SysBreakStr (ConstStr255Param debuggerMsg) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void SysBreakStr (byte* debuggerMsg);

		// extern void SysBreakFunc (ConstStr255Param debuggerMsg) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void SysBreakFunc (byte* debuggerMsg);

		// int32_t OSHostByteOrder ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int OSHostByteOrder ();

		// uint16_t _OSReadInt16 (const volatile void *base, uintptr_t byteOffset);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe ushort _OSReadInt16 (void* @base, UIntPtr byteOffset);

		// uint32_t _OSReadInt32 (const volatile void *base, uintptr_t byteOffset);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe uint _OSReadInt32 (void* @base, UIntPtr byteOffset);

		// uint64_t _OSReadInt64 (const volatile void *base, uintptr_t byteOffset);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe ulong _OSReadInt64 (void* @base, UIntPtr byteOffset);

		// void _OSWriteInt16 (volatile void *base, uintptr_t byteOffset, uint16_t data);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void _OSWriteInt16 (void* @base, UIntPtr byteOffset, ushort data);

		// void _OSWriteInt32 (volatile void *base, uintptr_t byteOffset, uint32_t data);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void _OSWriteInt32 (void* @base, UIntPtr byteOffset, uint data);

		// void _OSWriteInt64 (volatile void *base, uintptr_t byteOffset, uint64_t data);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void _OSWriteInt64 (void* @base, UIntPtr byteOffset, ulong data);

		// extern mach_port_t mig_get_reply_port ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint mig_get_reply_port ();

		// extern void mig_dealloc_reply_port (mach_port_t reply_port);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void mig_dealloc_reply_port (uint reply_port);

		// extern void mig_put_reply_port (mach_port_t reply_port);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void mig_put_reply_port (uint reply_port);

		// extern int mig_strncpy (char *dest, const char *src, int len);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mig_strncpy (sbyte* dest, sbyte* src, int len);

		// extern int mig_strncpy_zerofill (char *dest, const char *src, int len);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mig_strncpy_zerofill (sbyte* dest, sbyte* src, int len);

		// extern void mig_allocate (vm_address_t *, vm_size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void mig_allocate (UIntPtr*, UIntPtr);

		// extern void mig_deallocate (vm_address_t, vm_size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void mig_deallocate (UIntPtr, UIntPtr);

		// void __NDR_convert__mig_reply_error_t (mig_reply_error_t *x);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void __NDR_convert__mig_reply_error_t (mig_reply_error_t* x);

		// extern int mig_strncpy_zerofill (char *dest, const char *src, int len) __attribute__((weak_import));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mig_strncpy_zerofill (sbyte* dest, sbyte* src, int len);

		// extern kern_return_t clock_set_time (clock_ctrl_t clock_ctrl, mach_timespec_t new_time);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int clock_set_time (uint clock_ctrl, mach_timespec_t new_time);

		// extern kern_return_t clock_set_attributes (clock_ctrl_t clock_ctrl, clock_flavor_t flavor, clock_attr_t clock_attr, mach_msg_type_number_t clock_attrCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int clock_set_attributes (uint clock_ctrl, int flavor, int* clock_attr, uint clock_attrCnt);

		// extern kern_return_t host_get_boot_info (host_priv_t host_priv, char *boot_info);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int host_get_boot_info (uint host_priv, sbyte[] boot_info);

		// extern kern_return_t host_reboot (host_priv_t host_priv, int options);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int host_reboot (uint host_priv, int options);

		// extern kern_return_t host_priv_statistics (host_priv_t host_priv, host_flavor_t flavor, host_info_t host_info_out, mach_msg_type_number_t *host_info_outCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int host_priv_statistics (uint host_priv, int flavor, int* host_info_out, uint* host_info_outCnt);

		// extern kern_return_t host_default_memory_manager (host_priv_t host_priv, memory_object_default_t *default_manager, memory_object_cluster_size_t cluster_size);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int host_default_memory_manager (uint host_priv, uint* default_manager, uint cluster_size);

		// extern kern_return_t vm_wire (host_priv_t host_priv, vm_map_t task, vm_address_t address, vm_size_t size, vm_prot_t desired_access);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int vm_wire (uint host_priv, uint task, UIntPtr address, UIntPtr size, int desired_access);

		// extern kern_return_t thread_wire (host_priv_t host_priv, thread_act_t thread, boolean_t wired);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int thread_wire (uint host_priv, uint thread, int wired);

		// extern kern_return_t vm_allocate_cpm (host_priv_t host_priv, vm_map_t task, vm_address_t *address, vm_size_t size, int flags);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vm_allocate_cpm (uint host_priv, uint task, UIntPtr* address, UIntPtr size, int flags);

		// extern kern_return_t host_processors (host_priv_t host_priv, processor_array_t *out_processor_list, mach_msg_type_number_t *out_processor_listCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int host_processors (uint host_priv, uint** out_processor_list, uint* out_processor_listCnt);

		// extern kern_return_t host_get_clock_control (host_priv_t host_priv, clock_id_t clock_id, clock_ctrl_t *clock_ctrl);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int host_get_clock_control (uint host_priv, int clock_id, uint* clock_ctrl);

		// extern kern_return_t kmod_create (host_priv_t host_priv, vm_address_t info, kmod_t *module);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int kmod_create (uint host_priv, UIntPtr info, int* module);

		// extern kern_return_t kmod_destroy (host_priv_t host_priv, kmod_t module);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int kmod_destroy (uint host_priv, int module);

		// extern kern_return_t kmod_control (host_priv_t host_priv, kmod_t module, kmod_control_flavor_t flavor, kmod_args_t *data, mach_msg_type_number_t *dataCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int kmod_control (uint host_priv, int module, int flavor, void** data, uint* dataCnt);

		// extern kern_return_t host_get_special_port (host_priv_t host_priv, int node, int which, mach_port_t *port);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int host_get_special_port (uint host_priv, int node, int which, uint* port);

		// extern kern_return_t host_set_special_port (host_priv_t host_priv, int which, mach_port_t port);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int host_set_special_port (uint host_priv, int which, uint port);

		// extern kern_return_t host_set_exception_ports (host_priv_t host_priv, exception_mask_t exception_mask, mach_port_t new_port, exception_behavior_t behavior, thread_state_flavor_t new_flavor);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int host_set_exception_ports (uint host_priv, uint exception_mask, uint new_port, int behavior, int new_flavor);

		// extern kern_return_t host_get_exception_ports (host_priv_t host_priv, exception_mask_t exception_mask, exception_mask_array_t masks, mach_msg_type_number_t *masksCnt, exception_handler_array_t old_handlers, exception_behavior_array_t old_behaviors, exception_flavor_array_t old_flavors);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int host_get_exception_ports (uint host_priv, uint exception_mask, uint* masks, uint* masksCnt, uint* old_handlers, int* old_behaviors, int* old_flavors);

		// extern kern_return_t host_swap_exception_ports (host_priv_t host_priv, exception_mask_t exception_mask, mach_port_t new_port, exception_behavior_t behavior, thread_state_flavor_t new_flavor, exception_mask_array_t masks, mach_msg_type_number_t *masksCnt, exception_handler_array_t old_handlerss, exception_behavior_array_t old_behaviors, exception_flavor_array_t old_flavors);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int host_swap_exception_ports (uint host_priv, uint exception_mask, uint new_port, int behavior, int new_flavor, uint* masks, uint* masksCnt, uint* old_handlerss, int* old_behaviors, int* old_flavors);

		// extern kern_return_t mach_vm_wire (host_priv_t host_priv, vm_map_t task, mach_vm_address_t address, mach_vm_size_t size, vm_prot_t desired_access);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int mach_vm_wire (uint host_priv, uint task, ulong address, ulong size, int desired_access);

		// extern kern_return_t host_processor_sets (host_priv_t host_priv, processor_set_name_array_t *processor_sets, mach_msg_type_number_t *processor_setsCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int host_processor_sets (uint host_priv, uint** processor_sets, uint* processor_setsCnt);

		// extern kern_return_t host_processor_set_priv (host_priv_t host_priv, processor_set_name_t set_name, processor_set_t *set);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int host_processor_set_priv (uint host_priv, uint set_name, uint* set);

		// extern kern_return_t host_set_UNDServer (host_priv_t host, UNDServerRef server);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int host_set_UNDServer (uint host, uint server);

		// extern kern_return_t host_get_UNDServer (host_priv_t host, UNDServerRef *server);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int host_get_UNDServer (uint host, uint* server);

		// extern kern_return_t kext_request (host_priv_t host_priv, uint32_t user_log_flags, vm_offset_t request_data, mach_msg_type_number_t request_dataCnt, vm_offset_t *response_data, mach_msg_type_number_t *response_dataCnt, vm_offset_t *log_data, mach_msg_type_number_t *log_dataCnt, kern_return_t *op_result);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int kext_request (uint host_priv, uint user_log_flags, UIntPtr request_data, uint request_dataCnt, UIntPtr* response_data, uint* response_dataCnt, UIntPtr* log_data, uint* log_dataCnt, int* op_result);

		// extern kern_return_t host_security_create_task_token (host_security_t host_security, task_t parent_task, security_token_t sec_token, audit_token_t audit_token, host_t host, ledger_array_t ledgers, mach_msg_type_number_t ledgersCnt, boolean_t inherit_memory, task_t *child_task);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int host_security_create_task_token (uint host_security, uint parent_task, security_token_t sec_token, audit_token_t audit_token, uint host, uint* ledgers, uint ledgersCnt, int inherit_memory, uint* child_task);

		// extern kern_return_t host_security_set_task_token (host_security_t host_security, task_t target_task, security_token_t sec_token, audit_token_t audit_token, host_t host);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int host_security_set_task_token (uint host_security, uint target_task, security_token_t sec_token, audit_token_t audit_token, uint host);

		// extern kern_return_t lock_acquire (lock_set_t lock_set, int lock_id);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int lock_acquire (uint lock_set, int lock_id);

		// extern kern_return_t lock_release (lock_set_t lock_set, int lock_id);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int lock_release (uint lock_set, int lock_id);

		// extern kern_return_t lock_try (lock_set_t lock_set, int lock_id);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int lock_try (uint lock_set, int lock_id);

		// extern kern_return_t lock_make_stable (lock_set_t lock_set, int lock_id);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int lock_make_stable (uint lock_set, int lock_id);

		// extern kern_return_t lock_handoff (lock_set_t lock_set, int lock_id);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int lock_handoff (uint lock_set, int lock_id);

		// extern kern_return_t lock_handoff_accept (lock_set_t lock_set, int lock_id);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int lock_handoff_accept (uint lock_set, int lock_id);

		// extern kern_return_t processor_start (processor_t processor);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int processor_start (uint processor);

		// extern kern_return_t processor_exit (processor_t processor);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int processor_exit (uint processor);

		// extern kern_return_t processor_info (processor_t processor, processor_flavor_t flavor, host_t *host, processor_info_t processor_info_out, mach_msg_type_number_t *processor_info_outCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int processor_info (uint processor, int flavor, uint* host, int* processor_info_out, uint* processor_info_outCnt);

		// extern kern_return_t processor_control (processor_t processor, processor_info_t processor_cmd, mach_msg_type_number_t processor_cmdCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int processor_control (uint processor, int* processor_cmd, uint processor_cmdCnt);

		// extern kern_return_t processor_assign (processor_t processor, processor_set_t new_set, boolean_t wait);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int processor_assign (uint processor, uint new_set, int wait);

		// extern kern_return_t processor_get_assignment (processor_t processor, processor_set_name_t *assigned_set);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int processor_get_assignment (uint processor, uint* assigned_set);

		// extern kern_return_t processor_set_statistics (processor_set_name_t pset, processor_set_flavor_t flavor, processor_set_info_t info_out, mach_msg_type_number_t *info_outCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int processor_set_statistics (uint pset, int flavor, int* info_out, uint* info_outCnt);

		// extern kern_return_t processor_set_destroy (processor_set_t set);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int processor_set_destroy (uint set);

		// extern kern_return_t processor_set_max_priority (processor_set_t processor_set, int max_priority, boolean_t change_threads);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int processor_set_max_priority (uint processor_set, int max_priority, int change_threads);

		// extern kern_return_t processor_set_policy_enable (processor_set_t processor_set, int policy);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int processor_set_policy_enable (uint processor_set, int policy);

		// extern kern_return_t processor_set_policy_disable (processor_set_t processor_set, int policy, boolean_t change_threads);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int processor_set_policy_disable (uint processor_set, int policy, int change_threads);

		// extern kern_return_t processor_set_tasks (processor_set_t processor_set, task_array_t *task_list, mach_msg_type_number_t *task_listCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int processor_set_tasks (uint processor_set, uint** task_list, uint* task_listCnt);

		// extern kern_return_t processor_set_threads (processor_set_t processor_set, thread_act_array_t *thread_list, mach_msg_type_number_t *thread_listCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int processor_set_threads (uint processor_set, uint** thread_list, uint* thread_listCnt);

		// extern kern_return_t processor_set_policy_control (processor_set_t pset, processor_set_flavor_t flavor, processor_set_info_t policy_info, mach_msg_type_number_t policy_infoCnt, boolean_t change);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int processor_set_policy_control (uint pset, int flavor, int* policy_info, uint policy_infoCnt, int change);

		// extern kern_return_t processor_set_stack_usage (processor_set_t pset, unsigned int *ltotal, vm_size_t *space, vm_size_t *resident, vm_size_t *maxusage, vm_offset_t *maxstack);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int processor_set_stack_usage (uint pset, uint* ltotal, UIntPtr* space, UIntPtr* resident, UIntPtr* maxusage, UIntPtr* maxstack);

		// extern kern_return_t processor_set_info (processor_set_name_t set_name, int flavor, host_t *host, processor_set_info_t info_out, mach_msg_type_number_t *info_outCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int processor_set_info (uint set_name, int flavor, uint* host, int* info_out, uint* info_outCnt);

		// extern kern_return_t semaphore_signal (semaphore_t semaphore);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int semaphore_signal (uint semaphore);

		// extern kern_return_t semaphore_signal_all (semaphore_t semaphore);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int semaphore_signal_all (uint semaphore);

		// extern kern_return_t semaphore_wait (semaphore_t semaphore);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int semaphore_wait (uint semaphore);

		// extern kern_return_t semaphore_timedwait (semaphore_t semaphore, mach_timespec_t wait_time);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int semaphore_timedwait (uint semaphore, mach_timespec_t wait_time);

		// extern kern_return_t semaphore_timedwait_signal (semaphore_t wait_semaphore, semaphore_t signal_semaphore, mach_timespec_t wait_time);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int semaphore_timedwait_signal (uint wait_semaphore, uint signal_semaphore, mach_timespec_t wait_time);

		// extern kern_return_t semaphore_wait_signal (semaphore_t wait_semaphore, semaphore_t signal_semaphore);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int semaphore_wait_signal (uint wait_semaphore, uint signal_semaphore);

		// extern kern_return_t semaphore_signal_thread (semaphore_t semaphore, thread_t thread);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int semaphore_signal_thread (uint semaphore, uint thread);

		// extern kern_return_t task_create (task_t target_task, ledger_array_t ledgers, mach_msg_type_number_t ledgersCnt, boolean_t inherit_memory, task_t *child_task);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int task_create (uint target_task, uint* ledgers, uint ledgersCnt, int inherit_memory, uint* child_task);

		// extern kern_return_t task_terminate (task_t target_task);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int task_terminate (uint target_task);

		// extern kern_return_t task_threads (task_inspect_t target_task, thread_act_array_t *act_list, mach_msg_type_number_t *act_listCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int task_threads (uint target_task, uint** act_list, uint* act_listCnt);

		// extern kern_return_t mach_ports_register (task_t target_task, mach_port_array_t init_port_set, mach_msg_type_number_t init_port_setCnt) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_ports_register (uint target_task, uint* init_port_set, uint init_port_setCnt);

		// extern kern_return_t mach_ports_lookup (task_t target_task, mach_port_array_t *init_port_set, mach_msg_type_number_t *init_port_setCnt) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_ports_lookup (uint target_task, uint** init_port_set, uint* init_port_setCnt);

		// extern kern_return_t task_info (task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int task_info (uint target_task, uint flavor, int* task_info_out, uint* task_info_outCnt);

		// extern kern_return_t task_set_info (task_t target_task, task_flavor_t flavor, task_info_t task_info_in, mach_msg_type_number_t task_info_inCnt) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int task_set_info (uint target_task, uint flavor, int* task_info_in, uint task_info_inCnt);

		// extern kern_return_t task_suspend (task_t target_task) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int task_suspend (uint target_task);

		// extern kern_return_t task_resume (task_t target_task) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int task_resume (uint target_task);

		// extern kern_return_t task_get_special_port (task_inspect_t task, int which_port, mach_port_t *special_port) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int task_get_special_port (uint task, int which_port, uint* special_port);

		// extern kern_return_t task_set_special_port (task_t task, int which_port, mach_port_t special_port) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int task_set_special_port (uint task, int which_port, uint special_port);

		// extern kern_return_t thread_create (task_t parent_task, thread_act_t *child_act) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int thread_create (uint parent_task, uint* child_act);

		// extern kern_return_t thread_create_running (task_t parent_task, thread_state_flavor_t flavor, thread_state_t new_state, mach_msg_type_number_t new_stateCnt, thread_act_t *child_act) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int thread_create_running (uint parent_task, int flavor, uint* new_state, uint new_stateCnt, uint* child_act);

		// extern kern_return_t task_set_exception_ports (task_t task, exception_mask_t exception_mask, mach_port_t new_port, exception_behavior_t behavior, thread_state_flavor_t new_flavor) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int task_set_exception_ports (uint task, uint exception_mask, uint new_port, int behavior, int new_flavor);

		// extern kern_return_t task_get_exception_ports (task_inspect_t task, exception_mask_t exception_mask, exception_mask_array_t masks, mach_msg_type_number_t *masksCnt, exception_handler_array_t old_handlers, exception_behavior_array_t old_behaviors, exception_flavor_array_t old_flavors) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int task_get_exception_ports (uint task, uint exception_mask, uint* masks, uint* masksCnt, uint* old_handlers, int* old_behaviors, int* old_flavors);

		// extern kern_return_t task_swap_exception_ports (task_t task, exception_mask_t exception_mask, mach_port_t new_port, exception_behavior_t behavior, thread_state_flavor_t new_flavor, exception_mask_array_t masks, mach_msg_type_number_t *masksCnt, exception_handler_array_t old_handlerss, exception_behavior_array_t old_behaviors, exception_flavor_array_t old_flavors) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int task_swap_exception_ports (uint task, uint exception_mask, uint new_port, int behavior, int new_flavor, uint* masks, uint* masksCnt, uint* old_handlerss, int* old_behaviors, int* old_flavors);

		// extern kern_return_t lock_set_create (task_t task, lock_set_t *new_lock_set, int n_ulocks, int policy);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int lock_set_create (uint task, uint* new_lock_set, int n_ulocks, int policy);

		// extern kern_return_t lock_set_destroy (task_t task, lock_set_t lock_set);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int lock_set_destroy (uint task, uint lock_set);

		// extern kern_return_t semaphore_create (task_t task, semaphore_t *semaphore, int policy, int value);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int semaphore_create (uint task, uint* semaphore, int policy, int value);

		// extern kern_return_t semaphore_destroy (task_t task, semaphore_t semaphore);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int semaphore_destroy (uint task, uint semaphore);

		// extern kern_return_t task_policy_set (task_t task, task_policy_flavor_t flavor, task_policy_t policy_info, mach_msg_type_number_t policy_infoCnt) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int task_policy_set (uint task, uint flavor, int* policy_info, uint policy_infoCnt);

		// extern kern_return_t task_policy_get (task_t task, task_policy_flavor_t flavor, task_policy_t policy_info, mach_msg_type_number_t *policy_infoCnt, boolean_t *get_default) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int task_policy_get (uint task, uint flavor, int* policy_info, uint* policy_infoCnt, int* get_default);

		// extern kern_return_t task_sample (task_t task, mach_port_t reply);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int task_sample (uint task, uint reply);

		// extern kern_return_t task_policy (task_t task, policy_t policy, policy_base_t base, mach_msg_type_number_t baseCnt, boolean_t set_limit, boolean_t change);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int task_policy (uint task, int policy, int* @base, uint baseCnt, int set_limit, int change);

		// extern kern_return_t task_set_emulation (task_t target_port, vm_address_t routine_entry_pt, int routine_number);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int task_set_emulation (uint target_port, UIntPtr routine_entry_pt, int routine_number);

		// extern kern_return_t task_get_emulation_vector (task_t task, int *vector_start, emulation_vector_t *emulation_vector, mach_msg_type_number_t *emulation_vectorCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int task_get_emulation_vector (uint task, int* vector_start, ulong** emulation_vector, uint* emulation_vectorCnt);

		// extern kern_return_t task_set_emulation_vector (task_t task, int vector_start, emulation_vector_t emulation_vector, mach_msg_type_number_t emulation_vectorCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int task_set_emulation_vector (uint task, int vector_start, ulong* emulation_vector, uint emulation_vectorCnt);

		// extern kern_return_t task_set_ras_pc (task_t target_task, vm_address_t basepc, vm_address_t boundspc);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int task_set_ras_pc (uint target_task, UIntPtr basepc, UIntPtr boundspc);

		// extern kern_return_t task_zone_info (task_t target_task, mach_zone_name_array_t *names, mach_msg_type_number_t *namesCnt, task_zone_info_array_t *info, mach_msg_type_number_t *infoCnt) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int task_zone_info (uint target_task, mach_zone_name_array_t** names, uint* namesCnt, task_zone_info_array_t** info, uint* infoCnt);

		// extern kern_return_t task_assign (task_t task, processor_set_t new_set, boolean_t assign_threads);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int task_assign (uint task, uint new_set, int assign_threads);

		// extern kern_return_t task_assign_default (task_t task, boolean_t assign_threads);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int task_assign_default (uint task, int assign_threads);

		// extern kern_return_t task_get_assignment (task_t task, processor_set_name_t *assigned_set);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int task_get_assignment (uint task, uint* assigned_set);

		// extern kern_return_t task_set_policy (task_t task, processor_set_t pset, policy_t policy, policy_base_t base, mach_msg_type_number_t baseCnt, policy_limit_t limit, mach_msg_type_number_t limitCnt, boolean_t change);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int task_set_policy (uint task, uint pset, int policy, int* @base, uint baseCnt, int* limit, uint limitCnt, int change);

		// extern kern_return_t task_get_state (task_t task, thread_state_flavor_t flavor, thread_state_t old_state, mach_msg_type_number_t *old_stateCnt) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int task_get_state (uint task, int flavor, uint* old_state, uint* old_stateCnt);

		// extern kern_return_t task_set_state (task_t task, thread_state_flavor_t flavor, thread_state_t new_state, mach_msg_type_number_t new_stateCnt) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int task_set_state (uint task, int flavor, uint* new_state, uint new_stateCnt);

		// extern kern_return_t task_set_phys_footprint_limit (task_t task, int new_limit, int *old_limit) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int task_set_phys_footprint_limit (uint task, int new_limit, int* old_limit);

		// extern kern_return_t task_suspend2 (task_t target_task, task_suspension_token_t *suspend_token) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int task_suspend2 (uint target_task, uint* suspend_token);

		// extern kern_return_t task_resume2 (task_suspension_token_t suspend_token) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int task_resume2 (uint suspend_token);

		// extern kern_return_t task_purgable_info (task_t task, task_purgable_info_t *stats);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int task_purgable_info (uint task, task_purgable_info_t* stats);

		// extern kern_return_t task_get_mach_voucher (task_t task, mach_voucher_selector_t which, ipc_voucher_t *voucher) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int task_get_mach_voucher (uint task, uint which, uint* voucher);

		// extern kern_return_t task_set_mach_voucher (task_t task, ipc_voucher_t voucher) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int task_set_mach_voucher (uint task, uint voucher);

		// extern kern_return_t task_swap_mach_voucher (task_t task, ipc_voucher_t new_voucher, ipc_voucher_t *old_voucher) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int task_swap_mach_voucher (uint task, uint new_voucher, uint* old_voucher);

		// extern kern_return_t task_generate_corpse (task_t task, mach_port_t *corpse_task_port);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int task_generate_corpse (uint task, uint* corpse_task_port);

		// extern kern_return_t task_map_corpse_info (task_t task, task_t corspe_task, vm_address_t *kcd_addr_begin, uint32_t *kcd_size);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int task_map_corpse_info (uint task, uint corspe_task, UIntPtr* kcd_addr_begin, uint* kcd_size);

		// extern kern_return_t task_register_dyld_image_infos (task_t task, dyld_kernel_image_info_array_t dyld_images, mach_msg_type_number_t dyld_imagesCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int task_register_dyld_image_infos (uint task, dyld_kernel_image_info_array_t* dyld_images, uint dyld_imagesCnt);

		// extern kern_return_t task_unregister_dyld_image_infos (task_t task, dyld_kernel_image_info_array_t dyld_images, mach_msg_type_number_t dyld_imagesCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int task_unregister_dyld_image_infos (uint task, dyld_kernel_image_info_array_t* dyld_images, uint dyld_imagesCnt);

		// extern kern_return_t task_get_dyld_image_infos (task_inspect_t task, dyld_kernel_image_info_array_t *dyld_images, mach_msg_type_number_t *dyld_imagesCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int task_get_dyld_image_infos (uint task, dyld_kernel_image_info_array_t** dyld_images, uint* dyld_imagesCnt);

		// extern kern_return_t task_register_dyld_shared_cache_image_info (task_t task, dyld_kernel_image_info_t dyld_cache_image, boolean_t no_cache, boolean_t private_cache);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int task_register_dyld_shared_cache_image_info (uint task, dyld_kernel_image_info_t dyld_cache_image, int no_cache, int private_cache);

		// extern kern_return_t task_register_dyld_set_dyld_state (task_t task, uint8_t dyld_state);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int task_register_dyld_set_dyld_state (uint task, byte dyld_state);

		// extern kern_return_t task_register_dyld_get_process_state (task_t task, dyld_kernel_process_info_t *dyld_process_state);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int task_register_dyld_get_process_state (uint task, dyld_kernel_process_info_t* dyld_process_state);

		// extern kern_return_t task_map_corpse_info_64 (task_t task, task_t corspe_task, mach_vm_address_t *kcd_addr_begin, mach_vm_size_t *kcd_size);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int task_map_corpse_info_64 (uint task, uint corspe_task, ulong* kcd_addr_begin, ulong* kcd_size);

		// extern kern_return_t task_inspect (task_inspect_t task, task_inspect_flavor_t flavor, task_inspect_info_t info_out, mach_msg_type_number_t *info_outCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int task_inspect (uint task, uint flavor, int* info_out, uint* info_outCnt);

		// extern kern_return_t thread_terminate (thread_act_t target_act) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int thread_terminate (uint target_act);

		// extern kern_return_t act_get_state (thread_act_t target_act, int flavor, thread_state_t old_state, mach_msg_type_number_t *old_stateCnt) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int act_get_state (uint target_act, int flavor, uint* old_state, uint* old_stateCnt);

		// extern kern_return_t act_set_state (thread_act_t target_act, int flavor, thread_state_t new_state, mach_msg_type_number_t new_stateCnt) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int act_set_state (uint target_act, int flavor, uint* new_state, uint new_stateCnt);

		// extern kern_return_t thread_get_state (thread_act_t target_act, thread_state_flavor_t flavor, thread_state_t old_state, mach_msg_type_number_t *old_stateCnt) __attribute__((availability(watchos, unavailable)));
		[NoWatch]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int thread_get_state (uint target_act, int flavor, uint* old_state, uint* old_stateCnt);

		// extern kern_return_t thread_set_state (thread_act_t target_act, thread_state_flavor_t flavor, thread_state_t new_state, mach_msg_type_number_t new_stateCnt) __attribute__((availability(watchos, unavailable)));
		[NoWatch]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int thread_set_state (uint target_act, int flavor, uint* new_state, uint new_stateCnt);

		// extern kern_return_t thread_suspend (thread_act_t target_act) __attribute__((availability(watchos, unavailable)));
		[NoWatch]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int thread_suspend (uint target_act);

		// extern kern_return_t thread_resume (thread_act_t target_act) __attribute__((availability(watchos, unavailable)));
		[NoWatch]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int thread_resume (uint target_act);

		// extern kern_return_t thread_abort (thread_act_t target_act) __attribute__((availability(watchos, unavailable)));
		[NoWatch]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int thread_abort (uint target_act);

		// extern kern_return_t thread_abort_safely (thread_act_t target_act) __attribute__((availability(watchos, unavailable)));
		[NoWatch]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int thread_abort_safely (uint target_act);

		// extern kern_return_t thread_depress_abort (thread_act_t thread) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int thread_depress_abort (uint thread);

		// extern kern_return_t thread_get_special_port (thread_act_t thr_act, int which_port, mach_port_t *special_port) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int thread_get_special_port (uint thr_act, int which_port, uint* special_port);

		// extern kern_return_t thread_set_special_port (thread_act_t thr_act, int which_port, mach_port_t special_port) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int thread_set_special_port (uint thr_act, int which_port, uint special_port);

		// extern kern_return_t thread_info (thread_inspect_t target_act, thread_flavor_t flavor, thread_info_t thread_info_out, mach_msg_type_number_t *thread_info_outCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int thread_info (uint target_act, uint flavor, int* thread_info_out, uint* thread_info_outCnt);

		// extern kern_return_t thread_set_exception_ports (thread_act_t thread, exception_mask_t exception_mask, mach_port_t new_port, exception_behavior_t behavior, thread_state_flavor_t new_flavor) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int thread_set_exception_ports (uint thread, uint exception_mask, uint new_port, int behavior, int new_flavor);

		// extern kern_return_t thread_get_exception_ports (thread_inspect_t thread, exception_mask_t exception_mask, exception_mask_array_t masks, mach_msg_type_number_t *masksCnt, exception_handler_array_t old_handlers, exception_behavior_array_t old_behaviors, exception_flavor_array_t old_flavors) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int thread_get_exception_ports (uint thread, uint exception_mask, uint* masks, uint* masksCnt, uint* old_handlers, int* old_behaviors, int* old_flavors);

		// extern kern_return_t thread_swap_exception_ports (thread_act_t thread, exception_mask_t exception_mask, mach_port_t new_port, exception_behavior_t behavior, thread_state_flavor_t new_flavor, exception_mask_array_t masks, mach_msg_type_number_t *masksCnt, exception_handler_array_t old_handlers, exception_behavior_array_t old_behaviors, exception_flavor_array_t old_flavors) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int thread_swap_exception_ports (uint thread, uint exception_mask, uint new_port, int behavior, int new_flavor, uint* masks, uint* masksCnt, uint* old_handlers, int* old_behaviors, int* old_flavors);

		// extern kern_return_t thread_policy (thread_act_t thr_act, policy_t policy, policy_base_t base, mach_msg_type_number_t baseCnt, boolean_t set_limit);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int thread_policy (uint thr_act, int policy, int* @base, uint baseCnt, int set_limit);

		// extern kern_return_t thread_policy_set (thread_act_t thread, thread_policy_flavor_t flavor, thread_policy_t policy_info, mach_msg_type_number_t policy_infoCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int thread_policy_set (uint thread, uint flavor, int* policy_info, uint policy_infoCnt);

		// extern kern_return_t thread_policy_get (thread_inspect_t thread, thread_policy_flavor_t flavor, thread_policy_t policy_info, mach_msg_type_number_t *policy_infoCnt, boolean_t *get_default);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int thread_policy_get (uint thread, uint flavor, int* policy_info, uint* policy_infoCnt, int* get_default);

		// extern kern_return_t thread_sample (thread_act_t thread, mach_port_t reply);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int thread_sample (uint thread, uint reply);

		// extern kern_return_t etap_trace_thread (thread_act_t target_act, boolean_t trace_status);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int etap_trace_thread (uint target_act, int trace_status);

		// extern kern_return_t thread_assign (thread_act_t thread, processor_set_t new_set);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int thread_assign (uint thread, uint new_set);

		// extern kern_return_t thread_assign_default (thread_act_t thread);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int thread_assign_default (uint thread);

		// extern kern_return_t thread_get_assignment (thread_act_t thread, processor_set_name_t *assigned_set);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int thread_get_assignment (uint thread, uint* assigned_set);

		// extern kern_return_t thread_set_policy (thread_act_t thr_act, processor_set_t pset, policy_t policy, policy_base_t base, mach_msg_type_number_t baseCnt, policy_limit_t limit, mach_msg_type_number_t limitCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int thread_set_policy (uint thr_act, uint pset, int policy, int* @base, uint baseCnt, int* limit, uint limitCnt);

		// extern kern_return_t thread_get_mach_voucher (thread_act_t thr_act, mach_voucher_selector_t which, ipc_voucher_t *voucher) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int thread_get_mach_voucher (uint thr_act, uint which, uint* voucher);

		// extern kern_return_t thread_set_mach_voucher (thread_act_t thr_act, ipc_voucher_t voucher) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int thread_set_mach_voucher (uint thr_act, uint voucher);

		// extern kern_return_t thread_swap_mach_voucher (thread_act_t thr_act, ipc_voucher_t new_voucher, ipc_voucher_t *old_voucher) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int thread_swap_mach_voucher (uint thr_act, uint new_voucher, uint* old_voucher);

		// extern kern_return_t vm_region (vm_map_t target_task, vm_address_t *address, vm_size_t *size, vm_region_flavor_t flavor, vm_region_info_t info, mach_msg_type_number_t *infoCnt, mach_port_t *object_name);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vm_region (uint target_task, UIntPtr* address, UIntPtr* size, int flavor, int* info, uint* infoCnt, uint* object_name);

		// extern kern_return_t vm_allocate (vm_map_t target_task, vm_address_t *address, vm_size_t size, int flags);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vm_allocate (uint target_task, UIntPtr* address, UIntPtr size, int flags);

		// extern kern_return_t vm_deallocate (vm_map_t target_task, vm_address_t address, vm_size_t size);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int vm_deallocate (uint target_task, UIntPtr address, UIntPtr size);

		// extern kern_return_t vm_protect (vm_map_t target_task, vm_address_t address, vm_size_t size, boolean_t set_maximum, vm_prot_t new_protection);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int vm_protect (uint target_task, UIntPtr address, UIntPtr size, int set_maximum, int new_protection);

		// extern kern_return_t vm_inherit (vm_map_t target_task, vm_address_t address, vm_size_t size, vm_inherit_t new_inheritance);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int vm_inherit (uint target_task, UIntPtr address, UIntPtr size, uint new_inheritance);

		// extern kern_return_t vm_read (vm_map_t target_task, vm_address_t address, vm_size_t size, vm_offset_t *data, mach_msg_type_number_t *dataCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vm_read (uint target_task, UIntPtr address, UIntPtr size, UIntPtr* data, uint* dataCnt);

		// extern kern_return_t vm_read_list (vm_map_t target_task, struct vm_read_entry *data_list, natural_t count);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int vm_read_list (uint target_task, vm_read_entry_t[] data_list, uint count);

		// extern kern_return_t vm_write (vm_map_t target_task, vm_address_t address, vm_offset_t data, mach_msg_type_number_t dataCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int vm_write (uint target_task, UIntPtr address, UIntPtr data, uint dataCnt);

		// extern kern_return_t vm_copy (vm_map_t target_task, vm_address_t source_address, vm_size_t size, vm_address_t dest_address);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int vm_copy (uint target_task, UIntPtr source_address, UIntPtr size, UIntPtr dest_address);

		// extern kern_return_t vm_read_overwrite (vm_map_t target_task, vm_address_t address, vm_size_t size, vm_address_t data, vm_size_t *outsize);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vm_read_overwrite (uint target_task, UIntPtr address, UIntPtr size, UIntPtr data, UIntPtr* outsize);

		// extern kern_return_t vm_msync (vm_map_t target_task, vm_address_t address, vm_size_t size, vm_sync_t sync_flags);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int vm_msync (uint target_task, UIntPtr address, UIntPtr size, uint sync_flags);

		// extern kern_return_t vm_behavior_set (vm_map_t target_task, vm_address_t address, vm_size_t size, vm_behavior_t new_behavior);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int vm_behavior_set (uint target_task, UIntPtr address, UIntPtr size, int new_behavior);

		// extern kern_return_t vm_map (vm_map_t target_task, vm_address_t *address, vm_size_t size, vm_address_t mask, int flags, mem_entry_name_port_t object, vm_offset_t offset, boolean_t copy, vm_prot_t cur_protection, vm_prot_t max_protection, vm_inherit_t inheritance);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vm_map (uint target_task, UIntPtr* address, UIntPtr size, UIntPtr mask, int flags, uint @object, UIntPtr offset, int copy, int cur_protection, int max_protection, uint inheritance);

		// extern kern_return_t vm_machine_attribute (vm_map_t target_task, vm_address_t address, vm_size_t size, vm_machine_attribute_t attribute, vm_machine_attribute_val_t *value);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vm_machine_attribute (uint target_task, UIntPtr address, UIntPtr size, uint attribute, int* value);

		// extern kern_return_t vm_remap (vm_map_t target_task, vm_address_t *target_address, vm_size_t size, vm_address_t mask, int flags, vm_map_t src_task, vm_address_t src_address, boolean_t copy, vm_prot_t *cur_protection, vm_prot_t *max_protection, vm_inherit_t inheritance);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vm_remap (uint target_task, UIntPtr* target_address, UIntPtr size, UIntPtr mask, int flags, uint src_task, UIntPtr src_address, int copy, int* cur_protection, int* max_protection, uint inheritance);

		// extern kern_return_t task_wire (vm_map_t target_task, boolean_t must_wire) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int task_wire (uint target_task, int must_wire);

		// extern kern_return_t mach_make_memory_entry (vm_map_t target_task, vm_size_t *size, vm_offset_t offset, vm_prot_t permission, mem_entry_name_port_t *object_handle, mem_entry_name_port_t parent_entry);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_make_memory_entry (uint target_task, UIntPtr* size, UIntPtr offset, int permission, uint* object_handle, uint parent_entry);

		// extern kern_return_t vm_map_page_query (vm_map_t target_map, vm_offset_t offset, integer_t *disposition, integer_t *ref_count);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vm_map_page_query (uint target_map, UIntPtr offset, int* disposition, int* ref_count);

		// extern kern_return_t mach_vm_region_info (vm_map_t task, vm_address_t address, vm_info_region_t *region, vm_info_object_array_t *objects, mach_msg_type_number_t *objectsCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_vm_region_info (uint task, UIntPtr address, vm_info_region_t* region, vm_info_object_array_t** objects, uint* objectsCnt);

		// extern kern_return_t vm_mapped_pages_info (vm_map_t task, page_address_array_t *pages, mach_msg_type_number_t *pagesCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vm_mapped_pages_info (uint task, UIntPtr** pages, uint* pagesCnt);

		// extern kern_return_t vm_region_recurse (vm_map_t target_task, vm_address_t *address, vm_size_t *size, natural_t *nesting_depth, vm_region_recurse_info_t info, mach_msg_type_number_t *infoCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vm_region_recurse (uint target_task, UIntPtr* address, UIntPtr* size, uint* nesting_depth, int* info, uint* infoCnt);

		// extern kern_return_t vm_region_recurse_64 (vm_map_t target_task, vm_address_t *address, vm_size_t *size, natural_t *nesting_depth, vm_region_recurse_info_t info, mach_msg_type_number_t *infoCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vm_region_recurse_64 (uint target_task, UIntPtr* address, UIntPtr* size, uint* nesting_depth, int* info, uint* infoCnt);

		// extern kern_return_t mach_vm_region_info_64 (vm_map_t task, vm_address_t address, vm_info_region_64_t *region, vm_info_object_array_t *objects, mach_msg_type_number_t *objectsCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_vm_region_info_64 (uint task, UIntPtr address, vm_info_region_64_t* region, vm_info_object_array_t** objects, uint* objectsCnt);

		// extern kern_return_t vm_region_64 (vm_map_t target_task, vm_address_t *address, vm_size_t *size, vm_region_flavor_t flavor, vm_region_info_t info, mach_msg_type_number_t *infoCnt, mach_port_t *object_name);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vm_region_64 (uint target_task, UIntPtr* address, UIntPtr* size, int flavor, int* info, uint* infoCnt, uint* object_name);

		// extern kern_return_t mach_make_memory_entry_64 (vm_map_t target_task, memory_object_size_t *size, memory_object_offset_t offset, vm_prot_t permission, mach_port_t *object_handle, mem_entry_name_port_t parent_entry);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_make_memory_entry_64 (uint target_task, ulong* size, ulong offset, int permission, uint* object_handle, uint parent_entry);

		// extern kern_return_t vm_map_64 (vm_map_t target_task, vm_address_t *address, vm_size_t size, vm_address_t mask, int flags, mem_entry_name_port_t object, memory_object_offset_t offset, boolean_t copy, vm_prot_t cur_protection, vm_prot_t max_protection, vm_inherit_t inheritance);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vm_map_64 (uint target_task, UIntPtr* address, UIntPtr size, UIntPtr mask, int flags, uint @object, ulong offset, int copy, int cur_protection, int max_protection, uint inheritance);

		// extern kern_return_t vm_purgable_control (vm_map_t target_task, vm_address_t address, vm_purgable_t control, int *state);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vm_purgable_control (uint target_task, UIntPtr address, int control, int* state);

		// extern kern_return_t mach_port_names (ipc_space_t task, mach_port_name_array_t *names, mach_msg_type_number_t *namesCnt, mach_port_type_array_t *types, mach_msg_type_number_t *typesCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_port_names (uint task, uint** names, uint* namesCnt, uint** types, uint* typesCnt);

		// extern kern_return_t mach_port_type (ipc_space_t task, mach_port_name_t name, mach_port_type_t *ptype);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_port_type (uint task, uint name, uint* ptype);

		// extern kern_return_t mach_port_rename (ipc_space_t task, mach_port_name_t old_name, mach_port_name_t new_name);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int mach_port_rename (uint task, uint old_name, uint new_name);

		// extern kern_return_t mach_port_allocate_name (ipc_space_t task, mach_port_right_t right, mach_port_name_t name) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int mach_port_allocate_name (uint task, uint right, uint name);

		// extern kern_return_t mach_port_allocate (ipc_space_t task, mach_port_right_t right, mach_port_name_t *name);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_port_allocate (uint task, uint right, uint* name);

		// extern kern_return_t mach_port_destroy (ipc_space_t task, mach_port_name_t name);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int mach_port_destroy (uint task, uint name);

		// extern kern_return_t mach_port_deallocate (ipc_space_t task, mach_port_name_t name);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int mach_port_deallocate (uint task, uint name);

		// extern kern_return_t mach_port_get_refs (ipc_space_t task, mach_port_name_t name, mach_port_right_t right, mach_port_urefs_t *refs);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_port_get_refs (uint task, uint name, uint right, uint* refs);

		// extern kern_return_t mach_port_mod_refs (ipc_space_t task, mach_port_name_t name, mach_port_right_t right, mach_port_delta_t delta);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int mach_port_mod_refs (uint task, uint name, uint right, int delta);

		// extern kern_return_t mach_port_peek (ipc_space_t task, mach_port_name_t name, mach_msg_trailer_type_t trailer_type, mach_port_seqno_t *request_seqnop, mach_msg_size_t *msg_sizep, mach_msg_id_t *msg_idp, mach_msg_trailer_info_t trailer_infop, mach_msg_type_number_t *trailer_infopCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_port_peek (uint task, uint name, uint trailer_type, uint* request_seqnop, uint* msg_sizep, int* msg_idp, sbyte* trailer_infop, uint* trailer_infopCnt);

		// extern kern_return_t mach_port_set_mscount (ipc_space_t task, mach_port_name_t name, mach_port_mscount_t mscount);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int mach_port_set_mscount (uint task, uint name, uint mscount);

		// extern kern_return_t mach_port_get_set_status (ipc_space_inspect_t task, mach_port_name_t name, mach_port_name_array_t *members, mach_msg_type_number_t *membersCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_port_get_set_status (uint task, uint name, uint** members, uint* membersCnt);

		// extern kern_return_t mach_port_move_member (ipc_space_t task, mach_port_name_t member, mach_port_name_t after);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int mach_port_move_member (uint task, uint member, uint after);

		// extern kern_return_t mach_port_request_notification (ipc_space_t task, mach_port_name_t name, mach_msg_id_t msgid, mach_port_mscount_t sync, mach_port_t notify, mach_msg_type_name_t notifyPoly, mach_port_t *previous);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_port_request_notification (uint task, uint name, int msgid, uint sync, uint notify, uint notifyPoly, uint* previous);

		// extern kern_return_t mach_port_insert_right (ipc_space_t task, mach_port_name_t name, mach_port_t poly, mach_msg_type_name_t polyPoly);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int mach_port_insert_right (uint task, uint name, uint poly, uint polyPoly);

		// extern kern_return_t mach_port_extract_right (ipc_space_t task, mach_port_name_t name, mach_msg_type_name_t msgt_name, mach_port_t *poly, mach_msg_type_name_t *polyPoly);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_port_extract_right (uint task, uint name, uint msgt_name, uint* poly, uint* polyPoly);

		// extern kern_return_t mach_port_set_seqno (ipc_space_t task, mach_port_name_t name, mach_port_seqno_t seqno);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int mach_port_set_seqno (uint task, uint name, uint seqno);

		// extern kern_return_t mach_port_get_attributes (ipc_space_inspect_t task, mach_port_name_t name, mach_port_flavor_t flavor, mach_port_info_t port_info_out, mach_msg_type_number_t *port_info_outCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_port_get_attributes (uint task, uint name, int flavor, int* port_info_out, uint* port_info_outCnt);

		// extern kern_return_t mach_port_set_attributes (ipc_space_t task, mach_port_name_t name, mach_port_flavor_t flavor, mach_port_info_t port_info, mach_msg_type_number_t port_infoCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_port_set_attributes (uint task, uint name, int flavor, int* port_info, uint port_infoCnt);

		// extern kern_return_t mach_port_allocate_qos (ipc_space_t task, mach_port_right_t right, mach_port_qos_t *qos, mach_port_name_t *name);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_port_allocate_qos (uint task, uint right, mach_port_qos_t* qos, uint* name);

		// extern kern_return_t mach_port_allocate_full (ipc_space_t task, mach_port_right_t right, mach_port_t proto, mach_port_qos_t *qos, mach_port_name_t *name);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_port_allocate_full (uint task, uint right, uint proto, mach_port_qos_t* qos, uint* name);

		// extern kern_return_t task_set_port_space (ipc_space_t task, int table_entries) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int task_set_port_space (uint task, int table_entries);

		// extern kern_return_t mach_port_get_srights (ipc_space_t task, mach_port_name_t name, mach_port_rights_t *srights);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_port_get_srights (uint task, uint name, uint* srights);

		// extern kern_return_t mach_port_space_info (ipc_space_inspect_t task, ipc_info_space_t *space_info, ipc_info_name_array_t *table_info, mach_msg_type_number_t *table_infoCnt, ipc_info_tree_name_array_t *tree_info, mach_msg_type_number_t *tree_infoCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_port_space_info (uint task, ipc_info_space_t* space_info, ipc_info_name_array_t** table_info, uint* table_infoCnt, ipc_info_tree_name_array_t** tree_info, uint* tree_infoCnt);

		// extern kern_return_t mach_port_dnrequest_info (ipc_space_t task, mach_port_name_t name, unsigned int *dnr_total, unsigned int *dnr_used);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_port_dnrequest_info (uint task, uint name, uint* dnr_total, uint* dnr_used);

		// extern kern_return_t mach_port_kernel_object (ipc_space_inspect_t task, mach_port_name_t name, unsigned int *object_type, unsigned int *object_addr);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_port_kernel_object (uint task, uint name, uint* object_type, uint* object_addr);

		// extern kern_return_t mach_port_insert_member (ipc_space_t task, mach_port_name_t name, mach_port_name_t pset);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int mach_port_insert_member (uint task, uint name, uint pset);

		// extern kern_return_t mach_port_extract_member (ipc_space_t task, mach_port_name_t name, mach_port_name_t pset);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int mach_port_extract_member (uint task, uint name, uint pset);

		// extern kern_return_t mach_port_get_context (ipc_space_inspect_t task, mach_port_name_t name, mach_port_context_t *context);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_port_get_context (uint task, uint name, UIntPtr* context);

		// extern kern_return_t mach_port_set_context (ipc_space_t task, mach_port_name_t name, mach_port_context_t context);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int mach_port_set_context (uint task, uint name, UIntPtr context);

		// extern kern_return_t mach_port_kobject (ipc_space_inspect_t task, mach_port_name_t name, natural_t *object_type, mach_vm_address_t *object_addr);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_port_kobject (uint task, uint name, uint* object_type, ulong* object_addr);

		// extern kern_return_t mach_port_construct (ipc_space_t task, mach_port_options_ptr_t options, mach_port_context_t context, mach_port_name_t *name);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_port_construct (uint task, mach_port_options_ptr_t* options, UIntPtr context, uint* name);

		// extern kern_return_t mach_port_destruct (ipc_space_t task, mach_port_name_t name, mach_port_delta_t srdelta, mach_port_context_t guard);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int mach_port_destruct (uint task, uint name, int srdelta, UIntPtr guard);

		// extern kern_return_t mach_port_guard (ipc_space_t task, mach_port_name_t name, mach_port_context_t guard, boolean_t strict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int mach_port_guard (uint task, uint name, UIntPtr guard, int strict);

		// extern kern_return_t mach_port_unguard (ipc_space_t task, mach_port_name_t name, mach_port_context_t guard);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int mach_port_unguard (uint task, uint name, UIntPtr guard);

		// extern kern_return_t mach_port_space_basic_info (ipc_space_inspect_t task, ipc_info_space_basic_t *basic_info);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_port_space_basic_info (uint task, ipc_info_space_basic_t* basic_info);

		// extern mach_port_t mach_host_self ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint mach_host_self ();

		// extern mach_port_t mach_thread_self ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint mach_thread_self ();

		// extern kern_return_t host_page_size (host_t, vm_size_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int host_page_size (uint, UIntPtr*);

		// extern kern_return_t clock_sleep_trap (mach_port_name_t clock_name, sleep_type_t sleep_type, int sleep_sec, int sleep_nsec, mach_timespec_t *wakeup_time);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int clock_sleep_trap (uint clock_name, int sleep_type, int sleep_sec, int sleep_nsec, mach_timespec_t* wakeup_time);

		// extern kern_return_t _kernelrpc_mach_vm_allocate_trap (mach_port_name_t target, mach_vm_offset_t *addr, mach_vm_size_t size, int flags);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int _kernelrpc_mach_vm_allocate_trap (uint target, ulong* addr, ulong size, int flags);

		// extern kern_return_t _kernelrpc_mach_vm_deallocate_trap (mach_port_name_t target, mach_vm_address_t address, mach_vm_size_t size);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int _kernelrpc_mach_vm_deallocate_trap (uint target, ulong address, ulong size);

		// extern kern_return_t _kernelrpc_mach_vm_protect_trap (mach_port_name_t target, mach_vm_address_t address, mach_vm_size_t size, boolean_t set_maximum, vm_prot_t new_protection);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int _kernelrpc_mach_vm_protect_trap (uint target, ulong address, ulong size, int set_maximum, int new_protection);

		// extern kern_return_t _kernelrpc_mach_vm_map_trap (mach_port_name_t target, mach_vm_offset_t *address, mach_vm_size_t size, mach_vm_offset_t mask, int flags, vm_prot_t cur_protection);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int _kernelrpc_mach_vm_map_trap (uint target, ulong* address, ulong size, ulong mask, int flags, int cur_protection);

		// extern kern_return_t _kernelrpc_mach_vm_purgable_control_trap (mach_port_name_t target, mach_vm_offset_t address, vm_purgable_t control, int *state);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int _kernelrpc_mach_vm_purgable_control_trap (uint target, ulong address, int control, int* state);

		// extern kern_return_t _kernelrpc_mach_port_allocate_trap (mach_port_name_t target, mach_port_right_t right, mach_port_name_t *name);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int _kernelrpc_mach_port_allocate_trap (uint target, uint right, uint* name);

		// extern kern_return_t _kernelrpc_mach_port_destroy_trap (mach_port_name_t target, mach_port_name_t name);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int _kernelrpc_mach_port_destroy_trap (uint target, uint name);

		// extern kern_return_t _kernelrpc_mach_port_deallocate_trap (mach_port_name_t target, mach_port_name_t name);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int _kernelrpc_mach_port_deallocate_trap (uint target, uint name);

		// extern kern_return_t _kernelrpc_mach_port_mod_refs_trap (mach_port_name_t target, mach_port_name_t name, mach_port_right_t right, mach_port_delta_t delta);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int _kernelrpc_mach_port_mod_refs_trap (uint target, uint name, uint right, int delta);

		// extern kern_return_t _kernelrpc_mach_port_move_member_trap (mach_port_name_t target, mach_port_name_t member, mach_port_name_t after);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int _kernelrpc_mach_port_move_member_trap (uint target, uint member, uint after);

		// extern kern_return_t _kernelrpc_mach_port_insert_right_trap (mach_port_name_t target, mach_port_name_t name, mach_port_name_t poly, mach_msg_type_name_t polyPoly);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int _kernelrpc_mach_port_insert_right_trap (uint target, uint name, uint poly, uint polyPoly);

		// extern kern_return_t _kernelrpc_mach_port_insert_member_trap (mach_port_name_t target, mach_port_name_t name, mach_port_name_t pset);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int _kernelrpc_mach_port_insert_member_trap (uint target, uint name, uint pset);

		// extern kern_return_t _kernelrpc_mach_port_extract_member_trap (mach_port_name_t target, mach_port_name_t name, mach_port_name_t pset);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int _kernelrpc_mach_port_extract_member_trap (uint target, uint name, uint pset);

		// extern kern_return_t _kernelrpc_mach_port_construct_trap (mach_port_name_t target, mach_port_options_t *options, uint64_t context, mach_port_name_t *name);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int _kernelrpc_mach_port_construct_trap (uint target, mach_port_options_t* options, ulong context, uint* name);

		// extern kern_return_t _kernelrpc_mach_port_destruct_trap (mach_port_name_t target, mach_port_name_t name, mach_port_delta_t srdelta, uint64_t guard);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int _kernelrpc_mach_port_destruct_trap (uint target, uint name, int srdelta, ulong guard);

		// extern kern_return_t _kernelrpc_mach_port_guard_trap (mach_port_name_t target, mach_port_name_t name, uint64_t guard, boolean_t strict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int _kernelrpc_mach_port_guard_trap (uint target, uint name, ulong guard, int strict);

		// extern kern_return_t _kernelrpc_mach_port_unguard_trap (mach_port_name_t target, mach_port_name_t name, uint64_t guard);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int _kernelrpc_mach_port_unguard_trap (uint target, uint name, ulong guard);

		// extern kern_return_t mach_generate_activity_id (mach_port_name_t target, int count, uint64_t *activity_id);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_generate_activity_id (uint target, int count, ulong* activity_id);

		// extern kern_return_t macx_swapon (uint64_t filename, int flags, int size, int priority);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int macx_swapon (ulong filename, int flags, int size, int priority);

		// extern kern_return_t macx_swapoff (uint64_t filename, int flags);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int macx_swapoff (ulong filename, int flags);

		// extern kern_return_t macx_triggers (int hi_water, int low_water, int flags, mach_port_t alert_port);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int macx_triggers (int hi_water, int low_water, int flags, uint alert_port);

		// extern kern_return_t macx_backing_store_suspend (boolean_t suspend);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int macx_backing_store_suspend (int suspend);

		// extern kern_return_t macx_backing_store_recovery (int pid);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int macx_backing_store_recovery (int pid);

		// extern boolean_t swtch_pri (int pri);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int swtch_pri (int pri);

		// extern boolean_t swtch ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int swtch ();

		// extern kern_return_t thread_switch (mach_port_name_t thread_name, int option, mach_msg_timeout_t option_time);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int thread_switch (uint thread_name, int option, uint option_time);

		// extern mach_port_name_t task_self_trap ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint task_self_trap ();

		// extern kern_return_t host_create_mach_voucher_trap (mach_port_name_t host, mach_voucher_attr_raw_recipe_array_t recipes, int recipes_size, mach_port_name_t *voucher);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int host_create_mach_voucher_trap (uint host, byte* recipes, int recipes_size, uint* voucher);

		// extern kern_return_t mach_voucher_extract_attr_recipe_trap (mach_port_name_t voucher_name, mach_voucher_attr_key_t key, mach_voucher_attr_raw_recipe_t recipe, mach_msg_type_number_t *recipe_size);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_voucher_extract_attr_recipe_trap (uint voucher_name, uint key, byte* recipe, uint* recipe_size);

		// extern kern_return_t task_for_pid (mach_port_name_t target_tport, int pid, mach_port_name_t *t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int task_for_pid (uint target_tport, int pid, uint* t);

		// extern kern_return_t task_name_for_pid (mach_port_name_t target_tport, int pid, mach_port_name_t *tn);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int task_name_for_pid (uint target_tport, int pid, uint* tn);

		// extern kern_return_t pid_for_task (mach_port_name_t t, int *x);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pid_for_task (uint t, int* x);

		// extern kern_return_t host_info (host_t host, host_flavor_t flavor, host_info_t host_info_out, mach_msg_type_number_t *host_info_outCnt) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int host_info (uint host, int flavor, int* host_info_out, uint* host_info_outCnt);

		// extern kern_return_t host_kernel_version (host_t host, char *kernel_version);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int host_kernel_version (uint host, sbyte[] kernel_version);

		// extern kern_return_t _host_page_size (host_t host, vm_size_t *out_page_size);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int _host_page_size (uint host, UIntPtr* out_page_size);

		// extern kern_return_t mach_memory_object_memory_entry (host_t host, boolean_t internal, vm_size_t size, vm_prot_t permission, memory_object_t pager, mach_port_t *entry_handle);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_memory_object_memory_entry (uint host, int @internal, UIntPtr size, int permission, uint pager, uint* entry_handle);

		// extern kern_return_t host_processor_info (host_t host, processor_flavor_t flavor, natural_t *out_processor_count, processor_info_array_t *out_processor_info, mach_msg_type_number_t *out_processor_infoCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int host_processor_info (uint host, int flavor, uint* out_processor_count, int** out_processor_info, uint* out_processor_infoCnt);

		// extern kern_return_t host_get_io_master (host_t host, io_master_t *io_master);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int host_get_io_master (uint host, uint* io_master);

		// extern kern_return_t host_get_clock_service (host_t host, clock_id_t clock_id, clock_serv_t *clock_serv);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int host_get_clock_service (uint host, int clock_id, uint* clock_serv);

		// extern kern_return_t kmod_get_info (host_t host, kmod_args_t *modules, mach_msg_type_number_t *modulesCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int kmod_get_info (uint host, void** modules, uint* modulesCnt);

		// extern kern_return_t host_virtual_physical_table_info (host_t host, hash_info_bucket_array_t *info, mach_msg_type_number_t *infoCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int host_virtual_physical_table_info (uint host, hash_info_bucket_array_t** info, uint* infoCnt);

		// extern kern_return_t processor_set_default (host_t host, processor_set_name_t *default_set);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int processor_set_default (uint host, uint* default_set);

		// extern kern_return_t processor_set_create (host_t host, processor_set_t *new_set, processor_set_name_t *new_name);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int processor_set_create (uint host, uint* new_set, uint* new_name);

		// extern kern_return_t mach_memory_object_memory_entry_64 (host_t host, boolean_t internal, memory_object_size_t size, vm_prot_t permission, memory_object_t pager, mach_port_t *entry_handle);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_memory_object_memory_entry_64 (uint host, int @internal, ulong size, int permission, uint pager, uint* entry_handle);

		// extern kern_return_t host_statistics (host_t host_priv, host_flavor_t flavor, host_info_t host_info_out, mach_msg_type_number_t *host_info_outCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int host_statistics (uint host_priv, int flavor, int* host_info_out, uint* host_info_outCnt);

		// extern kern_return_t host_request_notification (host_t host, host_flavor_t notify_type, mach_port_t notify_port) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int host_request_notification (uint host, int notify_type, uint notify_port);

		// extern kern_return_t host_lockgroup_info (host_t host, lockgroup_info_array_t *lockgroup_info, mach_msg_type_number_t *lockgroup_infoCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int host_lockgroup_info (uint host, lockgroup_info_array_t** lockgroup_info, uint* lockgroup_infoCnt);

		// extern kern_return_t host_statistics64 (host_t host_priv, host_flavor_t flavor, host_info64_t host_info64_out, mach_msg_type_number_t *host_info64_outCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int host_statistics64 (uint host_priv, int flavor, int* host_info64_out, uint* host_info64_outCnt);

		// extern kern_return_t mach_zone_info (host_priv_t host, mach_zone_name_array_t *names, mach_msg_type_number_t *namesCnt, mach_zone_info_array_t *info, mach_msg_type_number_t *infoCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_zone_info (uint host, mach_zone_name_array_t** names, uint* namesCnt, mach_zone_info_array_t** info, uint* infoCnt);

		// extern kern_return_t host_create_mach_voucher (host_t host, mach_voucher_attr_raw_recipe_array_t recipes, mach_msg_type_number_t recipesCnt, ipc_voucher_t *voucher) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int host_create_mach_voucher (uint host, byte* recipes, uint recipesCnt, uint* voucher);

		// extern kern_return_t host_register_mach_voucher_attr_manager (host_t host, mach_voucher_attr_manager_t attr_manager, mach_voucher_attr_value_handle_t default_value, mach_voucher_attr_key_t *new_key, ipc_voucher_attr_control_t *new_attr_control) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int host_register_mach_voucher_attr_manager (uint host, uint attr_manager, ulong default_value, uint* new_key, uint* new_attr_control);

		// extern kern_return_t host_register_well_known_mach_voucher_attr_manager (host_t host, mach_voucher_attr_manager_t attr_manager, mach_voucher_attr_value_handle_t default_value, mach_voucher_attr_key_t key, ipc_voucher_attr_control_t *new_attr_control) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int host_register_well_known_mach_voucher_attr_manager (uint host, uint attr_manager, ulong default_value, uint key, uint* new_attr_control);

		// extern kern_return_t host_set_atm_diagnostic_flag (host_priv_t host_priv, uint32_t diagnostic_flag) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int host_set_atm_diagnostic_flag (uint host_priv, uint diagnostic_flag);

		// extern kern_return_t host_get_atm_diagnostic_flag (host_t host, uint32_t *diagnostic_flag) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int host_get_atm_diagnostic_flag (uint host, uint* diagnostic_flag);

		// extern kern_return_t mach_memory_info (host_priv_t host, mach_zone_name_array_t *names, mach_msg_type_number_t *namesCnt, mach_zone_info_array_t *info, mach_msg_type_number_t *infoCnt, mach_memory_info_array_t *memory_info, mach_msg_type_number_t *memory_infoCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_memory_info (uint host, mach_zone_name_array_t** names, uint* namesCnt, mach_zone_info_array_t** info, uint* infoCnt, mach_memory_info_array_t** memory_info, uint* memory_infoCnt);

		// extern kern_return_t host_set_multiuser_config_flags (host_priv_t host_priv, uint32_t multiuser_flags);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int host_set_multiuser_config_flags (uint host_priv, uint multiuser_flags);

		// extern kern_return_t host_get_multiuser_config_flags (host_t host, uint32_t *multiuser_flags);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int host_get_multiuser_config_flags (uint host, uint* multiuser_flags);

		// extern kern_return_t host_check_multiuser_mode (host_t host, uint32_t *multiuser_mode);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int host_check_multiuser_mode (uint host, uint* multiuser_mode);

		// extern char * mach_error_string (mach_error_t error_value);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* mach_error_string (int error_value);

		// extern void mach_error (const char *str, mach_error_t error_value);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void mach_error (sbyte* str, int error_value);

		// extern char * mach_error_type (mach_error_t error_value);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* mach_error_type (int error_value);

		// extern void panic_init (mach_port_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void panic_init (uint);

		// extern void panic (const char *, ...);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void panic (sbyte*, IntPtr varArgs);

		// extern void safe_gets (char *, char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void safe_gets (sbyte*, sbyte*, int);

		// extern void slot_name (cpu_type_t, cpu_subtype_t, char **, char **);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void slot_name (int, int, sbyte**, sbyte**);

		// extern void mig_reply_setup (mach_msg_header_t *, mach_msg_header_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void mig_reply_setup (mach_msg_header_t*, mach_msg_header_t*);

		// extern void mach_msg_destroy (mach_msg_header_t *) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void mach_msg_destroy (mach_msg_header_t*);

		// extern mach_msg_return_t mach_msg_receive (mach_msg_header_t *) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_msg_receive (mach_msg_header_t*);

		// extern mach_msg_return_t mach_msg_send (mach_msg_header_t *) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_msg_send (mach_msg_header_t*);

		// extern mach_msg_return_t mach_msg_server_once (boolean_t (*)(mach_msg_header_t *, mach_msg_header_t *), mach_msg_size_t, mach_port_t, mach_msg_options_t) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_msg_server_once (Func<Darwin.mach_msg_header_t*, Darwin.mach_msg_header_t*, int>*, uint, uint, int);

		// extern mach_msg_return_t mach_msg_server (boolean_t (*)(mach_msg_header_t *, mach_msg_header_t *), mach_msg_size_t, mach_port_t, mach_msg_options_t) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_msg_server (Func<Darwin.mach_msg_header_t*, Darwin.mach_msg_header_t*, int>*, uint, uint, int);

		// extern mach_msg_return_t mach_msg_server_importance (boolean_t (*)(mach_msg_header_t *, mach_msg_header_t *), mach_msg_size_t, mach_port_t, mach_msg_options_t) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_msg_server_importance (Func<Darwin.mach_msg_header_t*, Darwin.mach_msg_header_t*, int>*, uint, uint, int);

		// extern kern_return_t clock_get_res (mach_port_t, clock_res_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int clock_get_res (uint, int*);

		// extern kern_return_t clock_set_res (mach_port_t, clock_res_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int clock_set_res (uint, int);

		// extern kern_return_t clock_sleep (mach_port_t, int, mach_timespec_t, mach_timespec_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int clock_sleep (uint, int, mach_timespec_t, mach_timespec_t*);

		// extern boolean_t voucher_mach_msg_set (mach_msg_header_t *msg);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int voucher_mach_msg_set (mach_msg_header_t* msg);

		// extern void voucher_mach_msg_clear (mach_msg_header_t *msg);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void voucher_mach_msg_clear (mach_msg_header_t* msg);

		// extern voucher_mach_msg_state_t voucher_mach_msg_adopt (mach_msg_header_t *msg);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe voucher_mach_msg_state_t* voucher_mach_msg_adopt (mach_msg_header_t* msg);

		// extern void voucher_mach_msg_revert (voucher_mach_msg_state_t state);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void voucher_mach_msg_revert (voucher_mach_msg_state_t* state);

		// extern kern_return_t clock_get_time (clock_serv_t clock_serv, mach_timespec_t *cur_time);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int clock_get_time (uint clock_serv, mach_timespec_t* cur_time);

		// extern kern_return_t clock_get_attributes (clock_serv_t clock_serv, clock_flavor_t flavor, clock_attr_t clock_attr, mach_msg_type_number_t *clock_attrCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int clock_get_attributes (uint clock_serv, int flavor, int* clock_attr, uint* clock_attrCnt);

		// extern kern_return_t clock_alarm (clock_serv_t clock_serv, alarm_type_t alarm_type, mach_timespec_t alarm_time, clock_reply_t alarm_port);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int clock_alarm (uint clock_serv, int alarm_type, mach_timespec_t alarm_time, uint alarm_port);

		// extern kern_return_t clock_alarm_reply (clock_reply_t alarm_port, mach_msg_type_name_t alarm_portPoly, kern_return_t alarm_code, alarm_type_t alarm_type, mach_timespec_t alarm_time);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int clock_alarm_reply (uint alarm_port, uint alarm_portPoly, int alarm_code, int alarm_type, mach_timespec_t alarm_time);

		// extern kern_return_t exception_raise (mach_port_t exception_port, mach_port_t thread, mach_port_t task, exception_type_t exception, exception_data_t code, mach_msg_type_number_t codeCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int exception_raise (uint exception_port, uint thread, uint task, int exception, int* code, uint codeCnt);

		// extern kern_return_t exception_raise_state (mach_port_t exception_port, exception_type_t exception, const exception_data_t code, mach_msg_type_number_t codeCnt, int *flavor, const thread_state_t old_state, mach_msg_type_number_t old_stateCnt, thread_state_t new_state, mach_msg_type_number_t *new_stateCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int exception_raise_state (uint exception_port, int exception, int* code, uint codeCnt, int* flavor, uint* old_state, uint old_stateCnt, uint* new_state, uint* new_stateCnt);

		// extern kern_return_t exception_raise_state_identity (mach_port_t exception_port, mach_port_t thread, mach_port_t task, exception_type_t exception, exception_data_t code, mach_msg_type_number_t codeCnt, int *flavor, thread_state_t old_state, mach_msg_type_number_t old_stateCnt, thread_state_t new_state, mach_msg_type_number_t *new_stateCnt);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int exception_raise_state_identity (uint exception_port, uint thread, uint task, int exception, int* code, uint codeCnt, int* flavor, uint* old_state, uint old_stateCnt, uint* new_state, uint* new_stateCnt);

		// extern kern_return_t mach_timebase_info (mach_timebase_info_t info);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_timebase_info (mach_timebase_info_t* info);

		// extern kern_return_t mach_wait_until (uint64_t deadline);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int mach_wait_until (ulong deadline);

		// extern uint64_t mach_absolute_time ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ulong mach_absolute_time ();

		// extern uint64_t mach_approximate_time () __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ulong mach_approximate_time ();

		// extern uint64_t mach_continuous_time () __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ulong mach_continuous_time ();

		// extern uint64_t mach_continuous_approximate_time () __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ulong mach_continuous_approximate_time ();

		// extern void port_obj_init (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void port_obj_init (int);

		// extern int32_t OSAtomicAdd32 (int32_t __theAmount, volatile int32_t *__theValue) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_fetch_add_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_fetch_add_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_fetch_add_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_fetch_add_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int OSAtomicAdd32 (int __theAmount, int* __theValue);

		// extern int32_t OSAtomicAdd32Barrier (int32_t __theAmount, volatile int32_t *__theValue) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_fetch_add() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_fetch_add() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_fetch_add() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_fetch_add() from <stdatomic.h> instead")]
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int OSAtomicAdd32Barrier (int __theAmount, int* __theValue);

		// extern int32_t OSAtomicIncrement32 (volatile int32_t *__theValue) __attribute__((availability(ios, introduced=7.1))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_fetch_add_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_fetch_add_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_fetch_add_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_fetch_add_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[iOS (7,1)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int OSAtomicIncrement32 (int* __theValue);

		// extern int32_t OSAtomicIncrement32Barrier (volatile int32_t *__theValue) __attribute__((availability(ios, introduced=7.1))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_fetch_add() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_fetch_add() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_fetch_add() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_fetch_add() from <stdatomic.h> instead")]
		[iOS (7,1)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int OSAtomicIncrement32Barrier (int* __theValue);

		// extern int32_t OSAtomicDecrement32 (volatile int32_t *__theValue) __attribute__((availability(ios, introduced=7.1))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_fetch_sub_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_fetch_sub_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_fetch_sub_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_fetch_sub_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[iOS (7,1)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int OSAtomicDecrement32 (int* __theValue);

		// extern int32_t OSAtomicDecrement32Barrier (volatile int32_t *__theValue) __attribute__((availability(ios, introduced=7.1))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_fetch_sub() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_fetch_sub() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_fetch_sub() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_fetch_sub() from <stdatomic.h> instead")]
		[iOS (7,1)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int OSAtomicDecrement32Barrier (int* __theValue);

		// extern int64_t OSAtomicAdd64 (int64_t __theAmount, volatile OSAtomic_int64_aligned64_t *__theValue) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_fetch_add_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_fetch_add_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_fetch_add_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_fetch_add_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe long OSAtomicAdd64 (long __theAmount, long* __theValue);

		// extern int64_t OSAtomicAdd64Barrier (int64_t __theAmount, volatile OSAtomic_int64_aligned64_t *__theValue) __attribute__((availability(ios, introduced=3.2))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_fetch_add() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_fetch_add() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_fetch_add() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_fetch_add() from <stdatomic.h> instead")]
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe long OSAtomicAdd64Barrier (long __theAmount, long* __theValue);

		// extern int64_t OSAtomicIncrement64 (volatile OSAtomic_int64_aligned64_t *__theValue) __attribute__((availability(ios, introduced=7.1))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_fetch_add_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_fetch_add_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_fetch_add_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_fetch_add_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[iOS (7,1)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe long OSAtomicIncrement64 (long* __theValue);

		// extern int64_t OSAtomicIncrement64Barrier (volatile OSAtomic_int64_aligned64_t *__theValue) __attribute__((availability(ios, introduced=7.1))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_fetch_add() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_fetch_add() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_fetch_add() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_fetch_add() from <stdatomic.h> instead")]
		[iOS (7,1)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe long OSAtomicIncrement64Barrier (long* __theValue);

		// extern int64_t OSAtomicDecrement64 (volatile OSAtomic_int64_aligned64_t *__theValue) __attribute__((availability(ios, introduced=7.1))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_fetch_sub_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_fetch_sub_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_fetch_sub_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_fetch_sub_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[iOS (7,1)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe long OSAtomicDecrement64 (long* __theValue);

		// extern int64_t OSAtomicDecrement64Barrier (volatile OSAtomic_int64_aligned64_t *__theValue) __attribute__((availability(ios, introduced=7.1))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_fetch_sub() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_fetch_sub() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_fetch_sub() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_fetch_sub() from <stdatomic.h> instead")]
		[iOS (7,1)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe long OSAtomicDecrement64Barrier (long* __theValue);

		// extern int32_t OSAtomicOr32 (uint32_t __theMask, volatile uint32_t *__theValue) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_fetch_or_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_fetch_or_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_fetch_or_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_fetch_or_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int OSAtomicOr32 (uint __theMask, uint* __theValue);

		// extern int32_t OSAtomicOr32Barrier (uint32_t __theMask, volatile uint32_t *__theValue) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_fetch_or() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_fetch_or() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_fetch_or() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_fetch_or() from <stdatomic.h> instead")]
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int OSAtomicOr32Barrier (uint __theMask, uint* __theValue);

		// extern int32_t OSAtomicOr32Orig (uint32_t __theMask, volatile uint32_t *__theValue) __attribute__((availability(ios, introduced=3.2))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_fetch_or_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_fetch_or_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_fetch_or_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_fetch_or_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int OSAtomicOr32Orig (uint __theMask, uint* __theValue);

		// extern int32_t OSAtomicOr32OrigBarrier (uint32_t __theMask, volatile uint32_t *__theValue) __attribute__((availability(ios, introduced=3.2))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_fetch_or() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_fetch_or() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_fetch_or() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_fetch_or() from <stdatomic.h> instead")]
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int OSAtomicOr32OrigBarrier (uint __theMask, uint* __theValue);

		// extern int32_t OSAtomicAnd32 (uint32_t __theMask, volatile uint32_t *__theValue) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_fetch_and_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_fetch_and_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_fetch_and_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_fetch_and_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int OSAtomicAnd32 (uint __theMask, uint* __theValue);

		// extern int32_t OSAtomicAnd32Barrier (uint32_t __theMask, volatile uint32_t *__theValue) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_fetch_and() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_fetch_and() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_fetch_and() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_fetch_and() from <stdatomic.h> instead")]
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int OSAtomicAnd32Barrier (uint __theMask, uint* __theValue);

		// extern int32_t OSAtomicAnd32Orig (uint32_t __theMask, volatile uint32_t *__theValue) __attribute__((availability(ios, introduced=3.2))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_fetch_and_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_fetch_and_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_fetch_and_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_fetch_and_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int OSAtomicAnd32Orig (uint __theMask, uint* __theValue);

		// extern int32_t OSAtomicAnd32OrigBarrier (uint32_t __theMask, volatile uint32_t *__theValue) __attribute__((availability(ios, introduced=3.2))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_fetch_and() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_fetch_and() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_fetch_and() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_fetch_and() from <stdatomic.h> instead")]
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int OSAtomicAnd32OrigBarrier (uint __theMask, uint* __theValue);

		// extern int32_t OSAtomicXor32 (uint32_t __theMask, volatile uint32_t *__theValue) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_fetch_xor_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_fetch_xor_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_fetch_xor_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_fetch_xor_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int OSAtomicXor32 (uint __theMask, uint* __theValue);

		// extern int32_t OSAtomicXor32Barrier (uint32_t __theMask, volatile uint32_t *__theValue) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_fetch_xor() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_fetch_xor() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_fetch_xor() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_fetch_xor() from <stdatomic.h> instead")]
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int OSAtomicXor32Barrier (uint __theMask, uint* __theValue);

		// extern int32_t OSAtomicXor32Orig (uint32_t __theMask, volatile uint32_t *__theValue) __attribute__((availability(ios, introduced=3.2))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_fetch_xor_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_fetch_xor_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_fetch_xor_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_fetch_xor_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int OSAtomicXor32Orig (uint __theMask, uint* __theValue);

		// extern int32_t OSAtomicXor32OrigBarrier (uint32_t __theMask, volatile uint32_t *__theValue) __attribute__((availability(ios, introduced=3.2))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_fetch_xor() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_fetch_xor() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_fetch_xor() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_fetch_xor() from <stdatomic.h> instead")]
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int OSAtomicXor32OrigBarrier (uint __theMask, uint* __theValue);

		// extern _Bool OSAtomicCompareAndSwap32 (int32_t __oldValue, int32_t __newValue, volatile int32_t *__theValue) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_compare_exchange_strong_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_compare_exchange_strong_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_compare_exchange_strong_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_compare_exchange_strong_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool OSAtomicCompareAndSwap32 (int __oldValue, int __newValue, int* __theValue);

		// extern _Bool OSAtomicCompareAndSwap32Barrier (int32_t __oldValue, int32_t __newValue, volatile int32_t *__theValue) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_compare_exchange_strong() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_compare_exchange_strong() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_compare_exchange_strong() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_compare_exchange_strong() from <stdatomic.h> instead")]
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool OSAtomicCompareAndSwap32Barrier (int __oldValue, int __newValue, int* __theValue);

		// extern _Bool OSAtomicCompareAndSwapPtr (void *__oldValue, void *__newValue, void *volatile *__theValue) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_compare_exchange_strong_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_compare_exchange_strong_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_compare_exchange_strong_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_compare_exchange_strong_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool OSAtomicCompareAndSwapPtr (void* __oldValue, void* __newValue, void** __theValue);

		// extern _Bool OSAtomicCompareAndSwapPtrBarrier (void *__oldValue, void *__newValue, void *volatile *__theValue) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_compare_exchange_strong() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_compare_exchange_strong() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_compare_exchange_strong() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_compare_exchange_strong() from <stdatomic.h> instead")]
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool OSAtomicCompareAndSwapPtrBarrier (void* __oldValue, void* __newValue, void** __theValue);

		// extern _Bool OSAtomicCompareAndSwapInt (int __oldValue, int __newValue, volatile int *__theValue) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_compare_exchange_strong_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_compare_exchange_strong_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_compare_exchange_strong_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_compare_exchange_strong_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool OSAtomicCompareAndSwapInt (int __oldValue, int __newValue, int* __theValue);

		// extern _Bool OSAtomicCompareAndSwapIntBarrier (int __oldValue, int __newValue, volatile int *__theValue) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_compare_exchange_strong() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_compare_exchange_strong() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_compare_exchange_strong() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_compare_exchange_strong() from <stdatomic.h> instead")]
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool OSAtomicCompareAndSwapIntBarrier (int __oldValue, int __newValue, int* __theValue);

		// extern _Bool OSAtomicCompareAndSwapLong (long __oldValue, long __newValue, volatile long *__theValue) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_compare_exchange_strong_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_compare_exchange_strong_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_compare_exchange_strong_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_compare_exchange_strong_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool OSAtomicCompareAndSwapLong (nint __oldValue, nint __newValue, nint* __theValue);

		// extern _Bool OSAtomicCompareAndSwapLongBarrier (long __oldValue, long __newValue, volatile long *__theValue) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_compare_exchange_strong() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_compare_exchange_strong() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_compare_exchange_strong() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_compare_exchange_strong() from <stdatomic.h> instead")]
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool OSAtomicCompareAndSwapLongBarrier (nint __oldValue, nint __newValue, nint* __theValue);

		// extern _Bool OSAtomicCompareAndSwap64 (int64_t __oldValue, int64_t __newValue, volatile OSAtomic_int64_aligned64_t *__theValue) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_compare_exchange_strong_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_compare_exchange_strong_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_compare_exchange_strong_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_compare_exchange_strong_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool OSAtomicCompareAndSwap64 (long __oldValue, long __newValue, long* __theValue);

		// extern _Bool OSAtomicCompareAndSwap64Barrier (int64_t __oldValue, int64_t __newValue, volatile OSAtomic_int64_aligned64_t *__theValue) __attribute__((availability(ios, introduced=3.2))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_compare_exchange_strong() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_compare_exchange_strong() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_compare_exchange_strong() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_compare_exchange_strong() from <stdatomic.h> instead")]
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool OSAtomicCompareAndSwap64Barrier (long __oldValue, long __newValue, long* __theValue);

		// extern _Bool OSAtomicTestAndSet (uint32_t __n, volatile void *__theAddress) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_fetch_or_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_fetch_or_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_fetch_or_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_fetch_or_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool OSAtomicTestAndSet (uint __n, void* __theAddress);

		// extern _Bool OSAtomicTestAndSetBarrier (uint32_t __n, volatile void *__theAddress) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_fetch_or() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_fetch_or() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_fetch_or() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_fetch_or() from <stdatomic.h> instead")]
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool OSAtomicTestAndSetBarrier (uint __n, void* __theAddress);

		// extern _Bool OSAtomicTestAndClear (uint32_t __n, volatile void *__theAddress) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_fetch_and_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_fetch_and_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_fetch_and_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_fetch_and_explicit(memory_order_relaxed) from <stdatomic.h> instead")]
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool OSAtomicTestAndClear (uint __n, void* __theAddress);

		// extern _Bool OSAtomicTestAndClearBarrier (uint32_t __n, volatile void *__theAddress) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_fetch_and() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_fetch_and() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_fetch_and() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_fetch_and() from <stdatomic.h> instead")]
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool OSAtomicTestAndClearBarrier (uint __n, void* __theAddress);

		// extern void OSMemoryBarrier () __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use atomic_thread_fence() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use atomic_thread_fence() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use atomic_thread_fence() from <stdatomic.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use atomic_thread_fence() from <stdatomic.h> instead")]
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void OSMemoryBarrier ();

		// extern _Bool OSSpinLockTry (volatile OSSpinLock *__lock) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use os_unfair_lock_trylock() from <os/lock.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use os_unfair_lock_trylock() from <os/lock.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use os_unfair_lock_trylock() from <os/lock.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use os_unfair_lock_trylock() from <os/lock.h> instead")]
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool OSSpinLockTry (int* __lock);

		// extern void OSSpinLockLock (volatile OSSpinLock *__lock) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use os_unfair_lock_lock() from <os/lock.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use os_unfair_lock_lock() from <os/lock.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use os_unfair_lock_lock() from <os/lock.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use os_unfair_lock_lock() from <os/lock.h> instead")]
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void OSSpinLockLock (int* __lock);

		// extern void OSSpinLockUnlock (volatile OSSpinLock *__lock) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, deprecated=3.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use os_unfair_lock_unlock() from <os/lock.h> instead")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use os_unfair_lock_unlock() from <os/lock.h> instead")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use os_unfair_lock_unlock() from <os/lock.h> instead")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use os_unfair_lock_unlock() from <os/lock.h> instead")]
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void OSSpinLockUnlock (int* __lock);

		// extern void OSAtomicEnqueue (OSQueueHead *__list, void *__new, size_t __offset) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void OSAtomicEnqueue (OSQueueHead* __list, void* __new, nuint __offset);

		// extern void * OSAtomicDequeue (OSQueueHead *__list, size_t __offset) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* OSAtomicDequeue (OSQueueHead* __list, nuint __offset);

		// extern void os_unfair_lock_lock (os_unfair_lock_t _Nonnull lock) __attribute__((nonnull())) __attribute__((nothrow)) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void os_unfair_lock_lock (os_unfair_lock_t* @lock);

		// extern _Bool os_unfair_lock_trylock (os_unfair_lock_t _Nonnull lock) __attribute__((nonnull())) __attribute__((warn_unused_result)) __attribute__((nothrow)) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool os_unfair_lock_trylock (os_unfair_lock_t* @lock);

		// extern void os_unfair_lock_unlock (os_unfair_lock_t _Nonnull lock) __attribute__((nonnull())) __attribute__((nothrow)) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void os_unfair_lock_unlock (os_unfair_lock_t* @lock);

		// extern malloc_zone_t * malloc_default_zone ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe malloc_zone_t* malloc_default_zone ();

		// extern malloc_zone_t * malloc_create_zone (vm_size_t start_size, unsigned int flags);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe malloc_zone_t* malloc_create_zone (UIntPtr start_size, uint flags);

		// extern void malloc_destroy_zone (malloc_zone_t *zone);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void malloc_destroy_zone (malloc_zone_t* zone);

		// extern void * malloc_zone_malloc (malloc_zone_t *zone, size_t size);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* malloc_zone_malloc (malloc_zone_t* zone, nuint size);

		// extern void * malloc_zone_calloc (malloc_zone_t *zone, size_t num_items, size_t size);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* malloc_zone_calloc (malloc_zone_t* zone, nuint num_items, nuint size);

		// extern void * malloc_zone_valloc (malloc_zone_t *zone, size_t size);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* malloc_zone_valloc (malloc_zone_t* zone, nuint size);

		// extern void malloc_zone_free (malloc_zone_t *zone, void *ptr);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void malloc_zone_free (malloc_zone_t* zone, void* ptr);

		// extern void * malloc_zone_realloc (malloc_zone_t *zone, void *ptr, size_t size);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* malloc_zone_realloc (malloc_zone_t* zone, void* ptr, nuint size);

		// extern malloc_zone_t * malloc_zone_from_ptr (const void *ptr);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe malloc_zone_t* malloc_zone_from_ptr (void* ptr);

		// extern size_t malloc_size (const void *ptr);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint malloc_size (void* ptr);

		// extern size_t malloc_good_size (size_t size);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint malloc_good_size (nuint size);

		// extern void * malloc_zone_memalign (malloc_zone_t *zone, size_t alignment, size_t size) __attribute__((availability(ios, introduced=3.0)));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* malloc_zone_memalign (malloc_zone_t* zone, nuint alignment, nuint size);

		// extern unsigned int malloc_zone_batch_malloc (malloc_zone_t *zone, size_t size, void **results, unsigned int num_requested);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe uint malloc_zone_batch_malloc (malloc_zone_t* zone, nuint size, void** results, uint num_requested);

		// extern void malloc_zone_batch_free (malloc_zone_t *zone, void **to_be_freed, unsigned int num);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void malloc_zone_batch_free (malloc_zone_t* zone, void** to_be_freed, uint num);

		// extern malloc_zone_t * malloc_default_purgeable_zone () __attribute__((availability(ios, introduced=3.0)));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe malloc_zone_t* malloc_default_purgeable_zone ();

		// extern void malloc_make_purgeable (void *ptr) __attribute__((availability(ios, introduced=3.0)));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void malloc_make_purgeable (void* ptr);

		// extern int malloc_make_nonpurgeable (void *ptr) __attribute__((availability(ios, introduced=3.0)));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int malloc_make_nonpurgeable (void* ptr);

		// extern void malloc_zone_register (malloc_zone_t *zone);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void malloc_zone_register (malloc_zone_t* zone);

		// extern void malloc_zone_unregister (malloc_zone_t *zone);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void malloc_zone_unregister (malloc_zone_t* zone);

		// extern void malloc_set_zone_name (malloc_zone_t *zone, const char *name);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void malloc_set_zone_name (malloc_zone_t* zone, sbyte* name);

		// extern const char * malloc_get_zone_name (malloc_zone_t *zone);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* malloc_get_zone_name (malloc_zone_t* zone);

		// extern size_t malloc_zone_pressure_relief (malloc_zone_t *zone, size_t goal) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint malloc_zone_pressure_relief (malloc_zone_t* zone, nuint goal);

		// extern void malloc_printf (const char *format, ...);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void malloc_printf (sbyte* format, IntPtr varArgs);

		// extern kern_return_t malloc_get_all_zones (task_t task, memory_reader_t *reader, vm_address_t **addresses, unsigned int *count);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int malloc_get_all_zones (uint task, memory_reader_t reader, UIntPtr** addresses, uint* count);

		// extern void malloc_zone_print_ptr_info (void *ptr);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void malloc_zone_print_ptr_info (void* ptr);

		// extern boolean_t malloc_zone_check (malloc_zone_t *zone);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int malloc_zone_check (malloc_zone_t* zone);

		// extern void malloc_zone_print (malloc_zone_t *zone, boolean_t verbose);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void malloc_zone_print (malloc_zone_t* zone, int verbose);

		// extern void malloc_zone_statistics (malloc_zone_t *zone, malloc_statistics_t *stats);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void malloc_zone_statistics (malloc_zone_t* zone, malloc_statistics_t* stats);

		// extern void malloc_zone_log (malloc_zone_t *zone, void *address);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void malloc_zone_log (malloc_zone_t* zone, void* address);

		// extern struct mstats mstats ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern mstats mstats ();

		// extern boolean_t malloc_zone_enable_discharge_checking (malloc_zone_t *zone) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int malloc_zone_enable_discharge_checking (malloc_zone_t* zone);

		// extern void malloc_zone_disable_discharge_checking (malloc_zone_t *zone) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void malloc_zone_disable_discharge_checking (malloc_zone_t* zone);

		// extern void malloc_zone_discharge (malloc_zone_t *zone, void *memory) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void malloc_zone_discharge (malloc_zone_t* zone, void* memory);

		// extern void malloc_zone_enumerate_discharged_pointers (malloc_zone_t *zone, void (^report_discharged)(void *, void *)) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void malloc_zone_enumerate_discharged_pointers (malloc_zone_t* zone, Action<void*, void*> report_discharged);

		// extern void * _Block_copy (const void *aBlock) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* _Block_copy (void* aBlock);

		// extern void _Block_release (const void *aBlock) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void _Block_release (void* aBlock);

		// extern void _Block_object_assign (void *, const void *, const int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void _Block_object_assign (void*, void*, int);

		// extern void _Block_object_assign (void *, const void *, const int) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void _Block_object_assign (void*, void*, int);

		// extern void _Block_object_dispose (const void *, const int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void _Block_object_dispose (void*, int);

		// extern void _Block_object_dispose (const void *, const int) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void _Block_object_dispose (void*, int);

		// extern int audit (const void *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int audit (void*, int);

		// extern int auditon (int, void *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int auditon (int, void*, int);

		// extern int auditctl (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int auditctl (sbyte*);

		// extern int getauid (au_id_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getauid (uint*);

		// extern int setauid (const au_id_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int setauid (uint*);

		// extern int getaudit_addr (struct auditinfo_addr *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getaudit_addr (auditinfo_addr*, int);

		// extern int setaudit_addr (const struct auditinfo_addr *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int setaudit_addr (auditinfo_addr*, int);

		// extern int getaudit (struct auditinfo *) __attribute__((availability(ios, introduced=2.0, deprecated=6.0)));
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 6, 0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getaudit (auditinfo*);

		// extern int setaudit (const struct auditinfo *) __attribute__((availability(ios, introduced=2.0, deprecated=6.0)));
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 6, 0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int setaudit (auditinfo*);

		// extern mach_port_name_t audit_session_self ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint audit_session_self ();

		// extern au_asid_t audit_session_join (mach_port_name_t port);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int audit_session_join (uint port);

		// extern int audit_session_port (au_asid_t asid, mach_port_name_t *portname);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int audit_session_port (int asid, uint* portname);

		// extern acl_t acl_dup (acl_t acl);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe acl_t* acl_dup (acl_t* acl);

		// extern int acl_free (void *obj_p);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_free (void* obj_p);

		// extern acl_t acl_init (int count);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe acl_t* acl_init (int count);

		// extern int acl_copy_entry (acl_entry_t dest_d, acl_entry_t src_d);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_copy_entry (acl_entry_t* dest_d, acl_entry_t* src_d);

		// extern int acl_create_entry (acl_t *acl_p, acl_entry_t *entry_p);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_create_entry (acl_t** acl_p, acl_entry_t** entry_p);

		// extern int acl_create_entry_np (acl_t *acl_p, acl_entry_t *entry_p, int entry_index);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_create_entry_np (acl_t** acl_p, acl_entry_t** entry_p, int entry_index);

		// extern int acl_delete_entry (acl_t acl, acl_entry_t entry_d);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_delete_entry (acl_t* acl, acl_entry_t* entry_d);

		// extern int acl_get_entry (acl_t acl, int entry_id, acl_entry_t *entry_p);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_get_entry (acl_t* acl, int entry_id, acl_entry_t** entry_p);

		// extern int acl_valid (acl_t acl);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_valid (acl_t* acl);

		// extern int acl_valid_fd_np (int fd, acl_type_t type, acl_t acl);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_valid_fd_np (int fd, acl_type_t type, acl_t* acl);

		// extern int acl_valid_file_np (const char *path, acl_type_t type, acl_t acl);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_valid_file_np (sbyte* path, acl_type_t type, acl_t* acl);

		// extern int acl_valid_link_np (const char *path, acl_type_t type, acl_t acl);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_valid_link_np (sbyte* path, acl_type_t type, acl_t* acl);

		// extern int acl_add_perm (acl_permset_t permset_d, acl_perm_t perm);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_add_perm (acl_permset_t* permset_d, acl_perm_t perm);

		// extern int acl_calc_mask (acl_t *acl_p);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_calc_mask (acl_t** acl_p);

		// extern int acl_clear_perms (acl_permset_t permset_d);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_clear_perms (acl_permset_t* permset_d);

		// extern int acl_delete_perm (acl_permset_t permset_d, acl_perm_t perm);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_delete_perm (acl_permset_t* permset_d, acl_perm_t perm);

		// extern int acl_get_perm_np (acl_permset_t permset_d, acl_perm_t perm);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_get_perm_np (acl_permset_t* permset_d, acl_perm_t perm);

		// extern int acl_get_permset (acl_entry_t entry_d, acl_permset_t *permset_p);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_get_permset (acl_entry_t* entry_d, acl_permset_t** permset_p);

		// extern int acl_set_permset (acl_entry_t entry_d, acl_permset_t permset_d);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_set_permset (acl_entry_t* entry_d, acl_permset_t* permset_d);

		// extern int acl_maximal_permset_mask_np (acl_permset_mask_t *mask_p) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_maximal_permset_mask_np (ulong* mask_p);

		// extern int acl_get_permset_mask_np (acl_entry_t entry_d, acl_permset_mask_t *mask_p) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_get_permset_mask_np (acl_entry_t* entry_d, ulong* mask_p);

		// extern int acl_set_permset_mask_np (acl_entry_t entry_d, acl_permset_mask_t mask) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_set_permset_mask_np (acl_entry_t* entry_d, ulong mask);

		// extern int acl_add_flag_np (acl_flagset_t flagset_d, acl_flag_t flag);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_add_flag_np (acl_flagset_t* flagset_d, acl_flag_t flag);

		// extern int acl_clear_flags_np (acl_flagset_t flagset_d);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_clear_flags_np (acl_flagset_t* flagset_d);

		// extern int acl_delete_flag_np (acl_flagset_t flagset_d, acl_flag_t flag);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_delete_flag_np (acl_flagset_t* flagset_d, acl_flag_t flag);

		// extern int acl_get_flag_np (acl_flagset_t flagset_d, acl_flag_t flag);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_get_flag_np (acl_flagset_t* flagset_d, acl_flag_t flag);

		// extern int acl_get_flagset_np (void *obj_p, acl_flagset_t *flagset_p);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_get_flagset_np (void* obj_p, acl_flagset_t** flagset_p);

		// extern int acl_set_flagset_np (void *obj_p, acl_flagset_t flagset_d);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_set_flagset_np (void* obj_p, acl_flagset_t* flagset_d);

		// extern void * acl_get_qualifier (acl_entry_t entry_d);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* acl_get_qualifier (acl_entry_t* entry_d);

		// extern int acl_get_tag_type (acl_entry_t entry_d, acl_tag_t *tag_type_p);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_get_tag_type (acl_entry_t* entry_d, acl_tag_t* tag_type_p);

		// extern int acl_set_qualifier (acl_entry_t entry_d, const void *tag_qualifier_p);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_set_qualifier (acl_entry_t* entry_d, void* tag_qualifier_p);

		// extern int acl_set_tag_type (acl_entry_t entry_d, acl_tag_t tag_type);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_set_tag_type (acl_entry_t* entry_d, acl_tag_t tag_type);

		// extern int acl_delete_def_file (const char *path_p);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_delete_def_file (sbyte* path_p);

		// extern acl_t acl_get_fd (int fd);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe acl_t* acl_get_fd (int fd);

		// extern acl_t acl_get_fd_np (int fd, acl_type_t type);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe acl_t* acl_get_fd_np (int fd, acl_type_t type);

		// extern acl_t acl_get_file (const char *path_p, acl_type_t type);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe acl_t* acl_get_file (sbyte* path_p, acl_type_t type);

		// extern acl_t acl_get_link_np (const char *path_p, acl_type_t type);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe acl_t* acl_get_link_np (sbyte* path_p, acl_type_t type);

		// extern int acl_set_fd (int fd, acl_t acl);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_set_fd (int fd, acl_t* acl);

		// extern int acl_set_fd_np (int fd, acl_t acl, acl_type_t acl_type);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_set_fd_np (int fd, acl_t* acl, acl_type_t acl_type);

		// extern int acl_set_file (const char *path_p, acl_type_t type, acl_t acl);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_set_file (sbyte* path_p, acl_type_t type, acl_t* acl);

		// extern int acl_set_link_np (const char *path_p, acl_type_t type, acl_t acl);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_set_link_np (sbyte* path_p, acl_type_t type, acl_t* acl);

		// extern ssize_t acl_copy_ext (void *buf_p, acl_t acl, ssize_t size);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint acl_copy_ext (void* buf_p, acl_t* acl, nint size);

		// extern ssize_t acl_copy_ext_native (void *buf_p, acl_t acl, ssize_t size);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint acl_copy_ext_native (void* buf_p, acl_t* acl, nint size);

		// extern acl_t acl_copy_int (const void *buf_p);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe acl_t* acl_copy_int (void* buf_p);

		// extern acl_t acl_copy_int_native (const void *buf_p);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe acl_t* acl_copy_int_native (void* buf_p);

		// extern acl_t acl_from_text (const char *buf_p);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe acl_t* acl_from_text (sbyte* buf_p);

		// extern ssize_t acl_size (acl_t acl);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint acl_size (acl_t* acl);

		// extern char * acl_to_text (acl_t acl, ssize_t *len_p);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* acl_to_text (acl_t* acl, nint* len_p);

		// extern int clonefileat (int, const char *, int, const char *, uint32_t) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int clonefileat (int, sbyte*, int, sbyte*, uint);

		// extern int fclonefileat (int, int, const char *, uint32_t) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fclonefileat (int, int, sbyte*, uint);

		// extern int clonefile (const char *, const char *, uint32_t) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int clonefile (sbyte*, sbyte*, uint);

		// extern int kqueue ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int kqueue ();

		// extern int kevent (int kq, const struct kevent *changelist, int nchanges, struct kevent *eventlist, int nevents, const struct timespec *timeout);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int kevent (int kq, kevent* changelist, int nchanges, kevent* eventlist, int nevents, timespec* timeout);

		// extern int kevent64 (int kq, const struct kevent64_s *changelist, int nchanges, struct kevent64_s *eventlist, int nevents, unsigned int flags, const struct timespec *timeout);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int kevent64 (int kq, kevent64_s* changelist, int nchanges, kevent64_s* eventlist, int nevents, uint flags, timespec* timeout);

		// extern int kdebug_signpost (uint32_t code, uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, uintptr_t arg4) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int kdebug_signpost (uint code, UIntPtr arg1, UIntPtr arg2, UIntPtr arg3, UIntPtr arg4);

		// extern int kdebug_signpost_start (uint32_t code, uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, uintptr_t arg4) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int kdebug_signpost_start (uint code, UIntPtr arg1, UIntPtr arg2, UIntPtr arg3, UIntPtr arg4);

		// extern int kdebug_signpost_end (uint32_t code, uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, uintptr_t arg4) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int kdebug_signpost_end (uint code, UIntPtr arg1, UIntPtr arg2, UIntPtr arg3, UIntPtr arg4);

		// pid_t getlcid (pid_t pid);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int getlcid (int pid);

		// int setlcid (pid_t pid, pid_t lcid);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int setlcid (int pid, int lcid);

		// extern int fhopen (const struct fhandle *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fhopen (fhandle*, int);

		// extern int fstatfs (int, struct statfs *) asm("_fstatfs");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fstatfs (int, statfs*);

		// extern int getfh (const char *, fhandle_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getfh (sbyte*, fhandle_t*);

		// extern int getfsstat (struct statfs *, int, int) asm("_getfsstat");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getfsstat (statfs*, int, int);

		// extern int getmntinfo (struct statfs **, int) asm("_getmntinfo");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getmntinfo (statfs**, int);

		// extern int getmntinfo_r_np (struct statfs **, int) asm("_getmntinfo_r_np") __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getmntinfo_r_np (statfs**, int);

		// extern int mount (const char *, const char *, int, void *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mount (sbyte*, sbyte*, int, void*);

		// extern int fmount (const char *, int, int, void *) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fmount (sbyte*, int, int, void*);

		// extern int statfs (const char *, struct statfs *) asm("_statfs");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int statfs (sbyte*, statfs*);

		// extern int unmount (const char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int unmount (sbyte*, int);

		// extern int getvfsbyname (const char *, struct vfsconf *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getvfsbyname (sbyte*, vfsconf*);

		// int dqhashshift (u_int32_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int dqhashshift (uint);

		// int dqhashshift (u_int32_t size);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int dqhashshift (uint size);

		// extern int quotactl (const char *, int, int, caddr_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int quotactl (sbyte*, int, int, sbyte*);

		// extern void rb_tree_init (rb_tree_t *, const rb_tree_ops_t *) __attribute__((availability(ios, introduced=7.0)));
		[iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void rb_tree_init (rb_tree_t*, rb_tree_ops_t*);

		// extern void * rb_tree_insert_node (rb_tree_t *, void *) __attribute__((availability(ios, introduced=7.0)));
		[iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* rb_tree_insert_node (rb_tree_t*, void*);

		// extern void * rb_tree_find_node (rb_tree_t *, const void *) __attribute__((availability(ios, introduced=7.0)));
		[iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* rb_tree_find_node (rb_tree_t*, void*);

		// extern void * rb_tree_find_node_geq (rb_tree_t *, const void *) __attribute__((availability(ios, introduced=7.0)));
		[iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* rb_tree_find_node_geq (rb_tree_t*, void*);

		// extern void * rb_tree_find_node_leq (rb_tree_t *, const void *) __attribute__((availability(ios, introduced=7.0)));
		[iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* rb_tree_find_node_leq (rb_tree_t*, void*);

		// extern void rb_tree_remove_node (rb_tree_t *, void *) __attribute__((availability(ios, introduced=7.0)));
		[iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void rb_tree_remove_node (rb_tree_t*, void*);

		// extern void * rb_tree_iterate (rb_tree_t *, void *, const unsigned int) __attribute__((availability(ios, introduced=7.0)));
		[iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* rb_tree_iterate (rb_tree_t*, void*, uint);

		// extern size_t rb_tree_count (rb_tree_t *) __attribute__((availability(ios, introduced=7.0)));
		[iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint rb_tree_count (rb_tree_t*);

		// extern int sysctl (int *, u_int, void *, size_t *, void *, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sysctl (int*, uint, void*, nuint*, void*, nuint);

		// extern int sysctlbyname (const char *, void *, size_t *, void *, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sysctlbyname (sbyte*, void*, nuint*, void*, nuint);

		// extern int sysctlnametomib (const char *, int *, size_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sysctlnametomib (sbyte*, int*, nuint*);

		// extern int ftime (struct timeb *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int ftime (timeb*);

		// unsigned short NXSwapShort (unsigned short inv) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ushort NXSwapShort (ushort inv);

		// extern int __builtin_constant_p () __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __builtin_constant_p ();

		// unsigned int NXSwapInt (unsigned int inv) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint NXSwapInt (uint inv);

		// unsigned long NXSwapLong (unsigned long inv) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint NXSwapLong (nuint inv);

		// unsigned long long NXSwapLongLong (unsigned long long inv) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ulong NXSwapLongLong (ulong inv);

		// NXSwappedFloat NXConvertHostFloatToSwapped (float x) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint NXConvertHostFloatToSwapped (float x);

		// float NXConvertSwappedFloatToHost (NXSwappedFloat x) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float NXConvertSwappedFloatToHost (nuint x);

		// NXSwappedDouble NXConvertHostDoubleToSwapped (double x) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ulong NXConvertHostDoubleToSwapped (double x);

		// double NXConvertSwappedDoubleToHost (NXSwappedDouble x) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double NXConvertSwappedDoubleToHost (ulong x);

		// NXSwappedFloat NXSwapFloat (NXSwappedFloat x) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint NXSwapFloat (nuint x);

		// NXSwappedDouble NXSwapDouble (NXSwappedDouble x) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ulong NXSwapDouble (ulong x);

		// enum NXByteOrder NXHostByteOrder ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NXByteOrder NXHostByteOrder ();

		// unsigned short NXSwapBigShortToHost (unsigned short x) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ushort NXSwapBigShortToHost (ushort x);

		// unsigned int NXSwapBigIntToHost (unsigned int x) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint NXSwapBigIntToHost (uint x);

		// unsigned long NXSwapBigLongToHost (unsigned long x) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint NXSwapBigLongToHost (nuint x);

		// unsigned long long NXSwapBigLongLongToHost (unsigned long long x) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ulong NXSwapBigLongLongToHost (ulong x);

		// double NXSwapBigDoubleToHost (NXSwappedDouble x) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double NXSwapBigDoubleToHost (ulong x);

		// float NXSwapBigFloatToHost (NXSwappedFloat x) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float NXSwapBigFloatToHost (nuint x);

		// unsigned short NXSwapHostShortToBig (unsigned short x) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ushort NXSwapHostShortToBig (ushort x);

		// unsigned int NXSwapHostIntToBig (unsigned int x) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint NXSwapHostIntToBig (uint x);

		// unsigned long NXSwapHostLongToBig (unsigned long x) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint NXSwapHostLongToBig (nuint x);

		// unsigned long long NXSwapHostLongLongToBig (unsigned long long x) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ulong NXSwapHostLongLongToBig (ulong x);

		// NXSwappedDouble NXSwapHostDoubleToBig (double x) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ulong NXSwapHostDoubleToBig (double x);

		// NXSwappedFloat NXSwapHostFloatToBig (float x) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint NXSwapHostFloatToBig (float x);

		// unsigned short NXSwapLittleShortToHost (unsigned short x) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ushort NXSwapLittleShortToHost (ushort x);

		// unsigned int NXSwapLittleIntToHost (unsigned int x) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint NXSwapLittleIntToHost (uint x);

		// unsigned long NXSwapLittleLongToHost (unsigned long x) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint NXSwapLittleLongToHost (nuint x);

		// unsigned long long NXSwapLittleLongLongToHost (unsigned long long x) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ulong NXSwapLittleLongLongToHost (ulong x);

		// double NXSwapLittleDoubleToHost (NXSwappedDouble x) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double NXSwapLittleDoubleToHost (ulong x);

		// float NXSwapLittleFloatToHost (NXSwappedFloat x) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float NXSwapLittleFloatToHost (nuint x);

		// unsigned short NXSwapHostShortToLittle (unsigned short x) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ushort NXSwapHostShortToLittle (ushort x);

		// unsigned int NXSwapHostIntToLittle (unsigned int x) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint NXSwapHostIntToLittle (uint x);

		// unsigned long NXSwapHostLongToLittle (unsigned long x) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint NXSwapHostLongToLittle (nuint x);

		// unsigned long long NXSwapHostLongLongToLittle (unsigned long long x) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ulong NXSwapHostLongLongToLittle (ulong x);

		// NXSwappedDouble NXSwapHostDoubleToLittle (double x) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ulong NXSwapHostDoubleToLittle (double x);

		// NXSwappedFloat NXSwapHostFloatToLittle (float x) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint NXSwapHostFloatToLittle (float x);

		// extern const char * _Nonnull sel_getName (SEL _Nonnull sel) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.0)));
		[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* sel_getName (Selector sel);

		// extern SEL _Nonnull sel_registerName (const char * _Nonnull str) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.0)));
		[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe Selector sel_registerName (sbyte* str);

		// extern const char * _Nonnull object_getClassName (id _Nullable obj) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.0)));
		[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* object_getClassName ([NullAllowed] NSObject obj);

		// extern void * _Nullable object_getIndexedIvars (id _Nullable obj) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.0)));
		[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe void* object_getIndexedIvars ([NullAllowed] NSObject obj);

		// extern BOOL sel_isMapped (SEL _Nonnull sel) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.0)));
		[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool sel_isMapped (Selector sel);

		// extern SEL _Nonnull sel_getUid (const char * _Nonnull str) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.0)));
		[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe Selector sel_getUid (sbyte* str);

		// extern id _Nullable object_copy (id _Nullable obj, size_t size) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.0)));
		[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern NSObject object_copy ([NullAllowed] NSObject obj, nuint size);

		// extern id _Nullable object_dispose (id _Nullable obj) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.0)));
		[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern NSObject object_dispose ([NullAllowed] NSObject obj);

		// extern Class _Nullable object_getClass (id _Nullable obj) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern Class object_getClass ([NullAllowed] NSObject obj);

		// extern Class _Nullable object_setClass (id _Nullable obj, Class _Nonnull cls) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern Class object_setClass ([NullAllowed] NSObject obj, Class cls);

		// extern BOOL object_isClass (id _Nullable obj) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
		[Watch (1,0), TV (9,0), Mac (10,10), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool object_isClass ([NullAllowed] NSObject obj);

		// extern id _Nullable object_getIvar (id _Nullable obj, Ivar _Nonnull ivar) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe NSObject object_getIvar ([NullAllowed] NSObject obj, Ivar* ivar);

		// extern void object_setIvar (id _Nullable obj, Ivar _Nonnull ivar, id _Nullable value) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void object_setIvar ([NullAllowed] NSObject obj, Ivar* ivar, [NullAllowed] NSObject value);

		// extern void object_setIvarWithStrongDefault (id _Nullable obj, Ivar _Nonnull ivar, id _Nullable value) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void object_setIvarWithStrongDefault ([NullAllowed] NSObject obj, Ivar* ivar, [NullAllowed] NSObject value);

		// extern Ivar _Nullable object_setInstanceVariable (id _Nullable obj, const char * _Nonnull name, void * _Nullable value) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.0)));
		[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe Ivar* object_setInstanceVariable ([NullAllowed] NSObject obj, sbyte* name, [NullAllowed] void* value);

		// extern Ivar _Nullable object_setInstanceVariableWithStrongDefault (id _Nullable obj, const char * _Nonnull name, void * _Nullable value) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe Ivar* object_setInstanceVariableWithStrongDefault ([NullAllowed] NSObject obj, sbyte* name, [NullAllowed] void* value);

		// extern Ivar _Nullable object_getInstanceVariable (id _Nullable obj, const char * _Nonnull name, void * _Nullable * _Nullable outValue) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.0)));
		[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe Ivar* object_getInstanceVariable ([NullAllowed] NSObject obj, sbyte* name, [NullAllowed] void** outValue);

		// extern id objc_getClass (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe NSObject objc_getClass (sbyte*);

		// extern id objc_getClass (const char * _Nonnull name) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.0)));
		[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe NSObject objc_getClass (sbyte* name);

		// extern id objc_getMetaClass (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe NSObject objc_getMetaClass (sbyte*);

		// extern id objc_getMetaClass (const char * _Nonnull name) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.0)));
		[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe NSObject objc_getMetaClass (sbyte* name);

		// extern Class _Nullable objc_lookUpClass (const char * _Nonnull name) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.0)));
		[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe Class objc_lookUpClass (sbyte* name);

		// extern Class _Nonnull objc_getRequiredClass (const char * _Nonnull name) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.0)));
		[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe Class objc_getRequiredClass (sbyte* name);

		// extern int objc_getClassList (Class  _Nonnull * _Nullable buffer, int bufferCount) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.0)));
		[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int objc_getClassList (out Class buffer, int bufferCount);

		// extern Class  _Nonnull * _Nullable objc_copyClassList (unsigned int * _Nullable outCount) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=3.1))) __attribute__((availability(macos, introduced=10.7)));
		[Watch (1,0), TV (9,0), Mac (10,7), iOS (3,1)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe Class* objc_copyClassList ([NullAllowed] uint* outCount);

		// extern const char * _Nonnull class_getName (Class _Nullable cls) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* class_getName ([NullAllowed] Class cls);

		// extern BOOL class_isMetaClass (Class _Nullable cls) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool class_isMetaClass ([NullAllowed] Class cls);

		// extern Class _Nullable class_getSuperclass (Class _Nullable cls) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern Class class_getSuperclass ([NullAllowed] Class cls);

		// extern Class _Nonnull class_setSuperclass (Class _Nonnull cls, Class _Nonnull newSuper) __attribute__((visibility("default"))) __attribute__((availability(watchos, deprecated=1.0))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, deprecated=9.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, deprecated=10.5))) __attribute__((availability(macos, introduced=10.5)));
		[Deprecated (PlatformName.WatchOS, 1, 0, message: "not recommended")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "not recommended")]
		[Deprecated (PlatformName.iOS, 2, 0, message: "not recommended")]
		[Deprecated (PlatformName.MacOSX, 10, 5, message: "not recommended")]
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern Class class_setSuperclass (Class cls, Class newSuper);

		// extern int class_getVersion (Class _Nullable cls) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.0)));
		[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int class_getVersion ([NullAllowed] Class cls);

		// extern void class_setVersion (Class _Nullable cls, int version) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.0)));
		[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void class_setVersion ([NullAllowed] Class cls, int version);

		// extern size_t class_getInstanceSize (Class _Nullable cls) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint class_getInstanceSize ([NullAllowed] Class cls);

		// extern Ivar _Nullable class_getInstanceVariable (Class _Nullable cls, const char * _Nonnull name) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.0)));
		[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe Ivar* class_getInstanceVariable ([NullAllowed] Class cls, sbyte* name);

		// extern Ivar _Nullable class_getClassVariable (Class _Nullable cls, const char * _Nonnull name) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe Ivar* class_getClassVariable ([NullAllowed] Class cls, sbyte* name);

		// extern Ivar  _Nonnull * _Nullable class_copyIvarList (Class _Nullable cls, unsigned int * _Nullable outCount) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe Ivar** class_copyIvarList ([NullAllowed] Class cls, [NullAllowed] uint* outCount);

		// extern Method _Nullable class_getInstanceMethod (Class _Nullable cls, SEL _Nonnull name) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.0)));
		[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe Method* class_getInstanceMethod ([NullAllowed] Class cls, Selector name);

		// extern Method _Nullable class_getClassMethod (Class _Nullable cls, SEL _Nonnull name) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.0)));
		[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe Method* class_getClassMethod ([NullAllowed] Class cls, Selector name);

		// extern IMP _Nullable class_getMethodImplementation (Class _Nullable cls, SEL _Nonnull name) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe IMP* class_getMethodImplementation ([NullAllowed] Class cls, Selector name);

		// extern BOOL class_respondsToSelector (Class _Nullable cls, SEL _Nonnull sel) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool class_respondsToSelector ([NullAllowed] Class cls, Selector sel);

		// extern Method  _Nonnull * _Nullable class_copyMethodList (Class _Nullable cls, unsigned int * _Nullable outCount) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe Method** class_copyMethodList ([NullAllowed] Class cls, [NullAllowed] uint* outCount);

		// extern BOOL class_conformsToProtocol (Class _Nullable cls, Protocol * _Nullable protocol) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool class_conformsToProtocol ([NullAllowed] Class cls, [NullAllowed] Protocol protocol);

		// extern Protocol * _Nonnull * _Nullable class_copyProtocolList (Class _Nullable cls, unsigned int * _Nullable outCount) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe Protocol* class_copyProtocolList ([NullAllowed] Class cls, [NullAllowed] uint* outCount);

		// extern objc_property_t _Nullable class_getProperty (Class _Nullable cls, const char * _Nonnull name) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe objc_property_t* class_getProperty ([NullAllowed] Class cls, sbyte* name);

		// extern objc_property_t  _Nonnull * _Nullable class_copyPropertyList (Class _Nullable cls, unsigned int * _Nullable outCount) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe objc_property_t** class_copyPropertyList ([NullAllowed] Class cls, [NullAllowed] uint* outCount);

		// extern const uint8_t * _Nullable class_getIvarLayout (Class _Nullable cls) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe byte* class_getIvarLayout ([NullAllowed] Class cls);

		// extern const uint8_t * _Nullable class_getWeakIvarLayout (Class _Nullable cls) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe byte* class_getWeakIvarLayout ([NullAllowed] Class cls);

		// extern BOOL class_addMethod (Class _Nullable cls, SEL _Nonnull name, IMP _Nonnull imp, const char * _Nullable types) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool class_addMethod ([NullAllowed] Class cls, Selector name, IMP* imp, [NullAllowed] sbyte* types);

		// extern IMP _Nullable class_replaceMethod (Class _Nullable cls, SEL _Nonnull name, IMP _Nonnull imp, const char * _Nullable types) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe IMP* class_replaceMethod ([NullAllowed] Class cls, Selector name, IMP* imp, [NullAllowed] sbyte* types);

		// extern BOOL class_addIvar (Class _Nullable cls, const char * _Nonnull name, size_t size, uint8_t alignment, const char * _Nullable types) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool class_addIvar ([NullAllowed] Class cls, sbyte* name, nuint size, byte alignment, [NullAllowed] sbyte* types);

		// extern BOOL class_addProtocol (Class _Nullable cls, Protocol * _Nonnull protocol) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool class_addProtocol ([NullAllowed] Class cls, Protocol protocol);

		// extern BOOL class_addProperty (Class _Nullable cls, const char * _Nonnull name, const objc_property_attribute_t * _Nullable attributes, unsigned int attributeCount) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=4.3))) __attribute__((availability(macos, introduced=10.7)));
		[Watch (1,0), TV (9,0), Mac (10,7), iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool class_addProperty ([NullAllowed] Class cls, sbyte* name, [NullAllowed] objc_property_attribute_t* attributes, uint attributeCount);

		// extern void class_replaceProperty (Class _Nullable cls, const char * _Nonnull name, const objc_property_attribute_t * _Nullable attributes, unsigned int attributeCount) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=4.3))) __attribute__((availability(macos, introduced=10.7)));
		[Watch (1,0), TV (9,0), Mac (10,7), iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void class_replaceProperty ([NullAllowed] Class cls, sbyte* name, [NullAllowed] objc_property_attribute_t* attributes, uint attributeCount);

		// extern void class_setIvarLayout (Class _Nullable cls, const uint8_t * _Nullable layout) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void class_setIvarLayout ([NullAllowed] Class cls, [NullAllowed] byte* layout);

		// extern void class_setWeakIvarLayout (Class _Nullable cls, const uint8_t * _Nullable layout) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void class_setWeakIvarLayout ([NullAllowed] Class cls, [NullAllowed] byte* layout);

		// extern Class _Nonnull objc_getFutureClass (const char * _Nonnull name) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe Class objc_getFutureClass (sbyte* name);

		// extern id _Nullable class_createInstance (Class _Nullable cls, size_t extraBytes) __attribute__((visibility("default"))) __attribute__((ns_returns_retained)) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.0)));
		[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern NSObject class_createInstance ([NullAllowed] Class cls, nuint extraBytes);

		// extern id _Nullable objc_constructInstance (Class _Nullable cls, void * _Nullable bytes) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
		[Watch (1,0), TV (9,0), Mac (10,6), iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe NSObject objc_constructInstance ([NullAllowed] Class cls, [NullAllowed] void* bytes);

		// extern void * _Nullable objc_destructInstance (id _Nullable obj) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
		[Watch (1,0), TV (9,0), Mac (10,6), iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe void* objc_destructInstance ([NullAllowed] NSObject obj);

		// extern Class _Nullable objc_allocateClassPair (Class _Nullable superclass, const char * _Nonnull name, size_t extraBytes) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe Class objc_allocateClassPair ([NullAllowed] Class superclass, sbyte* name, nuint extraBytes);

		// extern void objc_registerClassPair (Class _Nonnull cls) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void objc_registerClassPair (Class cls);

		// extern Class _Nonnull objc_duplicateClass (Class _Nonnull original, const char * _Nonnull name, size_t extraBytes) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe Class objc_duplicateClass (Class original, sbyte* name, nuint extraBytes);

		// extern void objc_disposeClassPair (Class _Nonnull cls) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void objc_disposeClassPair (Class cls);

		// extern SEL _Nonnull method_getName (Method _Nonnull m) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe Selector method_getName (Method* m);

		// extern IMP _Nonnull method_getImplementation (Method _Nonnull m) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe IMP* method_getImplementation (Method* m);

		// extern const char * _Nullable method_getTypeEncoding (Method _Nonnull m) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe sbyte* method_getTypeEncoding (Method* m);

		// extern unsigned int method_getNumberOfArguments (Method _Nonnull m) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.0)));
		[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe uint method_getNumberOfArguments (Method* m);

		// extern char * _Nonnull method_copyReturnType (Method _Nonnull m) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* method_copyReturnType (Method* m);

		// extern char * _Nullable method_copyArgumentType (Method _Nonnull m, unsigned int index) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe sbyte* method_copyArgumentType (Method* m, uint index);

		// extern void method_getReturnType (Method _Nonnull m, char * _Nonnull dst, size_t dst_len) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void method_getReturnType (Method* m, sbyte* dst, nuint dst_len);

		// extern void method_getArgumentType (Method _Nonnull m, unsigned int index, char * _Nullable dst, size_t dst_len) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void method_getArgumentType (Method* m, uint index, [NullAllowed] sbyte* dst, nuint dst_len);

		// extern struct objc_method_description * _Nonnull method_getDescription (Method _Nonnull m) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe objc_method_description* method_getDescription (Method* m);

		// extern IMP _Nonnull method_setImplementation (Method _Nonnull m, IMP _Nonnull imp) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe IMP* method_setImplementation (Method* m, IMP* imp);

		// extern void method_exchangeImplementations (Method _Nonnull m1, Method _Nonnull m2) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void method_exchangeImplementations (Method* m1, Method* m2);

		// extern const char * _Nullable ivar_getName (Ivar _Nonnull v) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe sbyte* ivar_getName (Ivar* v);

		// extern const char * _Nullable ivar_getTypeEncoding (Ivar _Nonnull v) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe sbyte* ivar_getTypeEncoding (Ivar* v);

		// extern ptrdiff_t ivar_getOffset (Ivar _Nonnull v) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe IntPtr ivar_getOffset (Ivar* v);

		// extern const char * _Nonnull property_getName (objc_property_t _Nonnull property) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* property_getName (objc_property_t* property);

		// extern const char * _Nullable property_getAttributes (objc_property_t _Nonnull property) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe sbyte* property_getAttributes (objc_property_t* property);

		// extern objc_property_attribute_t * _Nullable property_copyAttributeList (objc_property_t _Nonnull property, unsigned int * _Nullable outCount) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=4.3))) __attribute__((availability(macos, introduced=10.7)));
		[Watch (1,0), TV (9,0), Mac (10,7), iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe objc_property_attribute_t* property_copyAttributeList (objc_property_t* property, [NullAllowed] uint* outCount);

		// extern char * _Nullable property_copyAttributeValue (objc_property_t _Nonnull property, const char * _Nonnull attributeName) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=4.3))) __attribute__((availability(macos, introduced=10.7)));
		[Watch (1,0), TV (9,0), Mac (10,7), iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe sbyte* property_copyAttributeValue (objc_property_t* property, sbyte* attributeName);

		// extern Protocol * _Nullable objc_getProtocol (const char * _Nonnull name) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe Protocol objc_getProtocol (sbyte* name);

		// extern Protocol * _Nonnull * _Nullable objc_copyProtocolList (unsigned int * _Nullable outCount) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe Protocol* objc_copyProtocolList ([NullAllowed] uint* outCount);

		// extern BOOL protocol_conformsToProtocol (Protocol * _Nullable proto, Protocol * _Nullable other) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool protocol_conformsToProtocol ([NullAllowed] Protocol proto, [NullAllowed] Protocol other);

		// extern BOOL protocol_isEqual (Protocol * _Nullable proto, Protocol * _Nullable other) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool protocol_isEqual ([NullAllowed] Protocol proto, [NullAllowed] Protocol other);

		// extern const char * _Nonnull protocol_getName (Protocol * _Nonnull proto) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* protocol_getName (Protocol proto);

		// extern struct objc_method_description protocol_getMethodDescription (Protocol * _Nonnull proto, SEL _Nonnull aSel, BOOL isRequiredMethod, BOOL isInstanceMethod) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern objc_method_description protocol_getMethodDescription (Protocol proto, Selector aSel, bool isRequiredMethod, bool isInstanceMethod);

		// extern struct objc_method_description * _Nullable protocol_copyMethodDescriptionList (Protocol * _Nonnull proto, BOOL isRequiredMethod, BOOL isInstanceMethod, unsigned int * _Nullable outCount) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe objc_method_description* protocol_copyMethodDescriptionList (Protocol proto, bool isRequiredMethod, bool isInstanceMethod, [NullAllowed] uint* outCount);

		// extern objc_property_t _Nullable protocol_getProperty (Protocol * _Nonnull proto, const char * _Nonnull name, BOOL isRequiredProperty, BOOL isInstanceProperty) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe objc_property_t* protocol_getProperty (Protocol proto, sbyte* name, bool isRequiredProperty, bool isInstanceProperty);

		// extern objc_property_t  _Nonnull * _Nullable protocol_copyPropertyList (Protocol * _Nonnull proto, unsigned int * _Nullable outCount) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe objc_property_t** protocol_copyPropertyList (Protocol proto, [NullAllowed] uint* outCount);

		// extern objc_property_t  _Nonnull * _Nullable protocol_copyPropertyList2 (Protocol * _Nonnull proto, unsigned int * _Nullable outCount, BOOL isRequiredProperty, BOOL isInstanceProperty) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe objc_property_t** protocol_copyPropertyList2 (Protocol proto, [NullAllowed] uint* outCount, bool isRequiredProperty, bool isInstanceProperty);

		// extern Protocol * _Nonnull * _Nullable protocol_copyProtocolList (Protocol * _Nonnull proto, unsigned int * _Nullable outCount) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe Protocol* protocol_copyProtocolList (Protocol proto, [NullAllowed] uint* outCount);

		// extern Protocol * _Nullable objc_allocateProtocol (const char * _Nonnull name) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=4.3))) __attribute__((availability(macos, introduced=10.7)));
		[Watch (1,0), TV (9,0), Mac (10,7), iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe Protocol objc_allocateProtocol (sbyte* name);

		// extern void objc_registerProtocol (Protocol * _Nonnull proto) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=4.3))) __attribute__((availability(macos, introduced=10.7)));
		[Watch (1,0), TV (9,0), Mac (10,7), iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void objc_registerProtocol (Protocol proto);

		// extern void protocol_addMethodDescription (Protocol * _Nonnull proto, SEL _Nonnull name, const char * _Nullable types, BOOL isRequiredMethod, BOOL isInstanceMethod) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=4.3))) __attribute__((availability(macos, introduced=10.7)));
		[Watch (1,0), TV (9,0), Mac (10,7), iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void protocol_addMethodDescription (Protocol proto, Selector name, [NullAllowed] sbyte* types, bool isRequiredMethod, bool isInstanceMethod);

		// extern void protocol_addProtocol (Protocol * _Nonnull proto, Protocol * _Nonnull addition) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=4.3))) __attribute__((availability(macos, introduced=10.7)));
		[Watch (1,0), TV (9,0), Mac (10,7), iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void protocol_addProtocol (Protocol proto, Protocol addition);

		// extern void protocol_addProperty (Protocol * _Nonnull proto, const char * _Nonnull name, const objc_property_attribute_t * _Nullable attributes, unsigned int attributeCount, BOOL isRequiredProperty, BOOL isInstanceProperty) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=4.3))) __attribute__((availability(macos, introduced=10.7)));
		[Watch (1,0), TV (9,0), Mac (10,7), iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void protocol_addProperty (Protocol proto, sbyte* name, [NullAllowed] objc_property_attribute_t* attributes, uint attributeCount, bool isRequiredProperty, bool isInstanceProperty);

		// extern const char * _Nonnull * _Nonnull objc_copyImageNames (unsigned int * _Nullable outCount) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte** objc_copyImageNames ([NullAllowed] uint* outCount);

		// extern const char * _Nullable class_getImageName (Class _Nullable cls) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe sbyte* class_getImageName ([NullAllowed] Class cls);

		// extern const char * _Nonnull * _Nullable objc_copyClassNamesForImage (const char * _Nonnull image, unsigned int * _Nullable outCount) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte** objc_copyClassNamesForImage (sbyte* image, [NullAllowed] uint* outCount);

		// extern const char * _Nonnull sel_getName (SEL _Nonnull sel) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.0)));
		[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* sel_getName (Selector sel);

		// extern SEL _Nonnull sel_registerName (const char * _Nonnull str) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.0)));
		[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe Selector sel_registerName (sbyte* str);

		// extern BOOL sel_isEqual (SEL _Nonnull lhs, SEL _Nonnull rhs) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool sel_isEqual (Selector lhs, Selector rhs);

		// extern void objc_enumerationMutation (id);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void objc_enumerationMutation (NSObject);

		// extern void objc_enumerationMutation (id _Nonnull obj) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void objc_enumerationMutation (NSObject obj);

		// extern void objc_setEnumerationMutationHandler (void (* _Nullable)(id _Nonnull) handler) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void objc_setEnumerationMutationHandler ([NullAllowed] Action<NSObject>* handler);

		// extern void objc_setForwardHandler (void * _Nonnull fwd, void * _Nonnull fwd_stret) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void objc_setForwardHandler (void* fwd, void* fwd_stret);

		// extern IMP _Nonnull imp_implementationWithBlock (id _Nonnull block) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=4.3))) __attribute__((availability(macos, introduced=10.7)));
		[Watch (1,0), TV (9,0), Mac (10,7), iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe IMP* imp_implementationWithBlock (NSObject block);

		// extern id _Nullable imp_getBlock (IMP _Nonnull anImp) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=4.3))) __attribute__((availability(macos, introduced=10.7)));
		[Watch (1,0), TV (9,0), Mac (10,7), iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe NSObject imp_getBlock (IMP* anImp);

		// extern BOOL imp_removeBlock (IMP _Nonnull anImp) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=4.3))) __attribute__((availability(macos, introduced=10.7)));
		[Watch (1,0), TV (9,0), Mac (10,7), iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool imp_removeBlock (IMP* anImp);

		// extern id _Nullable objc_loadWeak (id  _Nullable * _Nonnull location) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
		[Watch (1,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern NSObject objc_loadWeak ([NullAllowed] out NSObject location);

		// extern id _Nullable objc_storeWeak (id  _Nullable * _Nonnull location, id _Nullable obj) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
		[Watch (1,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern NSObject objc_storeWeak ([NullAllowed] out NSObject location, [NullAllowed] NSObject obj);

		// extern void objc_setAssociatedObject (id _Nonnull object, const void * _Nonnull key, id _Nullable value, objc_AssociationPolicy policy) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=3.1))) __attribute__((availability(macos, introduced=10.6)));
		[Watch (1,0), TV (9,0), Mac (10,6), iOS (3,1)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void objc_setAssociatedObject (NSObject @object, void* key, [NullAllowed] NSObject value, objc_AssociationPolicy policy);

		// extern id _Nullable objc_getAssociatedObject (id _Nonnull object, const void * _Nonnull key) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=3.1))) __attribute__((availability(macos, introduced=10.6)));
		[Watch (1,0), TV (9,0), Mac (10,6), iOS (3,1)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe NSObject objc_getAssociatedObject (NSObject @object, void* key);

		// extern void objc_removeAssociatedObjects (id _Nonnull object) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=3.1))) __attribute__((availability(macos, introduced=10.6)));
		[Watch (1,0), TV (9,0), Mac (10,6), iOS (3,1)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void objc_removeAssociatedObjects (NSObject @object);

		// extern IMP _Nullable class_lookupMethod (Class _Nullable cls, SEL _Nonnull sel) __attribute__((visibility("default"))) __attribute__((availability(watchos, deprecated=1.0))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, deprecated=9.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, deprecated=10.5))) __attribute__((availability(macos, introduced=10.0)));
		[Deprecated (PlatformName.WatchOS, 1, 0, message: "use class_getMethodImplementation instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "use class_getMethodImplementation instead")]
		[Deprecated (PlatformName.iOS, 2, 0, message: "use class_getMethodImplementation instead")]
		[Deprecated (PlatformName.MacOSX, 10, 5, message: "use class_getMethodImplementation instead")]
		[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe IMP* class_lookupMethod ([NullAllowed] Class cls, Selector sel);

		// extern BOOL class_respondsToMethod (Class _Nullable cls, SEL _Nonnull sel) __attribute__((visibility("default"))) __attribute__((availability(watchos, deprecated=1.0))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, deprecated=9.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, deprecated=10.5))) __attribute__((availability(macos, introduced=10.0)));
		[Deprecated (PlatformName.WatchOS, 1, 0, message: "use class_respondsToSelector instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "use class_respondsToSelector instead")]
		[Deprecated (PlatformName.iOS, 2, 0, message: "use class_respondsToSelector instead")]
		[Deprecated (PlatformName.MacOSX, 10, 5, message: "use class_respondsToSelector instead")]
		[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool class_respondsToMethod ([NullAllowed] Class cls, Selector sel);

		// extern void _objc_flush_caches (Class _Nullable cls) __attribute__((visibility("default"))) __attribute__((availability(watchos, deprecated=1.0))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, deprecated=9.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, deprecated=10.5))) __attribute__((availability(macos, introduced=10.0)));
		[Deprecated (PlatformName.WatchOS, 1, 0, message: "not recommended")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "not recommended")]
		[Deprecated (PlatformName.iOS, 2, 0, message: "not recommended")]
		[Deprecated (PlatformName.MacOSX, 10, 5, message: "not recommended")]
		[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void _objc_flush_caches ([NullAllowed] Class cls);

		// extern id _Nullable object_copyFromZone (id _Nullable anObject, size_t nBytes, void * _Nullable z) __attribute__((visibility("default"))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, deprecated=10.5))) __attribute__((availability(macos, introduced=10.0)));
		[Deprecated (PlatformName.MacOSX, 10, 5, message: "use object_copy instead")]
		[NoWatch, NoTV, NoiOS, Mac (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe NSObject object_copyFromZone ([NullAllowed] NSObject anObject, nuint nBytes, [NullAllowed] void* z);

		// extern id _Nullable class_createInstanceFromZone (Class _Nullable, size_t idxIvars, void * _Nullable z) __attribute__((visibility("default"))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, deprecated=10.5))) __attribute__((availability(macos, introduced=10.0)));
		[Deprecated (PlatformName.MacOSX, 10, 5, message: "use class_createInstance instead")]
		[NoWatch, NoTV, NoiOS, Mac (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe NSObject class_createInstanceFromZone ([NullAllowed] Class, nuint idxIvars, [NullAllowed] void* z);

		// extern id objc_msgSend (id, SEL, ...);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSObject objc_msgSend (NSObject, Selector, IntPtr varArgs);

		// extern id objc_msgSend (id _Nullable self, SEL _Nonnull op, ...) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.0)));
		[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSObject objc_msgSend ([NullAllowed] NSObject self, Selector op, IntPtr varArgs);

		// extern id objc_msgSendSuper (struct objc_super *, SEL, ...);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe NSObject objc_msgSendSuper (objc_super*, Selector, IntPtr varArgs);

		// extern id objc_msgSendSuper (struct objc_super * _Nonnull super, SEL _Nonnull op, ...) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.0)));
		[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe NSObject objc_msgSendSuper (objc_super* super, Selector op, IntPtr varArgs);

		// extern void objc_msgSend_stret (id, SEL, ...);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void objc_msgSend_stret (NSObject, Selector, IntPtr varArgs);

		// extern void objc_msgSendSuper_stret (struct objc_super *, SEL, ...);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void objc_msgSendSuper_stret (objc_super*, Selector, IntPtr varArgs);

		// extern id _Nullable method_invoke (id _Nullable receiver, Method _Nonnull m, ...) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe NSObject method_invoke ([NullAllowed] NSObject receiver, Method* m, IntPtr varArgs);

		// extern id _Nullable _objc_msgForward (id _Nonnull receiver, SEL _Nonnull sel, ...) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.0)));
		[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern NSObject _objc_msgForward (NSObject receiver, Selector sel, IntPtr varArgs);

		// void objc_collect (unsigned long options) __attribute__((deprecated("it does nothing. Define OBJC_SILENCE_GC_DEPRECATIONS=1 to temporarily silence this diagnostic.")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void objc_collect (nuint options);

		// BOOL objc_collectingEnabled () __attribute__((deprecated("it always returns NO. Define OBJC_SILENCE_GC_DEPRECATIONS=1 to temporarily silence this diagnostic.")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool objc_collectingEnabled ();

		// void objc_setCollectionThreshold (size_t threshold) __attribute__((deprecated("it does nothing. Define OBJC_SILENCE_GC_DEPRECATIONS=1 to temporarily silence this diagnostic.")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void objc_setCollectionThreshold (nuint threshold);

		// void objc_setCollectionRatio (size_t ratio) __attribute__((deprecated("it does nothing. Define OBJC_SILENCE_GC_DEPRECATIONS=1 to temporarily silence this diagnostic.")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void objc_setCollectionRatio (nuint ratio);

		// void objc_startCollectorThread () __attribute__((deprecated("it does nothing. Define OBJC_SILENCE_GC_DEPRECATIONS=1 to temporarily silence this diagnostic.")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void objc_startCollectorThread ();

		// BOOL objc_atomicCompareAndSwapPtr (id predicate, id replacement, volatile id *objectLocation) __attribute__((deprecated("use OSAtomicCompareAndSwapPtr instead. Define OBJC_SILENCE_GC_DEPRECATIONS=1 to temporarily silence this diagnostic.")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool objc_atomicCompareAndSwapPtr (NSObject predicate, NSObject replacement, out NSObject objectLocation);

		// BOOL objc_atomicCompareAndSwapPtrBarrier (id predicate, id replacement, volatile id *objectLocation) __attribute__((deprecated("use OSAtomicCompareAndSwapPtrBarrier instead. Define OBJC_SILENCE_GC_DEPRECATIONS=1 to temporarily silence this diagnostic.")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool objc_atomicCompareAndSwapPtrBarrier (NSObject predicate, NSObject replacement, out NSObject objectLocation);

		// BOOL objc_atomicCompareAndSwapGlobal (id predicate, id replacement, volatile id *objectLocation) __attribute__((deprecated("use OSAtomicCompareAndSwapPtr instead. Define OBJC_SILENCE_GC_DEPRECATIONS=1 to temporarily silence this diagnostic.")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool objc_atomicCompareAndSwapGlobal (NSObject predicate, NSObject replacement, out NSObject objectLocation);

		// BOOL objc_atomicCompareAndSwapGlobalBarrier (id predicate, id replacement, volatile id *objectLocation) __attribute__((deprecated("use OSAtomicCompareAndSwapPtrBarrier instead. Define OBJC_SILENCE_GC_DEPRECATIONS=1 to temporarily silence this diagnostic.")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool objc_atomicCompareAndSwapGlobalBarrier (NSObject predicate, NSObject replacement, out NSObject objectLocation);

		// BOOL objc_atomicCompareAndSwapInstanceVariable (id predicate, id replacement, volatile id *objectLocation) __attribute__((deprecated("use OSAtomicCompareAndSwapPtr instead. Define OBJC_SILENCE_GC_DEPRECATIONS=1 to temporarily silence this diagnostic.")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool objc_atomicCompareAndSwapInstanceVariable (NSObject predicate, NSObject replacement, out NSObject objectLocation);

		// BOOL objc_atomicCompareAndSwapInstanceVariableBarrier (id predicate, id replacement, volatile id *objectLocation) __attribute__((deprecated("use OSAtomicCompareAndSwapPtrBarrier instead. Define OBJC_SILENCE_GC_DEPRECATIONS=1 to temporarily silence this diagnostic.")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool objc_atomicCompareAndSwapInstanceVariableBarrier (NSObject predicate, NSObject replacement, out NSObject objectLocation);

		// id objc_assign_strongCast (id val, id *dest) __attribute__((deprecated("use a simple assignment instead. Define OBJC_SILENCE_GC_DEPRECATIONS=1 to temporarily silence this diagnostic.")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSObject objc_assign_strongCast (NSObject val, out NSObject dest);

		// id objc_assign_global (id val, id *dest) __attribute__((deprecated("use a simple assignment instead. Define OBJC_SILENCE_GC_DEPRECATIONS=1 to temporarily silence this diagnostic.")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSObject objc_assign_global (NSObject val, out NSObject dest);

		// id objc_assign_threadlocal (id val, id *dest) __attribute__((deprecated("use a simple assignment instead. Define OBJC_SILENCE_GC_DEPRECATIONS=1 to temporarily silence this diagnostic.")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSObject objc_assign_threadlocal (NSObject val, out NSObject dest);

		// id objc_assign_ivar (id val, id dest, ptrdiff_t offset) __attribute__((deprecated("use a simple assignment instead. Define OBJC_SILENCE_GC_DEPRECATIONS=1 to temporarily silence this diagnostic.")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSObject objc_assign_ivar (NSObject val, NSObject dest, IntPtr offset);

		// id objc_read_weak (id *location) __attribute__((deprecated("use a simple read instead, or convert to zeroing __weak. Define OBJC_SILENCE_GC_DEPRECATIONS=1 to temporarily silence this diagnostic.")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSObject objc_read_weak (out NSObject location);

		// id objc_assign_weak (id value, id *location) __attribute__((deprecated("use a simple assignment instead, or convert to zeroing __weak. Define OBJC_SILENCE_GC_DEPRECATIONS=1 to temporarily silence this diagnostic.")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSObject objc_assign_weak (NSObject value, out NSObject location);

		// void * objc_memmove_collectable (void *dst, const void *src, size_t size) __attribute__((deprecated("use memmove instead. Define OBJC_SILENCE_GC_DEPRECATIONS=1 to temporarily silence this diagnostic.")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* objc_memmove_collectable (void* dst, void* src, nuint size);

		// extern void * __builtin___memmove_chk (void *, const void *, unsigned long, unsigned long) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* __builtin___memmove_chk (void*, void*, nuint, nuint);

		// extern unsigned long __builtin_object_size (const void *, int) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint __builtin_object_size (void*, int);

		// void objc_finalizeOnMainThread (Class cls) __attribute__((deprecated("it does nothing. Define OBJC_SILENCE_GC_DEPRECATIONS=1 to temporarily silence this diagnostic.")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void objc_finalizeOnMainThread (Class cls);

		// BOOL objc_is_finalized (void *ptr) __attribute__((deprecated("it always returns NO. Define OBJC_SILENCE_GC_DEPRECATIONS=1 to temporarily silence this diagnostic.")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool objc_is_finalized (void* ptr);

		// void objc_clear_stack (unsigned long options) __attribute__((deprecated("it does nothing. Define OBJC_SILENCE_GC_DEPRECATIONS=1 to temporarily silence this diagnostic.")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void objc_clear_stack (nuint options);

		// BOOL objc_collecting_enabled () __attribute__((deprecated("it always returns NO. Define OBJC_SILENCE_GC_DEPRECATIONS=1 to temporarily silence this diagnostic.")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool objc_collecting_enabled ();

		// void objc_set_collection_threshold (size_t threshold) __attribute__((deprecated("it does nothing. Define OBJC_SILENCE_GC_DEPRECATIONS=1 to temporarily silence this diagnostic.")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void objc_set_collection_threshold (nuint threshold);

		// void objc_set_collection_ratio (size_t ratio) __attribute__((deprecated("it does nothing. Define OBJC_SILENCE_GC_DEPRECATIONS=1 to temporarily silence this diagnostic.")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void objc_set_collection_ratio (nuint ratio);

		// void objc_start_collector_thread () __attribute__((deprecated("it does nothing. Define OBJC_SILENCE_GC_DEPRECATIONS=1 to temporarily silence this diagnostic.")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void objc_start_collector_thread ();

		// extern id _Nullable class_createInstance (Class _Nullable cls, size_t extraBytes) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.0))) __attribute__((ns_returns_retained));
		[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern NSObject class_createInstance ([NullAllowed] Class cls, nuint extraBytes);

		// id objc_allocate_object (Class cls, int extra) __attribute__((deprecated("use class_createInstance instead. Define OBJC_SILENCE_GC_DEPRECATIONS=1 to temporarily silence this diagnostic.")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSObject objc_allocate_object (Class cls, int extra);

		// void objc_registerThreadWithCollector () __attribute__((deprecated("it does nothing. Define OBJC_SILENCE_GC_DEPRECATIONS=1 to temporarily silence this diagnostic.")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void objc_registerThreadWithCollector ();

		// void objc_unregisterThreadWithCollector () __attribute__((deprecated("it does nothing. Define OBJC_SILENCE_GC_DEPRECATIONS=1 to temporarily silence this diagnostic.")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void objc_unregisterThreadWithCollector ();

		// void objc_assertRegisteredThreadWithCollector () __attribute__((deprecated("it does nothing. Define OBJC_SILENCE_GC_DEPRECATIONS=1 to temporarily silence this diagnostic.")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void objc_assertRegisteredThreadWithCollector ();

		// extern void objc_exception_throw (id);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void objc_exception_throw (NSObject);

		// extern void objc_exception_throw (id _Nonnull exception) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void objc_exception_throw (NSObject exception);

		// extern void objc_exception_rethrow () __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void objc_exception_rethrow ();

		// extern id _Nonnull objc_begin_catch (void * _Nonnull exc_buf) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe NSObject objc_begin_catch (void* exc_buf);

		// extern void objc_end_catch () __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void objc_end_catch ();

		// extern void objc_terminate () __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
		[Watch (1,0), TV (9,0), Mac (10,8), iOS (6,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void objc_terminate ();

		// extern objc_exception_preprocessor _Nonnull objc_setExceptionPreprocessor (objc_exception_preprocessor _Nonnull fn) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe objc_exception_preprocessor* objc_setExceptionPreprocessor (objc_exception_preprocessor* fn);

		// extern objc_exception_matcher _Nonnull objc_setExceptionMatcher (objc_exception_matcher _Nonnull fn) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe objc_exception_matcher* objc_setExceptionMatcher (objc_exception_matcher* fn);

		// extern objc_uncaught_exception_handler _Nonnull objc_setUncaughtExceptionHandler (objc_uncaught_exception_handler _Nonnull fn) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe objc_uncaught_exception_handler* objc_setUncaughtExceptionHandler (objc_uncaught_exception_handler* fn);

		// extern uintptr_t objc_addExceptionHandler (objc_exception_handler _Nonnull fn, void * _Nullable context) __attribute__((visibility("default"))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.5)));
		[NoWatch, NoTV, NoiOS, Mac (10,5)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe UIntPtr objc_addExceptionHandler (objc_exception_handler* fn, [NullAllowed] void* context);

		// extern void objc_removeExceptionHandler (uintptr_t token) __attribute__((visibility("default"))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.5)));
		[NoWatch, NoTV, NoiOS, Mac (10,5)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void objc_removeExceptionHandler (UIntPtr token);

		// extern int objc_sync_enter (id);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int objc_sync_enter (NSObject);

		// extern int objc_sync_enter (id _Nonnull obj) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.3)));
		[Watch (1,0), TV (9,0), Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int objc_sync_enter (NSObject obj);

		// extern int objc_sync_exit (id);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int objc_sync_exit (NSObject);

		// extern int objc_sync_exit (id _Nonnull obj) __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.3)));
		[Watch (1,0), TV (9,0), Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int objc_sync_exit (NSObject obj);
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct mbstate_t
	{
		[FieldOffset (0)]
		public sbyte[] __mbstate8;

		[FieldOffset (0)]
		public long _mbstateL;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __darwin_pthread_handler_rec
	{
		public unsafe Action<void*>* __routine;

		public unsafe void* __arg;

		public unsafe __darwin_pthread_handler_rec* __next;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct pthread_attr_t
	{
		public nint __sig;

		public sbyte[] __opaque;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct pthread_cond_t
	{
		public nint __sig;

		public sbyte[] __opaque;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct pthread_condattr_t
	{
		public nint __sig;

		public sbyte[] __opaque;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct pthread_mutex_t
	{
		public nint __sig;

		public sbyte[] __opaque;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct pthread_mutexattr_t
	{
		public nint __sig;

		public sbyte[] __opaque;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct pthread_once_t
	{
		public nint __sig;

		public sbyte[] __opaque;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct pthread_rwlock_t
	{
		public nint __sig;

		public sbyte[] __opaque;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct pthread_rwlockattr_t
	{
		public nint __sig;

		public sbyte[] __opaque;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct _opaque_pthread_t
	{
		public nint __sig;

		public unsafe __darwin_pthread_handler_rec* __cleanup_stack;

		public sbyte[] __opaque;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct _RuneEntry
	{
		public int __min;

		public int __max;

		public int __map;

		public unsafe uint* __types;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct _RuneRange
	{
		public int __nranges;

		public unsafe _RuneEntry* __ranges;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct _RuneCharClass
	{
		public sbyte[] __name;

		public uint __mask;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct _RuneLocale
	{
		public sbyte[] __magic;

		public sbyte[] __encoding;

		public unsafe Func<sbyte*, nuint, sbyte**, int>* __sgetrune;

		public unsafe Func<int, sbyte*, nuint, sbyte**, int>* __sputrune;

		public int __invalid_rune;

		public uint[] __runetype;

		public int[] __maplower;

		public int[] __mapupper;

		public _RuneRange __runetype_ext;

		public _RuneRange __maplower_ext;

		public _RuneRange __mapupper_ext;

		public unsafe void* __variable;

		public int __variable_len;

		public int __ncharclasses;

		public unsafe _RuneCharClass* __charclasses;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct fenv_t
	{
		public ulong __fpsr;

		public ulong __fpcr;
	}

	[Verify (InferredFromMemberPrefix)]
	public enum __fpcr_ : uint
	{
		trap_invalid = 256,
		trap_divbyzero = 512,
		trap_overflow = 1024,
		trap_underflow = 2048,
		trap_inexact = 4096,
		trap_denormal = 32768,
		flush_to_zero = 16777216
	}

	public enum  : uint
	{
		__fpsr_saturation = 134217728
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct imaxdiv_t
	{
		public nint quot;

		public nint rem;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct lconv
	{
		public unsafe sbyte* decimal_point;

		public unsafe sbyte* thousands_sep;

		public unsafe sbyte* grouping;

		public unsafe sbyte* int_curr_symbol;

		public unsafe sbyte* currency_symbol;

		public unsafe sbyte* mon_decimal_point;

		public unsafe sbyte* mon_thousands_sep;

		public unsafe sbyte* mon_grouping;

		public unsafe sbyte* positive_sign;

		public unsafe sbyte* negative_sign;

		public sbyte int_frac_digits;

		public sbyte frac_digits;

		public sbyte p_cs_precedes;

		public sbyte p_sep_by_space;

		public sbyte n_cs_precedes;

		public sbyte n_sep_by_space;

		public sbyte p_sign_posn;

		public sbyte n_sign_posn;

		public sbyte int_p_cs_precedes;

		public sbyte int_n_cs_precedes;

		public sbyte int_p_sep_by_space;

		public sbyte int_n_sep_by_space;

		public sbyte int_p_sign_posn;

		public sbyte int_n_sign_posn;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct 
	{
		[FieldOffset (0)]
		public float __f;

		[FieldOffset (0)]
		public uint __u;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct 
	{
		[FieldOffset (0)]
		public double __f;

		[FieldOffset (0)]
		public ulong __u;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct 
	{
		[FieldOffset (0)]
		public [unsupported Builtin: long double] __f;

		[FieldOffset (0)]
		public ulong __u;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __float2
	{
		public float __sinval;

		public float __cosval;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __double2
	{
		public double __sinval;

		public double __cosval;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct exception
	{
		public int type;

		public unsafe sbyte* name;

		public double arg1;

		public double arg2;

		public double retval;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct arm_exception_state32_t
	{
		public uint __exception;

		public uint __fsr;

		public uint __far;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct arm_exception_state64_t
	{
		public ulong __far;

		public uint __esr;

		public uint __exception;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct arm_thread_state32_t
	{
		public uint[] __r;

		public uint __sp;

		public uint __lr;

		public uint __pc;

		public uint __cpsr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct arm_thread_state64_t
	{
		public ulong[] __x;

		public ulong __fp;

		public ulong __lr;

		public ulong __sp;

		public ulong __pc;

		public uint __cpsr;

		public uint __pad;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct arm_vfp_state_t
	{
		public uint[] __r;

		public uint __fpscr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct arm_neon_state64_t
	{
		public [unsupported Builtin: unsigned __int128][] __v;

		public uint __fpsr;

		public uint __fpcr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct arm_neon_state32_t
	{
		public [unsupported Builtin: unsigned __int128][] __v;

		public uint __fpsr;

		public uint __fpcr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct arm_debug_state_t
	{
		public uint[] __bvr;

		public uint[] __bcr;

		public uint[] __wvr;

		public uint[] __wcr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct arm_debug_state32_t
	{
		public uint[] __bvr;

		public uint[] __bcr;

		public uint[] __wvr;

		public uint[] __wcr;

		public ulong __mdscr_el1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct arm_debug_state64_t
	{
		public ulong[] __bvr;

		public ulong[] __bcr;

		public ulong[] __wvr;

		public ulong[] __wcr;

		public ulong __mdscr_el1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __darwin_arm_cpmu_state64
	{
		public ulong[] __ctrs;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __darwin_mcontext32
	{
		public __darwin_arm_exception_state __es;

		public __darwin_arm_thread_state __ss;

		public __darwin_arm_vfp_state __fs;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __darwin_mcontext64
	{
		public __darwin_arm_exception_state64 __es;

		public __darwin_arm_thread_state64 __ss;

		public __darwin_arm_neon_state64 __ns;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct stack_t
	{
		public unsafe void* ss_sp;

		public nuint ss_size;

		public int ss_flags;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ucontext_t
	{
		public int uc_onstack;

		public uint uc_sigmask;

		public __darwin_sigaltstack uc_stack;

		public unsafe __darwin_ucontext* uc_link;

		public nuint uc_mcsize;

		public unsafe __darwin_mcontext64* uc_mcontext;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct sigval
	{
		[FieldOffset (0)]
		public int sival_int;

		[FieldOffset (0)]
		public unsafe void* sival_ptr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct sigevent
	{
		public int sigev_notify;

		public int sigev_signo;

		public sigval sigev_value;

		public unsafe Action<sigval>* sigev_notify_function;

		public unsafe pthread_attr_t* sigev_notify_attributes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct siginfo_t
	{
		public int si_signo;

		public int si_errno;

		public int si_code;

		public int si_pid;

		public uint si_uid;

		public int si_status;

		public unsafe void* si_addr;

		public sigval si_value;

		public nint si_band;

		public nuint[] __pad;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct __sigaction_u
	{
		[FieldOffset (0)]
		public unsafe Action<int>* __sa_handler;

		[FieldOffset (0)]
		public unsafe Action<int, Darwin.__siginfo*, void*>* __sa_sigaction;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __sigaction
	{
		public __sigaction_u __sigaction_u;

		public unsafe Action<void*, int, int, Darwin.siginfo_t*, void*>* sa_tramp;

		public uint sa_mask;

		public int sa_flags;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct sigaction
	{
		public __sigaction_u __sigaction_u;

		public uint sa_mask;

		public int sa_flags;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct sigvec
	{
		public unsafe Action<int>* sv_handler;

		public int sv_mask;

		public int sv_flags;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct sigstack
	{
		public unsafe sbyte* ss_sp;

		public int ss_onstack;
	}

	public enum memory_order : uint
	{
		relaxed = 0,
		consume = 1,
		acquire = 2,
		release = 3,
		acq_rel = 4,
		seq_cst = 5
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct atomic_flag
	{
		public [unsupported Atomic: _Atomic(_Bool)] _Value;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __sbuf
	{
		public unsafe byte* _base;

		public int _size;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct FILE
	{
		public unsafe byte* _p;

		public int _r;

		public int _w;

		public short _flags;

		public short _file;

		public __sbuf _bf;

		public int _lbfsize;

		public unsafe void* _cookie;

		public unsafe Func<void*, int>* _close;

		public unsafe Func<void*, sbyte*, int, int>* _read;

		public unsafe Func<void*, long, int, long>* _seek;

		public unsafe Func<void*, sbyte*, int, int>* _write;

		public __sbuf _ub;

		public unsafe __sFILEX* _extra;

		public int _ur;

		public byte[] _ubuf;

		public byte[] _nbuf;

		public __sbuf _lb;

		public int _blksize;

		public long _offset;
	}

	public enum idtype_t : uint
	{
		All,
		Pid,
		Pgid
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct timeval
	{
		public nint tv_sec;

		public int tv_usec;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct rusage
	{
		public timeval ru_utime;

		public timeval ru_stime;

		public nint ru_maxrss;

		public nint ru_ixrss;

		public nint ru_idrss;

		public nint ru_isrss;

		public nint ru_minflt;

		public nint ru_majflt;

		public nint ru_nswap;

		public nint ru_inblock;

		public nint ru_oublock;

		public nint ru_msgsnd;

		public nint ru_msgrcv;

		public nint ru_nsignals;

		public nint ru_nvcsw;

		public nint ru_nivcsw;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct rusage_info_v0
	{
		public byte[] ri_uuid;

		public ulong ri_user_time;

		public ulong ri_system_time;

		public ulong ri_pkg_idle_wkups;

		public ulong ri_interrupt_wkups;

		public ulong ri_pageins;

		public ulong ri_wired_size;

		public ulong ri_resident_size;

		public ulong ri_phys_footprint;

		public ulong ri_proc_start_abstime;

		public ulong ri_proc_exit_abstime;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct rusage_info_v1
	{
		public byte[] ri_uuid;

		public ulong ri_user_time;

		public ulong ri_system_time;

		public ulong ri_pkg_idle_wkups;

		public ulong ri_interrupt_wkups;

		public ulong ri_pageins;

		public ulong ri_wired_size;

		public ulong ri_resident_size;

		public ulong ri_phys_footprint;

		public ulong ri_proc_start_abstime;

		public ulong ri_proc_exit_abstime;

		public ulong ri_child_user_time;

		public ulong ri_child_system_time;

		public ulong ri_child_pkg_idle_wkups;

		public ulong ri_child_interrupt_wkups;

		public ulong ri_child_pageins;

		public ulong ri_child_elapsed_abstime;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct rusage_info_v2
	{
		public byte[] ri_uuid;

		public ulong ri_user_time;

		public ulong ri_system_time;

		public ulong ri_pkg_idle_wkups;

		public ulong ri_interrupt_wkups;

		public ulong ri_pageins;

		public ulong ri_wired_size;

		public ulong ri_resident_size;

		public ulong ri_phys_footprint;

		public ulong ri_proc_start_abstime;

		public ulong ri_proc_exit_abstime;

		public ulong ri_child_user_time;

		public ulong ri_child_system_time;

		public ulong ri_child_pkg_idle_wkups;

		public ulong ri_child_interrupt_wkups;

		public ulong ri_child_pageins;

		public ulong ri_child_elapsed_abstime;

		public ulong ri_diskio_bytesread;

		public ulong ri_diskio_byteswritten;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct rusage_info_v3
	{
		public byte[] ri_uuid;

		public ulong ri_user_time;

		public ulong ri_system_time;

		public ulong ri_pkg_idle_wkups;

		public ulong ri_interrupt_wkups;

		public ulong ri_pageins;

		public ulong ri_wired_size;

		public ulong ri_resident_size;

		public ulong ri_phys_footprint;

		public ulong ri_proc_start_abstime;

		public ulong ri_proc_exit_abstime;

		public ulong ri_child_user_time;

		public ulong ri_child_system_time;

		public ulong ri_child_pkg_idle_wkups;

		public ulong ri_child_interrupt_wkups;

		public ulong ri_child_pageins;

		public ulong ri_child_elapsed_abstime;

		public ulong ri_diskio_bytesread;

		public ulong ri_diskio_byteswritten;

		public ulong ri_cpu_time_qos_default;

		public ulong ri_cpu_time_qos_maintenance;

		public ulong ri_cpu_time_qos_background;

		public ulong ri_cpu_time_qos_utility;

		public ulong ri_cpu_time_qos_legacy;

		public ulong ri_cpu_time_qos_user_initiated;

		public ulong ri_cpu_time_qos_user_interactive;

		public ulong ri_billed_system_time;

		public ulong ri_serviced_system_time;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct rusage_info_current
	{
		public byte[] ri_uuid;

		public ulong ri_user_time;

		public ulong ri_system_time;

		public ulong ri_pkg_idle_wkups;

		public ulong ri_interrupt_wkups;

		public ulong ri_pageins;

		public ulong ri_wired_size;

		public ulong ri_resident_size;

		public ulong ri_phys_footprint;

		public ulong ri_proc_start_abstime;

		public ulong ri_proc_exit_abstime;

		public ulong ri_child_user_time;

		public ulong ri_child_system_time;

		public ulong ri_child_pkg_idle_wkups;

		public ulong ri_child_interrupt_wkups;

		public ulong ri_child_pageins;

		public ulong ri_child_elapsed_abstime;

		public ulong ri_diskio_bytesread;

		public ulong ri_diskio_byteswritten;

		public ulong ri_cpu_time_qos_default;

		public ulong ri_cpu_time_qos_maintenance;

		public ulong ri_cpu_time_qos_background;

		public ulong ri_cpu_time_qos_utility;

		public ulong ri_cpu_time_qos_legacy;

		public ulong ri_cpu_time_qos_user_initiated;

		public ulong ri_cpu_time_qos_user_interactive;

		public ulong ri_billed_system_time;

		public ulong ri_serviced_system_time;

		public ulong ri_logical_writes;

		public ulong ri_lifetime_max_phys_footprint;

		public ulong ri_instructions;

		public ulong ri_cycles;

		public ulong ri_billed_energy;

		public ulong ri_serviced_energy;

		public ulong[] ri_unused;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct rlimit
	{
		public ulong rlim_cur;

		public ulong rlim_max;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct proc_rlimit_control_wakeupmon
	{
		public uint wm_flags;

		public int wm_rate;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct ullc
	{
		[FieldOffset (0)]
		public ulong ull;

		[FieldOffset (0)]
		public uint[] ul;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct wait
	{
		[FieldOffset (0)]
		public int w_status;

		[StructLayout (LayoutKind.Sequential)]
		public struct W_T
		{
			public uint w_Termsig;

			public uint w_Coredump;

			public uint w_Retcode;

			public uint w_Filler;
		}


		[FieldOffset (0)]
		public W_T w_T;

		[StructLayout (LayoutKind.Sequential)]
		public struct W_S
		{
			public uint w_Stopval;

			public uint w_Stopsig;

			public uint w_Filler;
		}


		[FieldOffset (0)]
		public W_S w_S;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct div_t
	{
		public int quot;

		public int rem;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ldiv_t
	{
		public nint quot;

		public nint rem;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct lldiv_t
	{
		public long quot;

		public long rem;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct timespec
	{
		public nint tv_sec;

		public nint tv_nsec;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct tm
	{
		public int tm_sec;

		public int tm_min;

		public int tm_hour;

		public int tm_mday;

		public int tm_mon;

		public int tm_year;

		public int tm_wday;

		public int tm_yday;

		public int tm_isdst;

		public nint tm_gmtoff;

		public unsafe sbyte* tm_zone;
	}

	public enum clockid_t : uint
	{
		Realtime = 0,
		Monotonic = 6,
		MonotonicRaw = 4,
		MonotonicRawApprox = 5,
		UptimeRaw = 8,
		UptimeRawApprox = 9,
		ProcessCputimeId = 12,
		ThreadCputimeId = 16
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct winsize
	{
		public ushort ws_row;

		public ushort ws_col;

		public ushort ws_xpixel;

		public ushort ws_ypixel;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct fd_set
	{
		public int[] fds_bits;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct passwd
	{
		public unsafe sbyte* pw_name;

		public unsafe sbyte* pw_passwd;

		public uint pw_uid;

		public uint pw_gid;

		public nint pw_change;

		public unsafe sbyte* pw_class;

		public unsafe sbyte* pw_gecos;

		public unsafe sbyte* pw_dir;

		public unsafe sbyte* pw_shell;

		public nint pw_expire;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct termios
	{
		public nuint c_iflag;

		public nuint c_oflag;

		public nuint c_cflag;

		public nuint c_lflag;

		public byte[] c_cc;

		public nuint c_ispeed;

		public nuint c_ospeed;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct aiocb
	{
		public int aio_fildes;

		public long aio_offset;

		public unsafe void* aio_buf;

		public nuint aio_nbytes;

		public int aio_reqprio;

		public sigevent aio_sigevent;

		public int aio_lio_opcode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct iovec
	{
		public unsafe void* iov_base;

		public nuint iov_len;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct sa_endpoints_t
	{
		public uint sae_srcif;

		public unsafe sockaddr* sae_srcaddr;

		public uint sae_srcaddrlen;

		public unsafe sockaddr* sae_dstaddr;

		public uint sae_dstaddrlen;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct linger
	{
		public int l_onoff;

		public int l_linger;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct so_np_extensions
	{
		public uint npx_flags;

		public uint npx_mask;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct sockaddr
	{
		public byte sa_len;

		public byte sa_family;

		public sbyte[] sa_data;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct sockproto
	{
		public ushort sp_family;

		public ushort sp_protocol;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct sockaddr_storage
	{
		public byte ss_len;

		public byte ss_family;

		public sbyte[] __ss_pad1;

		public long __ss_align;

		public sbyte[] __ss_pad2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct msghdr
	{
		public unsafe void* msg_name;

		public uint msg_namelen;

		public unsafe iovec* msg_iov;

		public int msg_iovlen;

		public unsafe void* msg_control;

		public uint msg_controllen;

		public int msg_flags;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct cmsghdr
	{
		public uint cmsg_len;

		public int cmsg_level;

		public int cmsg_type;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct sf_hdtr
	{
		public unsafe iovec* headers;

		public int hdr_cnt;

		public unsafe iovec* trailers;

		public int trl_cnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct in_addr
	{
		public uint s_addr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct sockaddr_in
	{
		public byte sin_len;

		public byte sin_family;

		public ushort sin_port;

		public in_addr sin_addr;

		public sbyte[] sin_zero;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ip_opts
	{
		public in_addr ip_dst;

		public sbyte[] ip_opts;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ip_mreq
	{
		public in_addr imr_multiaddr;

		public in_addr imr_interface;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ip_mreqn
	{
		public in_addr imr_multiaddr;

		public in_addr imr_address;

		public int imr_ifindex;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ip_mreq_source
	{
		public in_addr imr_multiaddr;

		public in_addr imr_sourceaddr;

		public in_addr imr_interface;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct group_req
	{
		public uint gr_interface;

		public sockaddr_storage gr_group;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct group_source_req
	{
		public uint gsr_interface;

		public sockaddr_storage gsr_group;

		public sockaddr_storage gsr_source;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __msfilterreq
	{
		public uint msfr_ifindex;

		public uint msfr_fmode;

		public uint msfr_nsrcs;

		public uint __msfr_align;

		public sockaddr_storage msfr_group;

		public unsafe sockaddr_storage* msfr_srcs;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct in_pktinfo
	{
		public uint ipi_ifindex;

		public in_addr ipi_spec_dst;

		public in_addr ipi_addr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct in6_addr
	{
		[StructLayout (LayoutKind.Explicit)]
		public struct ___u6_addr
		{
			[FieldOffset (0)]
			public byte[] __u6_addr8;

			[FieldOffset (0)]
			public ushort[] __u6_addr16;

			[FieldOffset (0)]
			public uint[] __u6_addr32;
		}


		public ___u6_addr __u6_addr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct sockaddr_in6
	{
		public byte sin6_len;

		public byte sin6_family;

		public ushort sin6_port;

		public uint sin6_flowinfo;

		public in6_addr sin6_addr;

		public uint sin6_scope_id;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ipv6_mreq
	{
		public in6_addr ipv6mr_multiaddr;

		public uint ipv6mr_interface;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct in6_pktinfo
	{
		public in6_addr ipi6_addr;

		public uint ipi6_ifindex;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ip6_mtuinfo
	{
		public sockaddr_in6 ip6m_addr;

		public uint ip6m_mtu;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct dirent
	{
		public ulong d_ino;

		public ulong d_seekoff;

		public ushort d_reclen;

		public ushort d_namlen;

		public byte d_type;

		public sbyte[] d_name;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct DIR
	{
		public int __dd_fd;

		public nint __dd_loc;

		public nint __dd_size;

		public unsafe sbyte* __dd_buf;

		public int __dd_len;

		public nint __dd_seek;

		public nint __padding;

		public int __dd_flags;

		public __darwin_pthread_mutex_t __dd_lock;

		public unsafe _telldir* __dd_td;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct Dl_info
	{
		public unsafe sbyte* dli_fname;

		public unsafe void* dli_fbase;

		public unsafe sbyte* dli_sname;

		public unsafe void* dli_saddr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct flock
	{
		public long l_start;

		public long l_len;

		public int l_pid;

		public short l_type;

		public short l_whence;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct flocktimeout
	{
		public flock fl;

		public timespec timeout;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct radvisory
	{
		public long ra_offset;

		public int ra_count;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct fcodeblobs_t
	{
		public unsafe void* f_cd_hash;

		public nuint f_hash_size;

		public unsafe void* f_cd_buffer;

		public nuint f_cd_size;

		public unsafe uint* f_out_size;

		public int f_arch;

		public int __padding;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct fsignatures_t
	{
		public long fs_file_start;

		public unsafe void* fs_blob_start;

		public nuint fs_blob_size;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct fchecklv_t
	{
		public long lv_file_start;

		public nuint lv_error_message_size;

		public unsafe void* lv_error_message;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct fstore_t
	{
		public uint fst_flags;

		public int fst_posmode;

		public long fst_offset;

		public long fst_length;

		public long fst_bytesalloc;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct fpunchhole_t
	{
		public uint fp_flags;

		public uint reserved;

		public long fp_offset;

		public long fp_length;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ftrimactivefile_t
	{
		public long fta_offset;

		public long fta_length;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct fbootstraptransfer_t
	{
		public long fbt_offset;

		public nuint fbt_length;

		public unsafe void* fbt_buffer;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct log2phys
	{
		public uint l2p_flags;

		public long l2p_contigbytes;

		public long l2p_devoffset;
	}

	public enum filesec_property_t : uint
	{
		Owner = 1,
		Group = 2,
		Uuid = 3,
		Mode = 4,
		Acl = 5,
		Grpuuid = 6,
		AclRaw = 100,
		AclAllocsize = 101
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ostat
	{
		public ushort st_dev;

		public ulong st_ino;

		public ushort st_mode;

		public ushort st_nlink;

		public ushort st_uid;

		public ushort st_gid;

		public ushort st_rdev;

		public int st_size;

		public timespec st_atimespec;

		public timespec st_mtimespec;

		public timespec st_ctimespec;

		public int st_blksize;

		public int st_blocks;

		public uint st_flags;

		public uint st_gen;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct stat
	{
		public int st_dev;

		public ushort st_mode;

		public ushort st_nlink;

		public ulong st_ino;

		public uint st_uid;

		public uint st_gid;

		public int st_rdev;

		public timespec st_atimespec;

		public timespec st_mtimespec;

		public timespec st_ctimespec;

		public timespec st_birthtimespec;

		public long st_size;

		public long st_blocks;

		public int st_blksize;

		public uint st_flags;

		public uint st_gen;

		public int st_lspare;

		public long[] st_qspare;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct FTW
	{
		public int @base;

		public int level;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct glob_t
	{
		public nuint gl_pathc;

		public int gl_matchc;

		public nuint gl_offs;

		public int gl_flags;

		public unsafe sbyte** gl_pathv;

		[StructLayout (LayoutKind.Explicit)]
		public struct _
		{
			[FieldOffset (0)]
			public unsafe Func<sbyte*, int, int>* gl_errfunc;

			[FieldOffset (0)]
			public unsafe Func<sbyte*, int, int> gl_errblk;
		}


		public _ ;

		public unsafe Action<void*>* gl_closedir;

		public unsafe Func<void*, Darwin.dirent*>* gl_readdir;

		public unsafe Func<sbyte*, void*>* gl_opendir;

		public unsafe Func<sbyte*, Darwin.stat*, int>* gl_lstat;

		public unsafe Func<sbyte*, Darwin.stat*, int>* gl_stat;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct group
	{
		public unsafe sbyte* gr_name;

		public unsafe sbyte* gr_passwd;

		public uint gr_gid;

		public unsafe sbyte** gr_mem;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct iconv_hooks
	{
		public unsafe iconv_unicode_char_hook* uc_hook;

		public unsafe iconv_wide_char_hook* wc_hook;

		public unsafe void* data;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct iconv_fallbacks
	{
		public unsafe iconv_unicode_mb_to_uc_fallback* mb_to_uc_fallback;

		public unsafe iconv_unicode_uc_to_mb_fallback* uc_to_mb_fallback;

		public unsafe iconv_wchar_mb_to_wc_fallback* mb_to_wc_fallback;

		public unsafe iconv_wchar_wc_to_mb_fallback* wc_to_mb_fallback;

		public unsafe void* data;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ifaddrs
	{
		public unsafe ifaddrs* ifa_next;

		public unsafe sbyte* ifa_name;

		public uint ifa_flags;

		public unsafe sockaddr* ifa_addr;

		public unsafe sockaddr* ifa_netmask;

		public unsafe sockaddr* ifa_dstaddr;

		public unsafe void* ifa_data;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ifmaddrs
	{
		public unsafe ifmaddrs* ifma_next;

		public unsafe sockaddr* ifma_name;

		public unsafe sockaddr* ifma_addr;

		public unsafe sockaddr* ifma_lladdr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ttysize
	{
		public ushort ts_lines;

		public ushort ts_cols;

		public ushort ts_xxx;

		public ushort ts_yyy;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct datum
	{
		public unsafe void* dptr;

		public nuint dsize;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct DBM
	{
		public sbyte[] __opaque;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct hostent
	{
		public unsafe sbyte* h_name;

		public unsafe sbyte** h_aliases;

		public int h_addrtype;

		public int h_length;

		public unsafe sbyte** h_addr_list;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct netent
	{
		public unsafe sbyte* n_name;

		public unsafe sbyte** n_aliases;

		public int n_addrtype;

		public uint n_net;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct servent
	{
		public unsafe sbyte* s_name;

		public unsafe sbyte** s_aliases;

		public int s_port;

		public unsafe sbyte* s_proto;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct protoent
	{
		public unsafe sbyte* p_name;

		public unsafe sbyte** p_aliases;

		public int p_proto;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct addrinfo
	{
		public int ai_flags;

		public int ai_family;

		public int ai_socktype;

		public int ai_protocol;

		public uint ai_addrlen;

		public unsafe sbyte* ai_canonname;

		public unsafe sockaddr* ai_addr;

		public unsafe addrinfo* ai_next;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct rpcent
	{
		public unsafe sbyte* r_name;

		public unsafe sbyte** r_aliases;

		public int r_number;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct sockaddr_dl
	{
		public byte sdl_len;

		public byte sdl_family;

		public ushort sdl_index;

		public byte sdl_type;

		public byte sdl_nlen;

		public byte sdl_alen;

		public byte sdl_slen;

		public sbyte[] sdl_data;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct timeval64
	{
		public long tv_sec;

		public long tv_usec;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct itimerval
	{
		public timeval it_interval;

		public timeval it_value;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct timezone
	{
		public int tz_minuteswest;

		public int tz_dsttime;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct clockinfo
	{
		public int hz;

		public int tick;

		public int tickadj;

		public int stathz;

		public int profhz;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct net_event_data
	{
		public uint if_family;

		public uint if_unit;

		public sbyte[] if_name;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct timeval32
	{
		public int tv_sec;

		public int tv_usec;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct if_data
	{
		public byte ifi_type;

		public byte ifi_typelen;

		public byte ifi_physical;

		public byte ifi_addrlen;

		public byte ifi_hdrlen;

		public byte ifi_recvquota;

		public byte ifi_xmitquota;

		public byte ifi_unused1;

		public uint ifi_mtu;

		public uint ifi_metric;

		public uint ifi_baudrate;

		public uint ifi_ipackets;

		public uint ifi_ierrors;

		public uint ifi_opackets;

		public uint ifi_oerrors;

		public uint ifi_collisions;

		public uint ifi_ibytes;

		public uint ifi_obytes;

		public uint ifi_imcasts;

		public uint ifi_omcasts;

		public uint ifi_iqdrops;

		public uint ifi_noproto;

		public uint ifi_recvtiming;

		public uint ifi_xmittiming;

		public timeval32 ifi_lastchange;

		public uint ifi_unused2;

		public uint ifi_hwassist;

		public uint ifi_reserved1;

		public uint ifi_reserved2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct if_data64
	{
		public byte ifi_type;

		public byte ifi_typelen;

		public byte ifi_physical;

		public byte ifi_addrlen;

		public byte ifi_hdrlen;

		public byte ifi_recvquota;

		public byte ifi_xmitquota;

		public byte ifi_unused1;

		public uint ifi_mtu;

		public uint ifi_metric;

		public ulong ifi_baudrate;

		public ulong ifi_ipackets;

		public ulong ifi_ierrors;

		public ulong ifi_opackets;

		public ulong ifi_oerrors;

		public ulong ifi_collisions;

		public ulong ifi_ibytes;

		public ulong ifi_obytes;

		public ulong ifi_imcasts;

		public ulong ifi_omcasts;

		public ulong ifi_iqdrops;

		public ulong ifi_noproto;

		public uint ifi_recvtiming;

		public uint ifi_xmittiming;

		public timeval32 ifi_lastchange;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ifqueue
	{
		public unsafe void* ifq_head;

		public unsafe void* ifq_tail;

		public int ifq_len;

		public int ifq_maxlen;

		public int ifq_drops;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct if_clonereq
	{
		public int ifcr_total;

		public int ifcr_count;

		public unsafe sbyte* ifcr_buffer;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct if_msghdr
	{
		public ushort ifm_msglen;

		public byte ifm_version;

		public byte ifm_type;

		public int ifm_addrs;

		public int ifm_flags;

		public ushort ifm_index;

		public if_data ifm_data;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ifa_msghdr
	{
		public ushort ifam_msglen;

		public byte ifam_version;

		public byte ifam_type;

		public int ifam_addrs;

		public int ifam_flags;

		public ushort ifam_index;

		public int ifam_metric;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ifma_msghdr
	{
		public ushort ifmam_msglen;

		public byte ifmam_version;

		public byte ifmam_type;

		public int ifmam_addrs;

		public int ifmam_flags;

		public ushort ifmam_index;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct if_msghdr2
	{
		public ushort ifm_msglen;

		public byte ifm_version;

		public byte ifm_type;

		public int ifm_addrs;

		public int ifm_flags;

		public ushort ifm_index;

		public int ifm_snd_len;

		public int ifm_snd_maxlen;

		public int ifm_snd_drops;

		public int ifm_timer;

		public if_data64 ifm_data;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ifma_msghdr2
	{
		public ushort ifmam_msglen;

		public byte ifmam_version;

		public byte ifmam_type;

		public int ifmam_addrs;

		public int ifmam_flags;

		public ushort ifmam_index;

		public int ifmam_refcount;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ifdevmtu
	{
		public int ifdm_current;

		public int ifdm_min;

		public int ifdm_max;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ifkpi
	{
		public uint ifk_module_id;

		public uint ifk_type;

		[StructLayout (LayoutKind.Explicit)]
		public struct Ifk_data
		{
			[FieldOffset (0)]
			public unsafe void* ifk_ptr;

			[FieldOffset (0)]
			public int ifk_value;
		}


		public Ifk_data ifk_data;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ifreq
	{
		public sbyte[] ifr_name;

		[StructLayout (LayoutKind.Explicit)]
		public struct Ifr_ifru
		{
			[FieldOffset (0)]
			public sockaddr ifru_addr;

			[FieldOffset (0)]
			public sockaddr ifru_dstaddr;

			[FieldOffset (0)]
			public sockaddr ifru_broadaddr;

			[FieldOffset (0)]
			public short ifru_flags;

			[FieldOffset (0)]
			public int ifru_metric;

			[FieldOffset (0)]
			public int ifru_mtu;

			[FieldOffset (0)]
			public int ifru_phys;

			[FieldOffset (0)]
			public int ifru_media;

			[FieldOffset (0)]
			public int ifru_intval;

			[FieldOffset (0)]
			public unsafe sbyte* ifru_data;

			[FieldOffset (0)]
			public ifdevmtu ifru_devmtu;

			[FieldOffset (0)]
			public ifkpi ifru_kpi;

			[FieldOffset (0)]
			public uint ifru_wake_flags;

			[FieldOffset (0)]
			public uint ifru_route_refcnt;

			[FieldOffset (0)]
			public int[] ifru_cap;

			[FieldOffset (0)]
			public uint ifru_functional_type;
		}


		public Ifr_ifru ifr_ifru;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ifaliasreq
	{
		public sbyte[] ifra_name;

		public sockaddr ifra_addr;

		public sockaddr ifra_broadaddr;

		public sockaddr ifra_mask;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct rslvmulti_req
	{
		public unsafe sockaddr* sa;

		public unsafe sockaddr** llsa;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ifmediareq
	{
		public sbyte[] ifm_name;

		public int ifm_current;

		public int ifm_mask;

		public int ifm_status;

		public int ifm_active;

		public int ifm_count;

		public unsafe int* ifm_ulist;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ifdrv
	{
		public sbyte[] ifd_name;

		public nuint ifd_cmd;

		public nuint ifd_len;

		public unsafe void* ifd_data;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ifstat
	{
		public sbyte[] ifs_name;

		public sbyte[] ascii;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ifconf
	{
		public int ifc_len;

		[StructLayout (LayoutKind.Explicit)]
		public struct Ifc_ifcu
		{
			[FieldOffset (0)]
			public unsafe sbyte* ifcu_buf;

			[FieldOffset (0)]
			public unsafe ifreq* ifcu_req;
		}


		public Ifc_ifcu ifc_ifcu;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct kev_dl_proto_data
	{
		public net_event_data link_data;

		public uint proto_family;

		public uint proto_remaining_count;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct if_nameindex
	{
		public uint if_index;

		public unsafe sbyte* if_name;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct tcphdr
	{
		public ushort th_sport;

		public ushort th_dport;

		public uint th_seq;

		public uint th_ack;

		public uint th_x2;

		public uint th_off;

		public byte th_flags;

		public ushort th_win;

		public ushort th_sum;

		public ushort th_urp;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct tcp_connection_info
	{
		public byte tcpi_state;

		public byte tcpi_snd_wscale;

		public byte tcpi_rcv_wscale;

		public byte __pad1;

		public uint tcpi_options;

		public uint tcpi_flags;

		public uint tcpi_rto;

		public uint tcpi_maxseg;

		public uint tcpi_snd_ssthresh;

		public uint tcpi_snd_cwnd;

		public uint tcpi_snd_wnd;

		public uint tcpi_snd_sbbytes;

		public uint tcpi_rcv_wnd;

		public uint tcpi_rttcur;

		public uint tcpi_srtt;

		public uint tcpi_rttvar;

		public uint tcpi_tfo_cookie_req;

		public uint tcpi_tfo_cookie_rcv;

		public uint tcpi_tfo_syn_loss;

		public uint tcpi_tfo_syn_data_sent;

		public uint tcpi_tfo_syn_data_acked;

		public uint tcpi_tfo_syn_data_rcv;

		public uint tcpi_tfo_cookie_req_rcv;

		public uint tcpi_tfo_cookie_sent;

		public uint tcpi_tfo_cookie_invalid;

		public uint tcpi_tfo_cookie_wrong;

		public uint tcpi_tfo_no_cookie_rcv;

		public uint tcpi_tfo_heuristics_disable;

		public uint tcpi_tfo_send_blackhole;

		public uint tcpi_tfo_recv_blackhole;

		public uint tcpi_tfo_onebyte_proxy;

		public uint __pad2;

		public ulong tcpi_txpackets;

		public ulong tcpi_txbytes;

		public ulong tcpi_txretransmitbytes;

		public ulong tcpi_rxpackets;

		public ulong tcpi_rxbytes;

		public ulong tcpi_rxoutoforderbytes;

		public ulong tcpi_txretransmitpackets;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __nl_cat_d
	{
		public unsafe void* __data;

		public int __size;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct pollfd
	{
		public int fd;

		public short events;

		public short revents;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct sched_param
	{
		public int sched_priority;

		public sbyte[] __opaque;
	}

	public enum qos_class_t : uint
	{
		UserInteractive = 33,
		UserInitiated = 25,
		Default = 21,
		Utility = 17,
		Background = 9,
		Unspecified = 0
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_port_status_t
	{
		public uint mps_pset;

		public uint mps_seqno;

		public uint mps_mscount;

		public uint mps_qlimit;

		public uint mps_msgcount;

		public uint mps_sorights;

		public int mps_srights;

		public int mps_pdrequest;

		public int mps_nsrequest;

		public uint mps_flags;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_port_limits_t
	{
		public uint mpl_qlimit;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_port_info_ext_t
	{
		public mach_port_status_t mpie_status;

		public uint mpie_boost_cnt;

		public uint[] reserved;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_port_qos_t
	{
		public uint name;

		public uint prealloc;

		public int pad1;

		public uint len;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_port_options_t
	{
		public uint flags;

		public mach_port_limits_t mpl;

		public ulong[] reserved;
	}

	public enum mach_port_guard_exception_codes : uint
	{
		Destroy = 1 << 0,
		ModRefs = 1 << 1,
		SetContext = 1 << 2,
		Unguarded = 1 << 3,
		IncorrectGuard = 1 << 4
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct routine_arg_descriptor
	{
		public uint pad1;

		public uint pad2;

		public uint pad3;

		public uint type;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_port_descriptor_t
	{
		public uint name;

		public uint pad1;

		public uint pad2;

		public uint disposition;

		public uint type;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_ool_descriptor32_t
	{
		public uint address;

		public uint size;

		public int deallocate;

		public uint copy;

		public uint pad1;

		public uint type;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_ool_descriptor64_t
	{
		public ulong address;

		public int deallocate;

		public uint copy;

		public uint pad1;

		public uint type;

		public uint size;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_ool_descriptor_t
	{
		public unsafe void* address;

		public int deallocate;

		public uint copy;

		public uint pad1;

		public uint type;

		public uint size;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_ool_ports_descriptor32_t
	{
		public uint address;

		public uint count;

		public int deallocate;

		public uint copy;

		public uint disposition;

		public uint type;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_ool_ports_descriptor64_t
	{
		public ulong address;

		public int deallocate;

		public uint copy;

		public uint disposition;

		public uint type;

		public uint count;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_ool_ports_descriptor_t
	{
		public unsafe void* address;

		public int deallocate;

		public uint copy;

		public uint disposition;

		public uint type;

		public uint count;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct mach_msg_descriptor_t
	{
		[FieldOffset (0)]
		public mach_msg_port_descriptor_t port;

		[FieldOffset (0)]
		public mach_msg_ool_descriptor_t out_of_line;

		[FieldOffset (0)]
		public mach_msg_ool_ports_descriptor_t ool_ports;

		[FieldOffset (0)]
		public mach_msg_type_descriptor_t type;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_body_t
	{
		public uint msgh_descriptor_count;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_header_t
	{
		public uint msgh_bits;

		public uint msgh_size;

		public uint msgh_remote_port;

		public uint msgh_local_port;

		public uint msgh_voucher_port;

		public int msgh_id;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_base_t
	{
		public mach_msg_header_t header;

		public mach_msg_body_t body;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_trailer_t
	{
		public uint msgh_trailer_type;

		public uint msgh_trailer_size;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_seqno_trailer_t
	{
		public uint msgh_trailer_type;

		public uint msgh_trailer_size;

		public uint msgh_seqno;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct security_token_t
	{
		public uint[] val;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_format_0_trailer_t
	{
		public uint msgh_trailer_type;

		public uint msgh_trailer_size;

		public uint msgh_seqno;

		public security_token_t msgh_sender;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct audit_token_t
	{
		public uint[] val;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_audit_trailer_t
	{
		public uint msgh_trailer_type;

		public uint msgh_trailer_size;

		public uint msgh_seqno;

		public security_token_t msgh_sender;

		public audit_token_t msgh_audit;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_context_trailer_t
	{
		public uint msgh_trailer_type;

		public uint msgh_trailer_size;

		public uint msgh_seqno;

		public security_token_t msgh_sender;

		public audit_token_t msgh_audit;

		public UIntPtr msgh_context;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct msg_labels_t
	{
		public uint sender;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_max_trailer_t
	{
		public uint msgh_trailer_type;

		public uint msgh_trailer_size;

		public uint msgh_seqno;

		public security_token_t msgh_sender;

		public audit_token_t msgh_audit;

		public UIntPtr msgh_context;

		public int msgh_ad;

		public msg_labels_t msgh_labels;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_empty_send_t
	{
		public mach_msg_header_t header;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_empty_rcv_t
	{
		public mach_msg_header_t header;

		public mach_msg_trailer_t trailer;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct mach_msg_empty_t
	{
		[FieldOffset (0)]
		public mach_msg_empty_send_t send;

		[FieldOffset (0)]
		public mach_msg_empty_rcv_t rcv;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct arm_state_hdr_t
	{
		public uint flavor;

		public uint count;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct arm_unified_thread_state_t
	{
		public arm_state_hdr_t ash;

		[StructLayout (LayoutKind.Explicit)]
		public struct Uts
		{
			[FieldOffset (0)]
			public arm_thread_state32_t ts_32;

			[FieldOffset (0)]
			public arm_thread_state64_t ts_64;
		}


		public Uts uts;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct regex_t
	{
		public int re_magic;

		public nuint re_nsub;

		public unsafe sbyte* re_endp;

		public unsafe re_guts* re_g;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct regmatch_t
	{
		public long rm_so;

		public long rm_eo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ENTRY
	{
		public unsafe sbyte* key;

		public unsafe void* data;
	}

	public enum Action : uint
	{
		Find,
		Enter
	}

	public enum Visit : uint
	{
		preorder,
		postorder,
		endorder,
		leaf
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ipc_perm
	{
		public uint uid;

		public uint gid;

		public uint cuid;

		public uint cgid;

		public ushort mode;

		public ushort _seq;

		public int _key;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __msqid_ds_new
	{
		public ipc_perm msg_perm;

		public int msg_first;

		public int msg_last;

		public nuint msg_cbytes;

		public nuint msg_qnum;

		public nuint msg_qbytes;

		public int msg_lspid;

		public int msg_lrpid;

		public nint msg_stime;

		public int msg_pad1;

		public nint msg_rtime;

		public int msg_pad2;

		public nint msg_ctime;

		public int msg_pad3;

		public int[] msg_pad4;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct msg
	{
		public unsafe msg* msg_next;

		public nint msg_type;

		public ushort msg_ts;

		public short msg_spot;

		public unsafe label* label;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mymsg
	{
		public nint mtype;

		public sbyte[] mtext;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct msginfo
	{
		public int msgmax;

		public int msgmni;

		public int msgmnb;

		public int msgtql;

		public int msgssz;

		public int msgseg;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __semid_ds_new
	{
		public ipc_perm sem_perm;

		public int sem_base;

		public ushort sem_nsems;

		public nint sem_otime;

		public int sem_pad1;

		public nint sem_ctime;

		public int sem_pad2;

		public int[] sem_pad3;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct sem
	{
		public ushort semval;

		public int sempid;

		public ushort semncnt;

		public ushort semzcnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct sembuf
	{
		public ushort sem_num;

		public short sem_op;

		public short sem_flg;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct semun_t
	{
		[FieldOffset (0)]
		public int val;

		[FieldOffset (0)]
		public unsafe __semid_ds_new* buf;

		[FieldOffset (0)]
		public unsafe ushort* array;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __shmid_ds_new
	{
		public ipc_perm shm_perm;

		public nuint shm_segsz;

		public int shm_lpid;

		public int shm_cpid;

		public ushort shm_nattch;

		public nint shm_atime;

		public nint shm_dtime;

		public nint shm_ctime;

		public unsafe void* shm_internal;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct statvfs
	{
		public nuint f_bsize;

		public nuint f_frsize;

		public uint f_blocks;

		public uint f_bfree;

		public uint f_bavail;

		public uint f_files;

		public uint f_ffree;

		public uint f_favail;

		public nuint f_fsid;

		public nuint f_flag;

		public nuint f_namemax;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct tms
	{
		public nuint tms_utime;

		public nuint tms_stime;

		public nuint tms_cutime;

		public nuint tms_cstime;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct fsid_t
	{
		public int[] val;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct fsobj_id_t
	{
		public uint fid_objno;

		public uint fid_generation;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct guid_t
	{
		public byte[] g_guid;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ucontext64_t
	{
		public int uc_onstack;

		public uint uc_sigmask;

		public __darwin_sigaltstack uc_stack;

		public unsafe __darwin_ucontext64* uc_link;

		public nuint uc_mcsize;

		public unsafe __darwin_mcontext64* uc_mcontext64;
	}

	public enum uio_rw : uint
	{
		Read,
		Write
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct sockaddr_un
	{
		public byte sun_len;

		public byte sun_family;

		public sbyte[] sun_path;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct utsname
	{
		public sbyte[] sysname;

		public sbyte[] nodename;

		public sbyte[] release;

		public sbyte[] version;

		public sbyte[] machine;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct accessx_descriptor
	{
		public uint ad_name_offset;

		public int ad_flags;

		public int[] ad_pad;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct utimbuf
	{
		public nint actime;

		public nint modtime;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct utmpx
	{
		public sbyte[] ut_user;

		public sbyte[] ut_id;

		public sbyte[] ut_line;

		public int ut_pid;

		public short ut_type;

		public timeval ut_tv;

		public sbyte[] ut_host;

		public uint[] ut_pad;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct lastlogx
	{
		public timeval ll_tv;

		public sbyte[] ll_line;

		public sbyte[] ll_host;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct wordexp_t
	{
		public nuint we_wordc;

		public unsafe sbyte** we_wordv;

		public nuint we_offs;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct option
	{
		public unsafe sbyte* name;

		public int has_arg;

		public unsafe int* flag;

		public int val;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CompTimeValue
	{
		public uint lo;

		public int hi;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct AbsoluteTime
	{
		public uint lo;

		public uint hi;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct extended80
	{
		public short exp;

		public ushort[] man;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct extended96
	{
		public short[] exp;

		public ushort[] man;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct Float32Point
	{
		public float x;

		public float y;
	}

	public enum  : uint
	{
		noErr = 0
	}

	public enum  : uint
	{
		NilOptions = 0
	}

	public enum  : uint
	{
		VariableLengthArray = 1
	}

	public enum  : uint
	{
		UnknownType = 1061109567
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ProcessSerialNumber
	{
		public uint highLongOfPSN;

		public uint lowLongOfPSN;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct Point
	{
		public short v;

		public short h;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct Rect
	{
		public short top;

		public short left;

		public short bottom;

		public short right;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct FixedPoint
	{
		public int x;

		public int y;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct FixedRect
	{
		public int left;

		public int top;

		public int right;

		public int bottom;
	}

	public enum  : uint
	{
		normal = 0,
		bold = 1,
		italic = 2,
		underline = 4,
		outline = 8,
		shadow = 16,
		condense = 32,
		extend = 64
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct TimeRecord
	{
		public CompTimeValue value;

		public int scale;

		public unsafe TimeBase* @base;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NumVersion
	{
		public byte nonRelRev;

		public byte stage;

		public byte minorAndBugRev;

		public byte majorRev;
	}

	public enum  : uint
	{
		developStage = 32,
		alphaStage = 64,
		betaStage = 96,
		finalStage = 128
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NumVersionVariant
	{
		[FieldOffset (0)]
		public NumVersion parts;

		[FieldOffset (0)]
		public uint whole;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct VersRec
	{
		public NumVersion numericVersion;

		public short countryCode;

		public byte[] shortVersion;

		public byte[] reserved;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct vm_statistics_data_t
	{
		public uint free_count;

		public uint active_count;

		public uint inactive_count;

		public uint wire_count;

		public uint zero_fill_count;

		public uint reactivations;

		public uint pageins;

		public uint pageouts;

		public uint faults;

		public uint cow_faults;

		public uint lookups;

		public uint hits;

		public uint purgeable_count;

		public uint purges;

		public uint speculative_count;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct vm_statistics64_data_t
	{
		public uint free_count;

		public uint active_count;

		public uint inactive_count;

		public uint wire_count;

		public ulong zero_fill_count;

		public ulong reactivations;

		public ulong pageins;

		public ulong pageouts;

		public ulong faults;

		public ulong cow_faults;

		public ulong lookups;

		public ulong hits;

		public ulong purges;

		public uint purgeable_count;

		public uint speculative_count;

		public ulong decompressions;

		public ulong compressions;

		public ulong swapins;

		public ulong swapouts;

		public uint compressor_page_count;

		public uint throttled_count;

		public uint external_page_count;

		public uint internal_page_count;

		public ulong total_uncompressed_pages_in_compressor;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct vm_extmod_statistics_data_t
	{
		public long task_for_pid_count;

		public long task_for_pid_caller_count;

		public long thread_creation_count;

		public long thread_creation_caller_count;

		public long thread_set_state_count;

		public long thread_set_state_caller_count;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct vm_purgeable_stat_t
	{
		public ulong count;

		public ulong size;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct task_purgable_info_t
	{
		public vm_purgeable_stat_t[] fifo_data;

		public vm_purgeable_stat_t obsolete_data;

		public vm_purgeable_stat_t[] lifo_data;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct time_value_t
	{
		public int seconds;

		public int microseconds;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct host_can_has_debugger_info_data_t
	{
		public int can_has_debugger;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct host_basic_info_data_t
	{
		public int max_cpus;

		public int avail_cpus;

		public uint memory_size;

		public int cpu_type;

		public int cpu_subtype;

		public int cpu_threadtype;

		public int physical_cpu;

		public int physical_cpu_max;

		public int logical_cpu;

		public int logical_cpu_max;

		public ulong max_mem;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct host_sched_info_data_t
	{
		public int min_timeout;

		public int min_quantum;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct kernel_resource_sizes_data_t
	{
		public uint task;

		public uint thread;

		public uint port;

		public uint memory_region;

		public uint memory_object;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct host_priority_info_data_t
	{
		public int kernel_priority;

		public int system_priority;

		public int server_priority;

		public int user_priority;

		public int depress_priority;

		public int idle_priority;

		public int minimum_priority;

		public int maximum_priority;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct host_load_info_data_t
	{
		public int[] avenrun;

		public int[] mach_factor;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct host_cpu_load_info_data_t
	{
		public uint[] cpu_ticks;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct memory_object_perf_info_data_t
	{
		public uint cluster_size;

		public int may_cache;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct memory_object_attr_info_data_t
	{
		public int copy_strategy;

		public uint cluster_size;

		public int may_cache_object;

		public int temporary;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct memory_object_behave_info_data_t
	{
		public int copy_strategy;

		public int temporary;

		public int invalidate;

		public int silent_overwrite;

		public int advisory_pageout;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_voucher_attr_recipe_data_t
	{
		public uint key;

		public uint command;

		public uint previous_voucher;

		public uint content_size;

		public byte[] content;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct processor_cpu_stat_data_t
	{
		public uint irq_ex_cnt;

		public uint ipi_cnt;

		public uint timer_cnt;

		public uint undef_ex_cnt;

		public uint unaligned_cnt;

		public uint vfp_cnt;

		public uint vfp_shortv_cnt;

		public uint data_ex_cnt;

		public uint instr_ex_cnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct processor_basic_info_data_t
	{
		public int cpu_type;

		public int cpu_subtype;

		public int running;

		public int slot_num;

		public int is_master;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct processor_cpu_load_info_data_t
	{
		public uint[] cpu_ticks;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct processor_set_basic_info_data_t
	{
		public int processor_count;

		public int default_policy;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct processor_set_load_info_data_t
	{
		public int task_count;

		public int thread_count;

		public int load_average;

		public int mach_factor;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct policy_timeshare_base_data_t
	{
		public int base_priority;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct policy_timeshare_limit_data_t
	{
		public int max_priority;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct policy_timeshare_info_data_t
	{
		public int max_priority;

		public int base_priority;

		public int cur_priority;

		public int depressed;

		public int depress_priority;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct policy_rr_base_data_t
	{
		public int base_priority;

		public int quantum;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct policy_rr_limit_data_t
	{
		public int max_priority;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct policy_rr_info_data_t
	{
		public int max_priority;

		public int base_priority;

		public int quantum;

		public int depressed;

		public int depress_priority;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct policy_fifo_base_data_t
	{
		public int base_priority;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct policy_fifo_limit_data_t
	{
		public int max_priority;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct policy_fifo_info_data_t
	{
		public int max_priority;

		public int base_priority;

		public int depressed;

		public int depress_priority;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct policy_base_data_t
	{
		public policy_timeshare_base_data_t ts;

		public policy_rr_base_data_t rr;

		public policy_fifo_base_data_t fifo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct policy_limit_data_t
	{
		public policy_timeshare_limit_data_t ts;

		public policy_rr_limit_data_t rr;

		public policy_fifo_limit_data_t fifo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct policy_info_data_t
	{
		public policy_timeshare_info_data_t ts;

		public policy_rr_info_data_t rr;

		public policy_fifo_info_data_t fifo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct task_basic_info_32_data_t
	{
		public int suspend_count;

		public uint virtual_size;

		public uint resident_size;

		public time_value_t user_time;

		public time_value_t system_time;

		public int policy;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct task_basic_info_64_data_t
	{
		public int suspend_count;

		public ulong virtual_size;

		public ulong resident_size;

		public time_value_t user_time;

		public time_value_t system_time;

		public int policy;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct task_basic_info_data_t
	{
		public int suspend_count;

		public UIntPtr virtual_size;

		public UIntPtr resident_size;

		public time_value_t user_time;

		public time_value_t system_time;

		public int policy;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct task_events_info_data_t
	{
		public int faults;

		public int pageins;

		public int cow_faults;

		public int messages_sent;

		public int messages_received;

		public int syscalls_mach;

		public int syscalls_unix;

		public int csw;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct task_thread_times_info_data_t
	{
		public time_value_t user_time;

		public time_value_t system_time;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct task_absolutetime_info_data_t
	{
		public ulong total_user;

		public ulong total_system;

		public ulong threads_user;

		public ulong threads_system;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct task_kernelmemory_info_data_t
	{
		public ulong total_palloc;

		public ulong total_pfree;

		public ulong total_salloc;

		public ulong total_sfree;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct task_affinity_tag_info_data_t
	{
		public int set_count;

		public int min;

		public int max;

		public int task_count;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct task_dyld_info_data_t
	{
		public ulong all_image_info_addr;

		public ulong all_image_info_size;

		public int all_image_info_format;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct task_basic_info_64_2_data_t
	{
		public int suspend_count;

		public ulong virtual_size;

		public ulong resident_size;

		public time_value_t user_time;

		public time_value_t system_time;

		public int policy;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct task_extmod_info_data_t
	{
		public byte[] task_uuid;

		public vm_extmod_statistics_data_t extmod_statistics;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_task_basic_info_data_t
	{
		public ulong virtual_size;

		public ulong resident_size;

		public ulong resident_size_max;

		public time_value_t user_time;

		public time_value_t system_time;

		public int policy;

		public int suspend_count;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct task_power_info_data_t
	{
		public ulong total_user;

		public ulong total_system;

		public ulong task_interrupt_wakeups;

		public ulong task_platform_idle_wakeups;

		public ulong task_timer_wakeups_bin_1;

		public ulong task_timer_wakeups_bin_2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct task_vm_info_data_t
	{
		public ulong virtual_size;

		public int region_count;

		public int page_size;

		public ulong resident_size;

		public ulong resident_size_peak;

		public ulong device;

		public ulong device_peak;

		public ulong @internal;

		public ulong internal_peak;

		public ulong external;

		public ulong external_peak;

		public ulong reusable;

		public ulong reusable_peak;

		public ulong purgeable_volatile_pmap;

		public ulong purgeable_volatile_resident;

		public ulong purgeable_volatile_virtual;

		public ulong compressed;

		public ulong compressed_peak;

		public ulong compressed_lifetime;

		public ulong phys_footprint;

		public ulong min_address;

		public ulong max_address;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct task_trace_memory_info_data_t
	{
		public ulong user_memory_address;

		public ulong buffer_size;

		public ulong mailbox_array_size;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct task_wait_state_info_data_t
	{
		public ulong total_wait_state_time;

		public ulong total_wait_sfi_state_time;

		public uint[] _reserved;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct gpu_energy_data
	{
		public ulong task_gpu_utilisation;

		public ulong task_gpu_stat_reserved0;

		public ulong task_gpu_stat_reserved1;

		public ulong task_gpu_stat_reserved2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct task_power_info_v2_data_t
	{
		public task_power_info_data_t cpu_energy;

		public gpu_energy_data gpu_energy;

		public ulong task_energy;

		public ulong task_ptime;

		public ulong task_pset_switches;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct task_flags_info_data_t
	{
		public uint flags;
	}

	public enum task_inspect_flavor : uint
	{
		TaskInspectBasicCounts = 1
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct task_inspect_basic_counts_data_t
	{
		public ulong instructions;

		public ulong cycles;
	}

	public enum task_role
	{
		Reniced = -1,
		Unspecified = 0,
		ForegroundApplication,
		BackgroundApplication,
		ControlApplication,
		GraphicsServer,
		ThrottleApplication,
		NonuiApplication,
		DefaultApplication
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct task_category_policy_data_t
	{
		public int role;
	}

	public enum task_latency_qos : uint
	{
		Unspecified = 0,
		LatencyQosTier0 = ((255 << 16) | 1),
		LatencyQosTier1 = ((255 << 16) | 2),
		LatencyQosTier2 = ((255 << 16) | 3),
		LatencyQosTier3 = ((255 << 16) | 4),
		LatencyQosTier4 = ((255 << 16) | 5),
		LatencyQosTier5 = ((255 << 16) | 6)
	}

	public enum task_throughput_qos : uint
	{
		Unspecified = 0,
		ThroughputQosTier0 = ((254 << 16) | 1),
		ThroughputQosTier1 = ((254 << 16) | 2),
		ThroughputQosTier2 = ((254 << 16) | 3),
		ThroughputQosTier3 = ((254 << 16) | 4),
		ThroughputQosTier4 = ((254 << 16) | 5),
		ThroughputQosTier5 = ((254 << 16) | 6)
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct task_qos_policy
	{
		public int task_latency_qos_tier;

		public int task_throughput_qos_tier;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct thread_basic_info_data_t
	{
		public time_value_t user_time;

		public time_value_t system_time;

		public int cpu_usage;

		public int policy;

		public int run_state;

		public int flags;

		public int suspend_count;

		public int sleep_time;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct thread_identifier_info_data_t
	{
		public ulong thread_id;

		public ulong thread_handle;

		public ulong dispatch_qaddr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct thread_extended_info_data_t
	{
		public ulong pth_user_time;

		public ulong pth_system_time;

		public int pth_cpu_usage;

		public int pth_policy;

		public int pth_run_state;

		public int pth_flags;

		public int pth_sleep_time;

		public int pth_curpri;

		public int pth_priority;

		public int pth_maxpriority;

		public sbyte[] pth_name;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct io_stat_entry
	{
		public ulong count;

		public ulong size;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct io_stat_info
	{
		public io_stat_entry disk_reads;

		public io_stat_entry[] io_priority;

		public io_stat_entry paging;

		public io_stat_entry metadata;

		public io_stat_entry total_io;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct thread_standard_policy_data_t
	{
		public uint no_data;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct thread_extended_policy_data_t
	{
		public int timeshare;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct thread_time_constraint_policy_data_t
	{
		public uint period;

		public uint computation;

		public uint constraint;

		public int preemptible;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct thread_precedence_policy_data_t
	{
		public int importance;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct thread_affinity_policy_data_t
	{
		public int affinity_tag;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct thread_background_policy_data_t
	{
		public int priority;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct thread_latency_qos_policy_data_t
	{
		public int thread_latency_qos_tier;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct thread_throughput_qos_policy_data_t
	{
		public int thread_throughput_qos_tier;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_timespec_t
	{
		public uint tv_sec;

		public int tv_nsec;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct vm_region_basic_info_data_64_t
	{
		public int protection;

		public int max_protection;

		public uint inheritance;

		public int shared;

		public int reserved;

		public ulong offset;

		public int behavior;

		public ushort user_wired_count;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct vm_region_basic_info_data_t
	{
		public int protection;

		public int max_protection;

		public uint inheritance;

		public int shared;

		public int reserved;

		public uint offset;

		public int behavior;

		public ushort user_wired_count;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct vm_region_extended_info_data_t
	{
		public int protection;

		public uint user_tag;

		public uint pages_resident;

		public uint pages_shared_now_private;

		public uint pages_swapped_out;

		public uint pages_dirtied;

		public uint ref_count;

		public ushort shadow_depth;

		public byte external_pager;

		public byte share_mode;

		public uint pages_reusable;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct vm_region_top_info_data_t
	{
		public uint obj_id;

		public uint ref_count;

		public uint private_pages_resident;

		public uint shared_pages_resident;

		public byte share_mode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct vm_region_submap_info_data_t
	{
		public int protection;

		public int max_protection;

		public uint inheritance;

		public uint offset;

		public uint user_tag;

		public uint pages_resident;

		public uint pages_shared_now_private;

		public uint pages_swapped_out;

		public uint pages_dirtied;

		public uint ref_count;

		public ushort shadow_depth;

		public byte external_pager;

		public byte share_mode;

		public int is_submap;

		public int behavior;

		public uint object_id;

		public ushort user_wired_count;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct vm_region_submap_info_data_64_t
	{
		public int protection;

		public int max_protection;

		public uint inheritance;

		public ulong offset;

		public uint user_tag;

		public uint pages_resident;

		public uint pages_shared_now_private;

		public uint pages_swapped_out;

		public uint pages_dirtied;

		public uint ref_count;

		public ushort shadow_depth;

		public byte external_pager;

		public byte share_mode;

		public int is_submap;

		public int behavior;

		public uint object_id;

		public ushort user_wired_count;

		public uint pages_reusable;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct vm_region_submap_short_info_data_64_t
	{
		public int protection;

		public int max_protection;

		public uint inheritance;

		public ulong offset;

		public uint user_tag;

		public uint ref_count;

		public ushort shadow_depth;

		public byte external_pager;

		public byte share_mode;

		public int is_submap;

		public int behavior;

		public uint object_id;

		public ushort user_wired_count;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_vm_read_entry
	{
		public ulong address;

		public ulong size;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct vm_read_entry
	{
		public UIntPtr address;

		public UIntPtr size;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct vm_page_info_basic_data_t
	{
		public int disposition;

		public int ref_count;

		public ulong object_id;

		public ulong offset;

		public int depth;

		public int __pad;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct kmod_reference_t
	{
		public unsafe kmod_reference* next;

		public unsafe kmod_info* info;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct kmod_info_t
	{
		public unsafe kmod_info* next;

		public int info_version;

		public uint id;

		public sbyte[] name;

		public sbyte[] version;

		public int reference_count;

		public unsafe kmod_reference_t* reference_list;

		public UIntPtr address;

		public UIntPtr size;

		public UIntPtr hdr_size;

		public unsafe kmod_start_func_t* start;

		public unsafe kmod_stop_func_t* stop;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct kmod_info_32_v1_t
	{
		public uint next_addr;

		public int info_version;

		public uint id;

		public byte[] name;

		public byte[] version;

		public int reference_count;

		public uint reference_list_addr;

		public uint address;

		public uint size;

		public uint hdr_size;

		public uint start_addr;

		public uint stop_addr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct kmod_info_64_v1_t
	{
		public ulong next_addr;

		public int info_version;

		public uint id;

		public byte[] name;

		public byte[] version;

		public int reference_count;

		public ulong reference_list_addr;

		public ulong address;

		public ulong size;

		public ulong hdr_size;

		public ulong start_addr;

		public ulong stop_addr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct dyld_kernel_image_info_t
	{
		public byte[] uuid;

		public fsobj_id_t fsobjid;

		public fsid_t fsid;

		public ulong load_addr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct dyld_kernel_process_info_t
	{
		public dyld_kernel_image_info cache_image_info;

		public ulong timestamp;

		public uint imageCount;

		public uint initialImageCount;

		public byte dyldState;

		public int no_cache;

		public int private_cache;
	}

	[Verify (InferredFromMemberPrefix)]
	public enum Os : uint
	{
		UnknownByteOrder,
		LittleEndian,
		BigEndian
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NDR_record_t
	{
		public byte mig_vers;

		public byte if_vers;

		public byte reserved1;

		public byte mig_encoding;

		public byte int_rep;

		public byte char_rep;

		public byte float_rep;

		public byte reserved2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_port_deleted_notification_t
	{
		public mach_msg_header_t not_header;

		public NDR_record_t NDR;

		public uint not_port;

		public mach_msg_format_0_trailer_t trailer;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_send_possible_notification_t
	{
		public mach_msg_header_t not_header;

		public NDR_record_t NDR;

		public uint not_port;

		public mach_msg_format_0_trailer_t trailer;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_port_destroyed_notification_t
	{
		public mach_msg_header_t not_header;

		public mach_msg_body_t not_body;

		public mach_msg_port_descriptor_t not_port;

		public mach_msg_format_0_trailer_t trailer;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_no_senders_notification_t
	{
		public mach_msg_header_t not_header;

		public NDR_record_t NDR;

		public uint not_count;

		public mach_msg_format_0_trailer_t trailer;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_send_once_notification_t
	{
		public mach_msg_header_t not_header;

		public mach_msg_format_0_trailer_t trailer;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_dead_name_notification_t
	{
		public mach_msg_header_t not_header;

		public NDR_record_t NDR;

		public uint not_port;

		public mach_msg_format_0_trailer_t trailer;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mig_routine_descriptor
	{
		public unsafe mig_impl_routine_t* impl_routine;

		public unsafe mig_stub_routine_t* stub_routine;

		public uint argc;

		public uint descr_count;

		public unsafe routine_arg_descriptor_t* arg_descr;

		public uint max_reply_msg;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mig_subsystem
	{
		public unsafe mig_server_routine_t* server;

		public int start;

		public int end;

		public uint maxsize;

		public UIntPtr reserved;

		public mig_routine_descriptor[] routine;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mig_symtab_t
	{
		public unsafe sbyte* ms_routine_name;

		public int ms_routine_number;

		public unsafe Action* ms_routine;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mig_reply_error_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__clock_set_time_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public mach_timespec_t new_time;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__clock_set_attributes_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int flavor;

		public uint clock_attrCnt;

		public int[] clock_attr;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct __RequestUnion__clock_priv_subsystem
	{
		[FieldOffset (0)]
		public __Request__clock_set_time_t Request_clock_set_time;

		[FieldOffset (0)]
		public __Request__clock_set_attributes_t Request_clock_set_attributes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__clock_set_time_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__clock_set_attributes_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct __ReplyUnion__clock_priv_subsystem
	{
		[FieldOffset (0)]
		public __Reply__clock_set_time_t Reply_clock_set_time;

		[FieldOffset (0)]
		public __Reply__clock_set_attributes_t Reply_clock_set_attributes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ipc_info_space_t
	{
		public uint iis_genno_mask;

		public uint iis_table_size;

		public uint iis_table_next;

		public uint iis_tree_size;

		public uint iis_tree_small;

		public uint iis_tree_hash;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ipc_info_space_basic_t
	{
		public uint iisb_genno_mask;

		public uint iisb_table_size;

		public uint iisb_table_next;

		public uint iisb_table_inuse;

		public uint[] iisb_reserved;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ipc_info_name_t
	{
		public uint iin_name;

		public int iin_collision;

		public uint iin_type;

		public uint iin_urefs;

		public uint iin_object;

		public uint iin_next;

		public uint iin_hash;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ipc_info_tree_name_t
	{
		public ipc_info_name_t iitn_name;

		public uint iitn_lchild;

		public uint iitn_rchild;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_vm_info_region_t
	{
		public ulong vir_start;

		public ulong vir_end;

		public ulong vir_object;

		public ulong vir_offset;

		public int vir_needs_copy;

		public int vir_protection;

		public int vir_max_protection;

		public uint vir_inheritance;

		public uint vir_wired_count;

		public uint vir_user_wired_count;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct vm_info_region_64_t
	{
		public uint vir_start;

		public uint vir_end;

		public uint vir_object;

		public ulong vir_offset;

		public int vir_needs_copy;

		public int vir_protection;

		public int vir_max_protection;

		public uint vir_inheritance;

		public uint vir_wired_count;

		public uint vir_user_wired_count;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct vm_info_region_t
	{
		public uint vir_start;

		public uint vir_end;

		public uint vir_object;

		public uint vir_offset;

		public int vir_needs_copy;

		public int vir_protection;

		public int vir_max_protection;

		public uint vir_inheritance;

		public uint vir_wired_count;

		public uint vir_user_wired_count;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct vm_info_object_t
	{
		public uint vio_object;

		public uint vio_size;

		public uint vio_ref_count;

		public uint vio_resident_page_count;

		public uint vio_absent_count;

		public uint vio_copy;

		public uint vio_shadow;

		public uint vio_shadow_offset;

		public uint vio_paging_offset;

		public int vio_copy_strategy;

		public UIntPtr vio_last_alloc;

		public uint vio_paging_in_progress;

		public int vio_pager_created;

		public int vio_pager_initialized;

		public int vio_pager_ready;

		public int vio_can_persist;

		public int vio_internal;

		public int vio_temporary;

		public int vio_alive;

		public int vio_purgable;

		public int vio_purgable_volatile;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct zone_name_t
	{
		public sbyte[] zn_name;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct zone_info_t
	{
		public int zi_count;

		public UIntPtr zi_cur_size;

		public UIntPtr zi_max_size;

		public UIntPtr zi_elem_size;

		public UIntPtr zi_alloc_size;

		public int zi_pageable;

		public int zi_sleepable;

		public int zi_exhaustible;

		public int zi_collectable;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_zone_name_t
	{
		public sbyte[] mzn_name;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_zone_info_t
	{
		public ulong mzi_count;

		public ulong mzi_cur_size;

		public ulong mzi_max_size;

		public ulong mzi_elem_size;

		public ulong mzi_alloc_size;

		public ulong mzi_sum_size;

		public ulong mzi_exhaustible;

		public ulong mzi_collectable;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct task_zone_info_t
	{
		public ulong tzi_count;

		public ulong tzi_cur_size;

		public ulong tzi_max_size;

		public ulong tzi_elem_size;

		public ulong tzi_alloc_size;

		public ulong tzi_sum_size;

		public ulong tzi_exhaustible;

		public ulong tzi_collectable;

		public ulong tzi_caller_acct;

		public ulong tzi_task_alloc;

		public ulong tzi_task_free;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_memory_info_t
	{
		public ulong flags;

		public ulong site;

		public ulong size;

		public ulong free;

		public ulong largest;

		public ulong collectable_bytes;

		public ulong mapped;

		public ulong peak;

		public ushort tag;

		public ushort zone;

		public ushort[] _resvA;

		public ulong[] _resv;

		public sbyte[] name;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct hash_info_bucket_t
	{
		public uint hib_count;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct lockgroup_info_t
	{
		public sbyte[] lockgroup_name;

		public ulong lockgroup_attr;

		public ulong lock_spin_cnt;

		public ulong lock_spin_util_cnt;

		public ulong lock_spin_held_cnt;

		public ulong lock_spin_miss_cnt;

		public ulong lock_spin_held_max;

		public ulong lock_spin_held_cum;

		public ulong lock_mtx_cnt;

		public ulong lock_mtx_util_cnt;

		public ulong lock_mtx_held_cnt;

		public ulong lock_mtx_miss_cnt;

		public ulong lock_mtx_wait_cnt;

		public ulong lock_mtx_held_max;

		public ulong lock_mtx_held_cum;

		public ulong lock_mtx_wait_max;

		public ulong lock_mtx_wait_cum;

		public ulong lock_rw_cnt;

		public ulong lock_rw_util_cnt;

		public ulong lock_rw_held_cnt;

		public ulong lock_rw_miss_cnt;

		public ulong lock_rw_wait_cnt;

		public ulong lock_rw_held_max;

		public ulong lock_rw_held_cum;

		public ulong lock_rw_wait_max;

		public ulong lock_rw_wait_cum;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_core_details
	{
		public ulong gzip_offset;

		public ulong gzip_length;

		public sbyte[] core_name;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_core_fileheader
	{
		public ulong signature;

		public ulong log_offset;

		public ulong log_length;

		public ulong num_files;

		public mach_core_details[] files;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__host_get_boot_info_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__host_reboot_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int options;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__host_priv_statistics_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int flavor;

		public uint host_info_outCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__host_default_memory_manager_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t default_manager;

		public NDR_record_t NDR;

		public uint cluster_size;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__vm_wire_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t task;

		public NDR_record_t NDR;

		public UIntPtr address;

		public UIntPtr size;

		public int desired_access;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__thread_wire_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t thread;

		public NDR_record_t NDR;

		public int wired;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__vm_allocate_cpm_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t task;

		public NDR_record_t NDR;

		public UIntPtr address;

		public UIntPtr size;

		public int flags;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__host_processors_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__host_get_clock_control_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int clock_id;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__kmod_create_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public UIntPtr info;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__kmod_destroy_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int module;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__kmod_control_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_ool_descriptor_t data;

		public NDR_record_t NDR;

		public int module;

		public int flavor;

		public uint dataCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__host_get_special_port_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int node;

		public int which;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__host_set_special_port_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t port;

		public NDR_record_t NDR;

		public int which;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__host_set_exception_ports_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t new_port;

		public NDR_record_t NDR;

		public uint exception_mask;

		public int behavior;

		public int new_flavor;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__host_get_exception_ports_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint exception_mask;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__host_swap_exception_ports_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t new_port;

		public NDR_record_t NDR;

		public uint exception_mask;

		public int behavior;

		public int new_flavor;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_vm_wire_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t task;

		public NDR_record_t NDR;

		public ulong address;

		public ulong size;

		public int desired_access;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__host_processor_sets_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__host_processor_set_priv_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t set_name;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__host_set_UNDServer_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t server;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__host_get_UNDServer_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__kext_request_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_ool_descriptor_t request_data;

		public NDR_record_t NDR;

		public uint user_log_flags;

		public uint request_dataCnt;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct __RequestUnion__host_priv_subsystem
	{
		[FieldOffset (0)]
		public __Request__host_get_boot_info_t Request_host_get_boot_info;

		[FieldOffset (0)]
		public __Request__host_reboot_t Request_host_reboot;

		[FieldOffset (0)]
		public __Request__host_priv_statistics_t Request_host_priv_statistics;

		[FieldOffset (0)]
		public __Request__host_default_memory_manager_t Request_host_default_memory_manager;

		[FieldOffset (0)]
		public __Request__vm_wire_t Request_vm_wire;

		[FieldOffset (0)]
		public __Request__thread_wire_t Request_thread_wire;

		[FieldOffset (0)]
		public __Request__vm_allocate_cpm_t Request_vm_allocate_cpm;

		[FieldOffset (0)]
		public __Request__host_processors_t Request_host_processors;

		[FieldOffset (0)]
		public __Request__host_get_clock_control_t Request_host_get_clock_control;

		[FieldOffset (0)]
		public __Request__kmod_create_t Request_kmod_create;

		[FieldOffset (0)]
		public __Request__kmod_destroy_t Request_kmod_destroy;

		[FieldOffset (0)]
		public __Request__kmod_control_t Request_kmod_control;

		[FieldOffset (0)]
		public __Request__host_get_special_port_t Request_host_get_special_port;

		[FieldOffset (0)]
		public __Request__host_set_special_port_t Request_host_set_special_port;

		[FieldOffset (0)]
		public __Request__host_set_exception_ports_t Request_host_set_exception_ports;

		[FieldOffset (0)]
		public __Request__host_get_exception_ports_t Request_host_get_exception_ports;

		[FieldOffset (0)]
		public __Request__host_swap_exception_ports_t Request_host_swap_exception_ports;

		[FieldOffset (0)]
		public __Request__mach_vm_wire_t Request_mach_vm_wire;

		[FieldOffset (0)]
		public __Request__host_processor_sets_t Request_host_processor_sets;

		[FieldOffset (0)]
		public __Request__host_processor_set_priv_t Request_host_processor_set_priv;

		[FieldOffset (0)]
		public __Request__host_set_UNDServer_t Request_host_set_UNDServer;

		[FieldOffset (0)]
		public __Request__host_get_UNDServer_t Request_host_get_UNDServer;

		[FieldOffset (0)]
		public __Request__kext_request_t Request_kext_request;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__host_get_boot_info_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public uint boot_infoOffset;

		public uint boot_infoCnt;

		public sbyte[] boot_info;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__host_reboot_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__host_priv_statistics_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public uint host_info_outCnt;

		public int[] host_info_out;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__host_default_memory_manager_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t default_manager;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__vm_wire_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__thread_wire_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__vm_allocate_cpm_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public UIntPtr address;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__host_processors_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_ool_ports_descriptor_t out_processor_list;

		public NDR_record_t NDR;

		public uint out_processor_listCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__host_get_clock_control_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t clock_ctrl;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__kmod_create_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public int module;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__kmod_destroy_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__kmod_control_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_ool_descriptor_t data;

		public NDR_record_t NDR;

		public uint dataCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__host_get_special_port_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t port;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__host_set_special_port_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__host_set_exception_ports_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__host_get_exception_ports_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t[] old_handlers;

		public NDR_record_t NDR;

		public uint masksCnt;

		public uint[] masks;

		public int[] old_behaviors;

		public int[] old_flavors;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__host_swap_exception_ports_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t[] old_handlerss;

		public NDR_record_t NDR;

		public uint masksCnt;

		public uint[] masks;

		public int[] old_behaviors;

		public int[] old_flavors;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_vm_wire_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__host_processor_sets_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_ool_ports_descriptor_t processor_sets;

		public NDR_record_t NDR;

		public uint processor_setsCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__host_processor_set_priv_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t set;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__host_set_UNDServer_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__host_get_UNDServer_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t server;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__kext_request_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_ool_descriptor_t response_data;

		public mach_msg_ool_descriptor_t log_data;

		public NDR_record_t NDR;

		public uint response_dataCnt;

		public uint log_dataCnt;

		public int op_result;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct __ReplyUnion__host_priv_subsystem
	{
		[FieldOffset (0)]
		public __Reply__host_get_boot_info_t Reply_host_get_boot_info;

		[FieldOffset (0)]
		public __Reply__host_reboot_t Reply_host_reboot;

		[FieldOffset (0)]
		public __Reply__host_priv_statistics_t Reply_host_priv_statistics;

		[FieldOffset (0)]
		public __Reply__host_default_memory_manager_t Reply_host_default_memory_manager;

		[FieldOffset (0)]
		public __Reply__vm_wire_t Reply_vm_wire;

		[FieldOffset (0)]
		public __Reply__thread_wire_t Reply_thread_wire;

		[FieldOffset (0)]
		public __Reply__vm_allocate_cpm_t Reply_vm_allocate_cpm;

		[FieldOffset (0)]
		public __Reply__host_processors_t Reply_host_processors;

		[FieldOffset (0)]
		public __Reply__host_get_clock_control_t Reply_host_get_clock_control;

		[FieldOffset (0)]
		public __Reply__kmod_create_t Reply_kmod_create;

		[FieldOffset (0)]
		public __Reply__kmod_destroy_t Reply_kmod_destroy;

		[FieldOffset (0)]
		public __Reply__kmod_control_t Reply_kmod_control;

		[FieldOffset (0)]
		public __Reply__host_get_special_port_t Reply_host_get_special_port;

		[FieldOffset (0)]
		public __Reply__host_set_special_port_t Reply_host_set_special_port;

		[FieldOffset (0)]
		public __Reply__host_set_exception_ports_t Reply_host_set_exception_ports;

		[FieldOffset (0)]
		public __Reply__host_get_exception_ports_t Reply_host_get_exception_ports;

		[FieldOffset (0)]
		public __Reply__host_swap_exception_ports_t Reply_host_swap_exception_ports;

		[FieldOffset (0)]
		public __Reply__mach_vm_wire_t Reply_mach_vm_wire;

		[FieldOffset (0)]
		public __Reply__host_processor_sets_t Reply_host_processor_sets;

		[FieldOffset (0)]
		public __Reply__host_processor_set_priv_t Reply_host_processor_set_priv;

		[FieldOffset (0)]
		public __Reply__host_set_UNDServer_t Reply_host_set_UNDServer;

		[FieldOffset (0)]
		public __Reply__host_get_UNDServer_t Reply_host_get_UNDServer;

		[FieldOffset (0)]
		public __Reply__kext_request_t Reply_kext_request;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__host_security_create_task_token_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t parent_task;

		public mach_msg_port_descriptor_t host;

		public mach_msg_ool_ports_descriptor_t ledgers;

		public NDR_record_t NDR;

		public security_token_t sec_token;

		public audit_token_t audit_token;

		public uint ledgersCnt;

		public int inherit_memory;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__host_security_set_task_token_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t target_task;

		public mach_msg_port_descriptor_t host;

		public NDR_record_t NDR;

		public security_token_t sec_token;

		public audit_token_t audit_token;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct __RequestUnion__host_security_subsystem
	{
		[FieldOffset (0)]
		public __Request__host_security_create_task_token_t Request_host_security_create_task_token;

		[FieldOffset (0)]
		public __Request__host_security_set_task_token_t Request_host_security_set_task_token;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__host_security_create_task_token_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t child_task;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__host_security_set_task_token_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct __ReplyUnion__host_security_subsystem
	{
		[FieldOffset (0)]
		public __Reply__host_security_create_task_token_t Reply_host_security_create_task_token;

		[FieldOffset (0)]
		public __Reply__host_security_set_task_token_t Reply_host_security_set_task_token;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__lock_acquire_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int lock_id;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__lock_release_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int lock_id;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__lock_try_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int lock_id;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__lock_make_stable_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int lock_id;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__lock_handoff_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int lock_id;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__lock_handoff_accept_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int lock_id;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct __RequestUnion__lock_set_subsystem
	{
		[FieldOffset (0)]
		public __Request__lock_acquire_t Request_lock_acquire;

		[FieldOffset (0)]
		public __Request__lock_release_t Request_lock_release;

		[FieldOffset (0)]
		public __Request__lock_try_t Request_lock_try;

		[FieldOffset (0)]
		public __Request__lock_make_stable_t Request_lock_make_stable;

		[FieldOffset (0)]
		public __Request__lock_handoff_t Request_lock_handoff;

		[FieldOffset (0)]
		public __Request__lock_handoff_accept_t Request_lock_handoff_accept;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__lock_acquire_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__lock_release_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__lock_try_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__lock_make_stable_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__lock_handoff_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__lock_handoff_accept_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct __ReplyUnion__lock_set_subsystem
	{
		[FieldOffset (0)]
		public __Reply__lock_acquire_t Reply_lock_acquire;

		[FieldOffset (0)]
		public __Reply__lock_release_t Reply_lock_release;

		[FieldOffset (0)]
		public __Reply__lock_try_t Reply_lock_try;

		[FieldOffset (0)]
		public __Reply__lock_make_stable_t Reply_lock_make_stable;

		[FieldOffset (0)]
		public __Reply__lock_handoff_t Reply_lock_handoff;

		[FieldOffset (0)]
		public __Reply__lock_handoff_accept_t Reply_lock_handoff_accept;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__processor_start_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__processor_exit_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__processor_info_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int flavor;

		public uint processor_info_outCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__processor_control_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint processor_cmdCnt;

		public int[] processor_cmd;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__processor_assign_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t new_set;

		public NDR_record_t NDR;

		public int wait;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__processor_get_assignment_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct __RequestUnion__processor_subsystem
	{
		[FieldOffset (0)]
		public __Request__processor_start_t Request_processor_start;

		[FieldOffset (0)]
		public __Request__processor_exit_t Request_processor_exit;

		[FieldOffset (0)]
		public __Request__processor_info_t Request_processor_info;

		[FieldOffset (0)]
		public __Request__processor_control_t Request_processor_control;

		[FieldOffset (0)]
		public __Request__processor_assign_t Request_processor_assign;

		[FieldOffset (0)]
		public __Request__processor_get_assignment_t Request_processor_get_assignment;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__processor_start_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__processor_exit_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__processor_info_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t host;

		public NDR_record_t NDR;

		public uint processor_info_outCnt;

		public int[] processor_info_out;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__processor_control_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__processor_assign_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__processor_get_assignment_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t assigned_set;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct __ReplyUnion__processor_subsystem
	{
		[FieldOffset (0)]
		public __Reply__processor_start_t Reply_processor_start;

		[FieldOffset (0)]
		public __Reply__processor_exit_t Reply_processor_exit;

		[FieldOffset (0)]
		public __Reply__processor_info_t Reply_processor_info;

		[FieldOffset (0)]
		public __Reply__processor_control_t Reply_processor_control;

		[FieldOffset (0)]
		public __Reply__processor_assign_t Reply_processor_assign;

		[FieldOffset (0)]
		public __Reply__processor_get_assignment_t Reply_processor_get_assignment;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__processor_set_statistics_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int flavor;

		public uint info_outCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__processor_set_destroy_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__processor_set_max_priority_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int max_priority;

		public int change_threads;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__processor_set_policy_enable_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int policy;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__processor_set_policy_disable_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int policy;

		public int change_threads;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__processor_set_tasks_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__processor_set_threads_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__processor_set_policy_control_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int flavor;

		public uint policy_infoCnt;

		public int[] policy_info;

		public int change;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__processor_set_stack_usage_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__processor_set_info_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int flavor;

		public uint info_outCnt;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct __RequestUnion__processor_set_subsystem
	{
		[FieldOffset (0)]
		public __Request__processor_set_statistics_t Request_processor_set_statistics;

		[FieldOffset (0)]
		public __Request__processor_set_destroy_t Request_processor_set_destroy;

		[FieldOffset (0)]
		public __Request__processor_set_max_priority_t Request_processor_set_max_priority;

		[FieldOffset (0)]
		public __Request__processor_set_policy_enable_t Request_processor_set_policy_enable;

		[FieldOffset (0)]
		public __Request__processor_set_policy_disable_t Request_processor_set_policy_disable;

		[FieldOffset (0)]
		public __Request__processor_set_tasks_t Request_processor_set_tasks;

		[FieldOffset (0)]
		public __Request__processor_set_threads_t Request_processor_set_threads;

		[FieldOffset (0)]
		public __Request__processor_set_policy_control_t Request_processor_set_policy_control;

		[FieldOffset (0)]
		public __Request__processor_set_stack_usage_t Request_processor_set_stack_usage;

		[FieldOffset (0)]
		public __Request__processor_set_info_t Request_processor_set_info;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__processor_set_statistics_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public uint info_outCnt;

		public int[] info_out;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__processor_set_destroy_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__processor_set_max_priority_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__processor_set_policy_enable_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__processor_set_policy_disable_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__processor_set_tasks_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_ool_ports_descriptor_t task_list;

		public NDR_record_t NDR;

		public uint task_listCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__processor_set_threads_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_ool_ports_descriptor_t thread_list;

		public NDR_record_t NDR;

		public uint thread_listCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__processor_set_policy_control_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__processor_set_stack_usage_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public uint ltotal;

		public UIntPtr space;

		public UIntPtr resident;

		public UIntPtr maxusage;

		public UIntPtr maxstack;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__processor_set_info_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t host;

		public NDR_record_t NDR;

		public uint info_outCnt;

		public int[] info_out;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct __ReplyUnion__processor_set_subsystem
	{
		[FieldOffset (0)]
		public __Reply__processor_set_statistics_t Reply_processor_set_statistics;

		[FieldOffset (0)]
		public __Reply__processor_set_destroy_t Reply_processor_set_destroy;

		[FieldOffset (0)]
		public __Reply__processor_set_max_priority_t Reply_processor_set_max_priority;

		[FieldOffset (0)]
		public __Reply__processor_set_policy_enable_t Reply_processor_set_policy_enable;

		[FieldOffset (0)]
		public __Reply__processor_set_policy_disable_t Reply_processor_set_policy_disable;

		[FieldOffset (0)]
		public __Reply__processor_set_tasks_t Reply_processor_set_tasks;

		[FieldOffset (0)]
		public __Reply__processor_set_threads_t Reply_processor_set_threads;

		[FieldOffset (0)]
		public __Reply__processor_set_policy_control_t Reply_processor_set_policy_control;

		[FieldOffset (0)]
		public __Reply__processor_set_stack_usage_t Reply_processor_set_stack_usage;

		[FieldOffset (0)]
		public __Reply__processor_set_info_t Reply_processor_set_info;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_create_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_ool_ports_descriptor_t ledgers;

		public NDR_record_t NDR;

		public uint ledgersCnt;

		public int inherit_memory;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_terminate_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_threads_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_ports_register_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_ool_ports_descriptor_t init_port_set;

		public NDR_record_t NDR;

		public uint init_port_setCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_ports_lookup_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_info_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint flavor;

		public uint task_info_outCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_set_info_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint flavor;

		public uint task_info_inCnt;

		public int[] task_info_in;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_suspend_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_resume_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_get_special_port_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int which_port;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_set_special_port_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t special_port;

		public NDR_record_t NDR;

		public int which_port;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__thread_create_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__thread_create_running_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int flavor;

		public uint new_stateCnt;

		public uint[] new_state;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_set_exception_ports_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t new_port;

		public NDR_record_t NDR;

		public uint exception_mask;

		public int behavior;

		public int new_flavor;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_get_exception_ports_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint exception_mask;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_swap_exception_ports_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t new_port;

		public NDR_record_t NDR;

		public uint exception_mask;

		public int behavior;

		public int new_flavor;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__lock_set_create_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int n_ulocks;

		public int policy;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__lock_set_destroy_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t lock_set;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__semaphore_create_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int policy;

		public int value;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__semaphore_destroy_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t semaphore;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_policy_set_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint flavor;

		public uint policy_infoCnt;

		public int[] policy_info;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_policy_get_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint flavor;

		public uint policy_infoCnt;

		public int get_default;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_sample_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t reply;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_policy_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int policy;

		public uint baseCnt;

		public int[] @base;

		public int set_limit;

		public int change;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_set_emulation_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public UIntPtr routine_entry_pt;

		public int routine_number;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_get_emulation_vector_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_set_emulation_vector_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_ool_descriptor_t emulation_vector;

		public NDR_record_t NDR;

		public int vector_start;

		public uint emulation_vectorCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_set_ras_pc_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public UIntPtr basepc;

		public UIntPtr boundspc;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_zone_info_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_assign_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t new_set;

		public NDR_record_t NDR;

		public int assign_threads;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_assign_default_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int assign_threads;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_get_assignment_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_set_policy_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t pset;

		public NDR_record_t NDR;

		public int policy;

		public uint baseCnt;

		public int[] @base;

		public uint limitCnt;

		public int[] limit;

		public int change;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_get_state_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int flavor;

		public uint old_stateCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_set_state_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int flavor;

		public uint new_stateCnt;

		public uint[] new_state;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_set_phys_footprint_limit_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int new_limit;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_suspend2_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_resume2_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_purgable_info_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_get_mach_voucher_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint which;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_set_mach_voucher_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t voucher;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_swap_mach_voucher_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t new_voucher;

		public mach_msg_port_descriptor_t old_voucher;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_generate_corpse_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_map_corpse_info_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t corspe_task;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_register_dyld_image_infos_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_ool_descriptor_t dyld_images;

		public NDR_record_t NDR;

		public uint dyld_imagesCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_unregister_dyld_image_infos_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_ool_descriptor_t dyld_images;

		public NDR_record_t NDR;

		public uint dyld_imagesCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_get_dyld_image_infos_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_register_dyld_shared_cache_image_info_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public dyld_kernel_image_info_t dyld_cache_image;

		public int no_cache;

		public int private_cache;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_register_dyld_set_dyld_state_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public byte dyld_state;

		public sbyte[] dyld_statePad;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_register_dyld_get_process_state_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_map_corpse_info_64_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t corspe_task;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_inspect_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint flavor;

		public uint info_outCnt;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct __RequestUnion__task_subsystem
	{
		[FieldOffset (0)]
		public __Request__task_create_t Request_task_create;

		[FieldOffset (0)]
		public __Request__task_terminate_t Request_task_terminate;

		[FieldOffset (0)]
		public __Request__task_threads_t Request_task_threads;

		[FieldOffset (0)]
		public __Request__mach_ports_register_t Request_mach_ports_register;

		[FieldOffset (0)]
		public __Request__mach_ports_lookup_t Request_mach_ports_lookup;

		[FieldOffset (0)]
		public __Request__task_info_t Request_task_info;

		[FieldOffset (0)]
		public __Request__task_set_info_t Request_task_set_info;

		[FieldOffset (0)]
		public __Request__task_suspend_t Request_task_suspend;

		[FieldOffset (0)]
		public __Request__task_resume_t Request_task_resume;

		[FieldOffset (0)]
		public __Request__task_get_special_port_t Request_task_get_special_port;

		[FieldOffset (0)]
		public __Request__task_set_special_port_t Request_task_set_special_port;

		[FieldOffset (0)]
		public __Request__thread_create_t Request_thread_create;

		[FieldOffset (0)]
		public __Request__thread_create_running_t Request_thread_create_running;

		[FieldOffset (0)]
		public __Request__task_set_exception_ports_t Request_task_set_exception_ports;

		[FieldOffset (0)]
		public __Request__task_get_exception_ports_t Request_task_get_exception_ports;

		[FieldOffset (0)]
		public __Request__task_swap_exception_ports_t Request_task_swap_exception_ports;

		[FieldOffset (0)]
		public __Request__lock_set_create_t Request_lock_set_create;

		[FieldOffset (0)]
		public __Request__lock_set_destroy_t Request_lock_set_destroy;

		[FieldOffset (0)]
		public __Request__semaphore_create_t Request_semaphore_create;

		[FieldOffset (0)]
		public __Request__semaphore_destroy_t Request_semaphore_destroy;

		[FieldOffset (0)]
		public __Request__task_policy_set_t Request_task_policy_set;

		[FieldOffset (0)]
		public __Request__task_policy_get_t Request_task_policy_get;

		[FieldOffset (0)]
		public __Request__task_sample_t Request_task_sample;

		[FieldOffset (0)]
		public __Request__task_policy_t Request_task_policy;

		[FieldOffset (0)]
		public __Request__task_set_emulation_t Request_task_set_emulation;

		[FieldOffset (0)]
		public __Request__task_get_emulation_vector_t Request_task_get_emulation_vector;

		[FieldOffset (0)]
		public __Request__task_set_emulation_vector_t Request_task_set_emulation_vector;

		[FieldOffset (0)]
		public __Request__task_set_ras_pc_t Request_task_set_ras_pc;

		[FieldOffset (0)]
		public __Request__task_zone_info_t Request_task_zone_info;

		[FieldOffset (0)]
		public __Request__task_assign_t Request_task_assign;

		[FieldOffset (0)]
		public __Request__task_assign_default_t Request_task_assign_default;

		[FieldOffset (0)]
		public __Request__task_get_assignment_t Request_task_get_assignment;

		[FieldOffset (0)]
		public __Request__task_set_policy_t Request_task_set_policy;

		[FieldOffset (0)]
		public __Request__task_get_state_t Request_task_get_state;

		[FieldOffset (0)]
		public __Request__task_set_state_t Request_task_set_state;

		[FieldOffset (0)]
		public __Request__task_set_phys_footprint_limit_t Request_task_set_phys_footprint_limit;

		[FieldOffset (0)]
		public __Request__task_suspend2_t Request_task_suspend2;

		[FieldOffset (0)]
		public __Request__task_resume2_t Request_task_resume2;

		[FieldOffset (0)]
		public __Request__task_purgable_info_t Request_task_purgable_info;

		[FieldOffset (0)]
		public __Request__task_get_mach_voucher_t Request_task_get_mach_voucher;

		[FieldOffset (0)]
		public __Request__task_set_mach_voucher_t Request_task_set_mach_voucher;

		[FieldOffset (0)]
		public __Request__task_swap_mach_voucher_t Request_task_swap_mach_voucher;

		[FieldOffset (0)]
		public __Request__task_generate_corpse_t Request_task_generate_corpse;

		[FieldOffset (0)]
		public __Request__task_map_corpse_info_t Request_task_map_corpse_info;

		[FieldOffset (0)]
		public __Request__task_register_dyld_image_infos_t Request_task_register_dyld_image_infos;

		[FieldOffset (0)]
		public __Request__task_unregister_dyld_image_infos_t Request_task_unregister_dyld_image_infos;

		[FieldOffset (0)]
		public __Request__task_get_dyld_image_infos_t Request_task_get_dyld_image_infos;

		[FieldOffset (0)]
		public __Request__task_register_dyld_shared_cache_image_info_t Request_task_register_dyld_shared_cache_image_info;

		[FieldOffset (0)]
		public __Request__task_register_dyld_set_dyld_state_t Request_task_register_dyld_set_dyld_state;

		[FieldOffset (0)]
		public __Request__task_register_dyld_get_process_state_t Request_task_register_dyld_get_process_state;

		[FieldOffset (0)]
		public __Request__task_map_corpse_info_64_t Request_task_map_corpse_info_64;

		[FieldOffset (0)]
		public __Request__task_inspect_t Request_task_inspect;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_create_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t child_task;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_terminate_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_threads_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_ool_ports_descriptor_t act_list;

		public NDR_record_t NDR;

		public uint act_listCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_ports_register_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_ports_lookup_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_ool_ports_descriptor_t init_port_set;

		public NDR_record_t NDR;

		public uint init_port_setCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_info_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public uint task_info_outCnt;

		public int[] task_info_out;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_set_info_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_suspend_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_resume_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_get_special_port_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t special_port;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_set_special_port_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__thread_create_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t child_act;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__thread_create_running_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t child_act;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_set_exception_ports_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_get_exception_ports_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t[] old_handlers;

		public NDR_record_t NDR;

		public uint masksCnt;

		public uint[] masks;

		public int[] old_behaviors;

		public int[] old_flavors;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_swap_exception_ports_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t[] old_handlerss;

		public NDR_record_t NDR;

		public uint masksCnt;

		public uint[] masks;

		public int[] old_behaviors;

		public int[] old_flavors;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__lock_set_create_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t new_lock_set;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__lock_set_destroy_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__semaphore_create_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t semaphore;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__semaphore_destroy_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_policy_set_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_policy_get_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public uint policy_infoCnt;

		public int[] policy_info;

		public int get_default;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_sample_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_policy_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_set_emulation_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_get_emulation_vector_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_ool_descriptor_t emulation_vector;

		public NDR_record_t NDR;

		public int vector_start;

		public uint emulation_vectorCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_set_emulation_vector_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_set_ras_pc_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_zone_info_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_ool_descriptor_t names;

		public mach_msg_ool_descriptor_t info;

		public NDR_record_t NDR;

		public uint namesCnt;

		public uint infoCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_assign_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_assign_default_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_get_assignment_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t assigned_set;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_set_policy_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_get_state_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public uint old_stateCnt;

		public uint[] old_state;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_set_state_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_set_phys_footprint_limit_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public int old_limit;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_suspend2_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t suspend_token;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_resume2_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_purgable_info_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public task_purgable_info_t stats;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_get_mach_voucher_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t voucher;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_set_mach_voucher_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_swap_mach_voucher_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t old_voucher;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_generate_corpse_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t corpse_task_port;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_map_corpse_info_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public UIntPtr kcd_addr_begin;

		public uint kcd_size;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_register_dyld_image_infos_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_unregister_dyld_image_infos_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_get_dyld_image_infos_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_ool_descriptor_t dyld_images;

		public NDR_record_t NDR;

		public uint dyld_imagesCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_register_dyld_shared_cache_image_info_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_register_dyld_set_dyld_state_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_register_dyld_get_process_state_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public dyld_kernel_process_info_t dyld_process_state;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_map_corpse_info_64_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public ulong kcd_addr_begin;

		public ulong kcd_size;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_inspect_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public uint info_outCnt;

		public int[] info_out;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct __ReplyUnion__task_subsystem
	{
		[FieldOffset (0)]
		public __Reply__task_create_t Reply_task_create;

		[FieldOffset (0)]
		public __Reply__task_terminate_t Reply_task_terminate;

		[FieldOffset (0)]
		public __Reply__task_threads_t Reply_task_threads;

		[FieldOffset (0)]
		public __Reply__mach_ports_register_t Reply_mach_ports_register;

		[FieldOffset (0)]
		public __Reply__mach_ports_lookup_t Reply_mach_ports_lookup;

		[FieldOffset (0)]
		public __Reply__task_info_t Reply_task_info;

		[FieldOffset (0)]
		public __Reply__task_set_info_t Reply_task_set_info;

		[FieldOffset (0)]
		public __Reply__task_suspend_t Reply_task_suspend;

		[FieldOffset (0)]
		public __Reply__task_resume_t Reply_task_resume;

		[FieldOffset (0)]
		public __Reply__task_get_special_port_t Reply_task_get_special_port;

		[FieldOffset (0)]
		public __Reply__task_set_special_port_t Reply_task_set_special_port;

		[FieldOffset (0)]
		public __Reply__thread_create_t Reply_thread_create;

		[FieldOffset (0)]
		public __Reply__thread_create_running_t Reply_thread_create_running;

		[FieldOffset (0)]
		public __Reply__task_set_exception_ports_t Reply_task_set_exception_ports;

		[FieldOffset (0)]
		public __Reply__task_get_exception_ports_t Reply_task_get_exception_ports;

		[FieldOffset (0)]
		public __Reply__task_swap_exception_ports_t Reply_task_swap_exception_ports;

		[FieldOffset (0)]
		public __Reply__lock_set_create_t Reply_lock_set_create;

		[FieldOffset (0)]
		public __Reply__lock_set_destroy_t Reply_lock_set_destroy;

		[FieldOffset (0)]
		public __Reply__semaphore_create_t Reply_semaphore_create;

		[FieldOffset (0)]
		public __Reply__semaphore_destroy_t Reply_semaphore_destroy;

		[FieldOffset (0)]
		public __Reply__task_policy_set_t Reply_task_policy_set;

		[FieldOffset (0)]
		public __Reply__task_policy_get_t Reply_task_policy_get;

		[FieldOffset (0)]
		public __Reply__task_sample_t Reply_task_sample;

		[FieldOffset (0)]
		public __Reply__task_policy_t Reply_task_policy;

		[FieldOffset (0)]
		public __Reply__task_set_emulation_t Reply_task_set_emulation;

		[FieldOffset (0)]
		public __Reply__task_get_emulation_vector_t Reply_task_get_emulation_vector;

		[FieldOffset (0)]
		public __Reply__task_set_emulation_vector_t Reply_task_set_emulation_vector;

		[FieldOffset (0)]
		public __Reply__task_set_ras_pc_t Reply_task_set_ras_pc;

		[FieldOffset (0)]
		public __Reply__task_zone_info_t Reply_task_zone_info;

		[FieldOffset (0)]
		public __Reply__task_assign_t Reply_task_assign;

		[FieldOffset (0)]
		public __Reply__task_assign_default_t Reply_task_assign_default;

		[FieldOffset (0)]
		public __Reply__task_get_assignment_t Reply_task_get_assignment;

		[FieldOffset (0)]
		public __Reply__task_set_policy_t Reply_task_set_policy;

		[FieldOffset (0)]
		public __Reply__task_get_state_t Reply_task_get_state;

		[FieldOffset (0)]
		public __Reply__task_set_state_t Reply_task_set_state;

		[FieldOffset (0)]
		public __Reply__task_set_phys_footprint_limit_t Reply_task_set_phys_footprint_limit;

		[FieldOffset (0)]
		public __Reply__task_suspend2_t Reply_task_suspend2;

		[FieldOffset (0)]
		public __Reply__task_resume2_t Reply_task_resume2;

		[FieldOffset (0)]
		public __Reply__task_purgable_info_t Reply_task_purgable_info;

		[FieldOffset (0)]
		public __Reply__task_get_mach_voucher_t Reply_task_get_mach_voucher;

		[FieldOffset (0)]
		public __Reply__task_set_mach_voucher_t Reply_task_set_mach_voucher;

		[FieldOffset (0)]
		public __Reply__task_swap_mach_voucher_t Reply_task_swap_mach_voucher;

		[FieldOffset (0)]
		public __Reply__task_generate_corpse_t Reply_task_generate_corpse;

		[FieldOffset (0)]
		public __Reply__task_map_corpse_info_t Reply_task_map_corpse_info;

		[FieldOffset (0)]
		public __Reply__task_register_dyld_image_infos_t Reply_task_register_dyld_image_infos;

		[FieldOffset (0)]
		public __Reply__task_unregister_dyld_image_infos_t Reply_task_unregister_dyld_image_infos;

		[FieldOffset (0)]
		public __Reply__task_get_dyld_image_infos_t Reply_task_get_dyld_image_infos;

		[FieldOffset (0)]
		public __Reply__task_register_dyld_shared_cache_image_info_t Reply_task_register_dyld_shared_cache_image_info;

		[FieldOffset (0)]
		public __Reply__task_register_dyld_set_dyld_state_t Reply_task_register_dyld_set_dyld_state;

		[FieldOffset (0)]
		public __Reply__task_register_dyld_get_process_state_t Reply_task_register_dyld_get_process_state;

		[FieldOffset (0)]
		public __Reply__task_map_corpse_info_64_t Reply_task_map_corpse_info_64;

		[FieldOffset (0)]
		public __Reply__task_inspect_t Reply_task_inspect;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__thread_terminate_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__act_get_state_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int flavor;

		public uint old_stateCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__act_set_state_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int flavor;

		public uint new_stateCnt;

		public uint[] new_state;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__thread_get_state_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int flavor;

		public uint old_stateCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__thread_set_state_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int flavor;

		public uint new_stateCnt;

		public uint[] new_state;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__thread_suspend_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__thread_resume_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__thread_abort_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__thread_abort_safely_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__thread_depress_abort_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__thread_get_special_port_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int which_port;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__thread_set_special_port_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t special_port;

		public NDR_record_t NDR;

		public int which_port;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__thread_info_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint flavor;

		public uint thread_info_outCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__thread_set_exception_ports_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t new_port;

		public NDR_record_t NDR;

		public uint exception_mask;

		public int behavior;

		public int new_flavor;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__thread_get_exception_ports_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint exception_mask;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__thread_swap_exception_ports_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t new_port;

		public NDR_record_t NDR;

		public uint exception_mask;

		public int behavior;

		public int new_flavor;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__thread_policy_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int policy;

		public uint baseCnt;

		public int[] @base;

		public int set_limit;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__thread_policy_set_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint flavor;

		public uint policy_infoCnt;

		public int[] policy_info;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__thread_policy_get_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint flavor;

		public uint policy_infoCnt;

		public int get_default;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__thread_sample_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t reply;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__etap_trace_thread_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int trace_status;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__thread_assign_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t new_set;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__thread_assign_default_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__thread_get_assignment_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__thread_set_policy_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t pset;

		public NDR_record_t NDR;

		public int policy;

		public uint baseCnt;

		public int[] @base;

		public uint limitCnt;

		public int[] limit;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__thread_get_mach_voucher_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint which;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__thread_set_mach_voucher_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t voucher;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__thread_swap_mach_voucher_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t new_voucher;

		public mach_msg_port_descriptor_t old_voucher;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct __RequestUnion__thread_act_subsystem
	{
		[FieldOffset (0)]
		public __Request__thread_terminate_t Request_thread_terminate;

		[FieldOffset (0)]
		public __Request__act_get_state_t Request_act_get_state;

		[FieldOffset (0)]
		public __Request__act_set_state_t Request_act_set_state;

		[FieldOffset (0)]
		public __Request__thread_get_state_t Request_thread_get_state;

		[FieldOffset (0)]
		public __Request__thread_set_state_t Request_thread_set_state;

		[FieldOffset (0)]
		public __Request__thread_suspend_t Request_thread_suspend;

		[FieldOffset (0)]
		public __Request__thread_resume_t Request_thread_resume;

		[FieldOffset (0)]
		public __Request__thread_abort_t Request_thread_abort;

		[FieldOffset (0)]
		public __Request__thread_abort_safely_t Request_thread_abort_safely;

		[FieldOffset (0)]
		public __Request__thread_depress_abort_t Request_thread_depress_abort;

		[FieldOffset (0)]
		public __Request__thread_get_special_port_t Request_thread_get_special_port;

		[FieldOffset (0)]
		public __Request__thread_set_special_port_t Request_thread_set_special_port;

		[FieldOffset (0)]
		public __Request__thread_info_t Request_thread_info;

		[FieldOffset (0)]
		public __Request__thread_set_exception_ports_t Request_thread_set_exception_ports;

		[FieldOffset (0)]
		public __Request__thread_get_exception_ports_t Request_thread_get_exception_ports;

		[FieldOffset (0)]
		public __Request__thread_swap_exception_ports_t Request_thread_swap_exception_ports;

		[FieldOffset (0)]
		public __Request__thread_policy_t Request_thread_policy;

		[FieldOffset (0)]
		public __Request__thread_policy_set_t Request_thread_policy_set;

		[FieldOffset (0)]
		public __Request__thread_policy_get_t Request_thread_policy_get;

		[FieldOffset (0)]
		public __Request__thread_sample_t Request_thread_sample;

		[FieldOffset (0)]
		public __Request__etap_trace_thread_t Request_etap_trace_thread;

		[FieldOffset (0)]
		public __Request__thread_assign_t Request_thread_assign;

		[FieldOffset (0)]
		public __Request__thread_assign_default_t Request_thread_assign_default;

		[FieldOffset (0)]
		public __Request__thread_get_assignment_t Request_thread_get_assignment;

		[FieldOffset (0)]
		public __Request__thread_set_policy_t Request_thread_set_policy;

		[FieldOffset (0)]
		public __Request__thread_get_mach_voucher_t Request_thread_get_mach_voucher;

		[FieldOffset (0)]
		public __Request__thread_set_mach_voucher_t Request_thread_set_mach_voucher;

		[FieldOffset (0)]
		public __Request__thread_swap_mach_voucher_t Request_thread_swap_mach_voucher;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__thread_terminate_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__act_get_state_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public uint old_stateCnt;

		public uint[] old_state;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__act_set_state_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__thread_get_state_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public uint old_stateCnt;

		public uint[] old_state;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__thread_set_state_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__thread_suspend_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__thread_resume_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__thread_abort_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__thread_abort_safely_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__thread_depress_abort_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__thread_get_special_port_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t special_port;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__thread_set_special_port_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__thread_info_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public uint thread_info_outCnt;

		public int[] thread_info_out;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__thread_set_exception_ports_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__thread_get_exception_ports_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t[] old_handlers;

		public NDR_record_t NDR;

		public uint masksCnt;

		public uint[] masks;

		public int[] old_behaviors;

		public int[] old_flavors;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__thread_swap_exception_ports_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t[] old_handlers;

		public NDR_record_t NDR;

		public uint masksCnt;

		public uint[] masks;

		public int[] old_behaviors;

		public int[] old_flavors;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__thread_policy_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__thread_policy_set_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__thread_policy_get_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public uint policy_infoCnt;

		public int[] policy_info;

		public int get_default;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__thread_sample_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__etap_trace_thread_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__thread_assign_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__thread_assign_default_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__thread_get_assignment_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t assigned_set;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__thread_set_policy_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__thread_get_mach_voucher_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t voucher;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__thread_set_mach_voucher_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__thread_swap_mach_voucher_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t old_voucher;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct __ReplyUnion__thread_act_subsystem
	{
		[FieldOffset (0)]
		public __Reply__thread_terminate_t Reply_thread_terminate;

		[FieldOffset (0)]
		public __Reply__act_get_state_t Reply_act_get_state;

		[FieldOffset (0)]
		public __Reply__act_set_state_t Reply_act_set_state;

		[FieldOffset (0)]
		public __Reply__thread_get_state_t Reply_thread_get_state;

		[FieldOffset (0)]
		public __Reply__thread_set_state_t Reply_thread_set_state;

		[FieldOffset (0)]
		public __Reply__thread_suspend_t Reply_thread_suspend;

		[FieldOffset (0)]
		public __Reply__thread_resume_t Reply_thread_resume;

		[FieldOffset (0)]
		public __Reply__thread_abort_t Reply_thread_abort;

		[FieldOffset (0)]
		public __Reply__thread_abort_safely_t Reply_thread_abort_safely;

		[FieldOffset (0)]
		public __Reply__thread_depress_abort_t Reply_thread_depress_abort;

		[FieldOffset (0)]
		public __Reply__thread_get_special_port_t Reply_thread_get_special_port;

		[FieldOffset (0)]
		public __Reply__thread_set_special_port_t Reply_thread_set_special_port;

		[FieldOffset (0)]
		public __Reply__thread_info_t Reply_thread_info;

		[FieldOffset (0)]
		public __Reply__thread_set_exception_ports_t Reply_thread_set_exception_ports;

		[FieldOffset (0)]
		public __Reply__thread_get_exception_ports_t Reply_thread_get_exception_ports;

		[FieldOffset (0)]
		public __Reply__thread_swap_exception_ports_t Reply_thread_swap_exception_ports;

		[FieldOffset (0)]
		public __Reply__thread_policy_t Reply_thread_policy;

		[FieldOffset (0)]
		public __Reply__thread_policy_set_t Reply_thread_policy_set;

		[FieldOffset (0)]
		public __Reply__thread_policy_get_t Reply_thread_policy_get;

		[FieldOffset (0)]
		public __Reply__thread_sample_t Reply_thread_sample;

		[FieldOffset (0)]
		public __Reply__etap_trace_thread_t Reply_etap_trace_thread;

		[FieldOffset (0)]
		public __Reply__thread_assign_t Reply_thread_assign;

		[FieldOffset (0)]
		public __Reply__thread_assign_default_t Reply_thread_assign_default;

		[FieldOffset (0)]
		public __Reply__thread_get_assignment_t Reply_thread_get_assignment;

		[FieldOffset (0)]
		public __Reply__thread_set_policy_t Reply_thread_set_policy;

		[FieldOffset (0)]
		public __Reply__thread_get_mach_voucher_t Reply_thread_get_mach_voucher;

		[FieldOffset (0)]
		public __Reply__thread_set_mach_voucher_t Reply_thread_set_mach_voucher;

		[FieldOffset (0)]
		public __Reply__thread_swap_mach_voucher_t Reply_thread_swap_mach_voucher;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__vm_region_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public UIntPtr address;

		public int flavor;

		public uint infoCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__vm_allocate_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public UIntPtr address;

		public UIntPtr size;

		public int flags;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__vm_deallocate_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public UIntPtr address;

		public UIntPtr size;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__vm_protect_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public UIntPtr address;

		public UIntPtr size;

		public int set_maximum;

		public int new_protection;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__vm_inherit_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public UIntPtr address;

		public UIntPtr size;

		public uint new_inheritance;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__vm_read_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public UIntPtr address;

		public UIntPtr size;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__vm_read_list_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public vm_read_entry_t[] data_list;

		public uint count;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__vm_write_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_ool_descriptor_t data;

		public NDR_record_t NDR;

		public UIntPtr address;

		public uint dataCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__vm_copy_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public UIntPtr source_address;

		public UIntPtr size;

		public UIntPtr dest_address;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__vm_read_overwrite_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public UIntPtr address;

		public UIntPtr size;

		public UIntPtr data;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__vm_msync_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public UIntPtr address;

		public UIntPtr size;

		public uint sync_flags;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__vm_behavior_set_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public UIntPtr address;

		public UIntPtr size;

		public int new_behavior;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__vm_map_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t @object;

		public NDR_record_t NDR;

		public UIntPtr address;

		public UIntPtr size;

		public UIntPtr mask;

		public int flags;

		public UIntPtr offset;

		public int copy;

		public int cur_protection;

		public int max_protection;

		public uint inheritance;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__vm_machine_attribute_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public UIntPtr address;

		public UIntPtr size;

		public uint attribute;

		public int value;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__vm_remap_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t src_task;

		public NDR_record_t NDR;

		public UIntPtr target_address;

		public UIntPtr size;

		public UIntPtr mask;

		public int flags;

		public UIntPtr src_address;

		public int copy;

		public uint inheritance;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_wire_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int must_wire;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_make_memory_entry_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t parent_entry;

		public NDR_record_t NDR;

		public UIntPtr size;

		public UIntPtr offset;

		public int permission;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__vm_map_page_query_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public UIntPtr offset;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_vm_region_info_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public UIntPtr address;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__vm_mapped_pages_info_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__vm_region_recurse_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public UIntPtr address;

		public uint nesting_depth;

		public uint infoCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__vm_region_recurse_64_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public UIntPtr address;

		public uint nesting_depth;

		public uint infoCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_vm_region_info_64_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public UIntPtr address;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__vm_region_64_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public UIntPtr address;

		public int flavor;

		public uint infoCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_make_memory_entry_64_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t parent_entry;

		public NDR_record_t NDR;

		public ulong size;

		public ulong offset;

		public int permission;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__vm_map_64_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t @object;

		public NDR_record_t NDR;

		public UIntPtr address;

		public UIntPtr size;

		public UIntPtr mask;

		public int flags;

		public ulong offset;

		public int copy;

		public int cur_protection;

		public int max_protection;

		public uint inheritance;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__vm_purgable_control_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public UIntPtr address;

		public int control;

		public int state;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct __RequestUnion__vm_map_subsystem
	{
		[FieldOffset (0)]
		public __Request__vm_region_t Request_vm_region;

		[FieldOffset (0)]
		public __Request__vm_allocate_t Request_vm_allocate;

		[FieldOffset (0)]
		public __Request__vm_deallocate_t Request_vm_deallocate;

		[FieldOffset (0)]
		public __Request__vm_protect_t Request_vm_protect;

		[FieldOffset (0)]
		public __Request__vm_inherit_t Request_vm_inherit;

		[FieldOffset (0)]
		public __Request__vm_read_t Request_vm_read;

		[FieldOffset (0)]
		public __Request__vm_read_list_t Request_vm_read_list;

		[FieldOffset (0)]
		public __Request__vm_write_t Request_vm_write;

		[FieldOffset (0)]
		public __Request__vm_copy_t Request_vm_copy;

		[FieldOffset (0)]
		public __Request__vm_read_overwrite_t Request_vm_read_overwrite;

		[FieldOffset (0)]
		public __Request__vm_msync_t Request_vm_msync;

		[FieldOffset (0)]
		public __Request__vm_behavior_set_t Request_vm_behavior_set;

		[FieldOffset (0)]
		public __Request__vm_map_t Request_vm_map;

		[FieldOffset (0)]
		public __Request__vm_machine_attribute_t Request_vm_machine_attribute;

		[FieldOffset (0)]
		public __Request__vm_remap_t Request_vm_remap;

		[FieldOffset (0)]
		public __Request__task_wire_t Request_task_wire;

		[FieldOffset (0)]
		public __Request__mach_make_memory_entry_t Request_mach_make_memory_entry;

		[FieldOffset (0)]
		public __Request__vm_map_page_query_t Request_vm_map_page_query;

		[FieldOffset (0)]
		public __Request__mach_vm_region_info_t Request_mach_vm_region_info;

		[FieldOffset (0)]
		public __Request__vm_mapped_pages_info_t Request_vm_mapped_pages_info;

		[FieldOffset (0)]
		public __Request__vm_region_recurse_t Request_vm_region_recurse;

		[FieldOffset (0)]
		public __Request__vm_region_recurse_64_t Request_vm_region_recurse_64;

		[FieldOffset (0)]
		public __Request__mach_vm_region_info_64_t Request_mach_vm_region_info_64;

		[FieldOffset (0)]
		public __Request__vm_region_64_t Request_vm_region_64;

		[FieldOffset (0)]
		public __Request__mach_make_memory_entry_64_t Request_mach_make_memory_entry_64;

		[FieldOffset (0)]
		public __Request__vm_map_64_t Request_vm_map_64;

		[FieldOffset (0)]
		public __Request__vm_purgable_control_t Request_vm_purgable_control;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__vm_region_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t object_name;

		public NDR_record_t NDR;

		public UIntPtr address;

		public UIntPtr size;

		public uint infoCnt;

		public int[] info;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__vm_allocate_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public UIntPtr address;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__vm_deallocate_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__vm_protect_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__vm_inherit_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__vm_read_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_ool_descriptor_t data;

		public NDR_record_t NDR;

		public uint dataCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__vm_read_list_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public vm_read_entry_t[] data_list;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__vm_write_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__vm_copy_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__vm_read_overwrite_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public UIntPtr outsize;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__vm_msync_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__vm_behavior_set_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__vm_map_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public UIntPtr address;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__vm_machine_attribute_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public int value;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__vm_remap_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public UIntPtr target_address;

		public int cur_protection;

		public int max_protection;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_wire_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_make_memory_entry_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t object_handle;

		public NDR_record_t NDR;

		public UIntPtr size;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__vm_map_page_query_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public int disposition;

		public int ref_count;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_vm_region_info_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_ool_descriptor_t objects;

		public NDR_record_t NDR;

		public vm_info_region_t region;

		public uint objectsCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__vm_mapped_pages_info_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_ool_descriptor_t pages;

		public NDR_record_t NDR;

		public uint pagesCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__vm_region_recurse_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public UIntPtr address;

		public UIntPtr size;

		public uint nesting_depth;

		public uint infoCnt;

		public int[] info;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__vm_region_recurse_64_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public UIntPtr address;

		public UIntPtr size;

		public uint nesting_depth;

		public uint infoCnt;

		public int[] info;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_vm_region_info_64_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_ool_descriptor_t objects;

		public NDR_record_t NDR;

		public vm_info_region_64_t region;

		public uint objectsCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__vm_region_64_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t object_name;

		public NDR_record_t NDR;

		public UIntPtr address;

		public UIntPtr size;

		public uint infoCnt;

		public int[] info;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_make_memory_entry_64_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t object_handle;

		public NDR_record_t NDR;

		public ulong size;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__vm_map_64_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public UIntPtr address;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__vm_purgable_control_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public int state;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct __ReplyUnion__vm_map_subsystem
	{
		[FieldOffset (0)]
		public __Reply__vm_region_t Reply_vm_region;

		[FieldOffset (0)]
		public __Reply__vm_allocate_t Reply_vm_allocate;

		[FieldOffset (0)]
		public __Reply__vm_deallocate_t Reply_vm_deallocate;

		[FieldOffset (0)]
		public __Reply__vm_protect_t Reply_vm_protect;

		[FieldOffset (0)]
		public __Reply__vm_inherit_t Reply_vm_inherit;

		[FieldOffset (0)]
		public __Reply__vm_read_t Reply_vm_read;

		[FieldOffset (0)]
		public __Reply__vm_read_list_t Reply_vm_read_list;

		[FieldOffset (0)]
		public __Reply__vm_write_t Reply_vm_write;

		[FieldOffset (0)]
		public __Reply__vm_copy_t Reply_vm_copy;

		[FieldOffset (0)]
		public __Reply__vm_read_overwrite_t Reply_vm_read_overwrite;

		[FieldOffset (0)]
		public __Reply__vm_msync_t Reply_vm_msync;

		[FieldOffset (0)]
		public __Reply__vm_behavior_set_t Reply_vm_behavior_set;

		[FieldOffset (0)]
		public __Reply__vm_map_t Reply_vm_map;

		[FieldOffset (0)]
		public __Reply__vm_machine_attribute_t Reply_vm_machine_attribute;

		[FieldOffset (0)]
		public __Reply__vm_remap_t Reply_vm_remap;

		[FieldOffset (0)]
		public __Reply__task_wire_t Reply_task_wire;

		[FieldOffset (0)]
		public __Reply__mach_make_memory_entry_t Reply_mach_make_memory_entry;

		[FieldOffset (0)]
		public __Reply__vm_map_page_query_t Reply_vm_map_page_query;

		[FieldOffset (0)]
		public __Reply__mach_vm_region_info_t Reply_mach_vm_region_info;

		[FieldOffset (0)]
		public __Reply__vm_mapped_pages_info_t Reply_vm_mapped_pages_info;

		[FieldOffset (0)]
		public __Reply__vm_region_recurse_t Reply_vm_region_recurse;

		[FieldOffset (0)]
		public __Reply__vm_region_recurse_64_t Reply_vm_region_recurse_64;

		[FieldOffset (0)]
		public __Reply__mach_vm_region_info_64_t Reply_mach_vm_region_info_64;

		[FieldOffset (0)]
		public __Reply__vm_region_64_t Reply_vm_region_64;

		[FieldOffset (0)]
		public __Reply__mach_make_memory_entry_64_t Reply_mach_make_memory_entry_64;

		[FieldOffset (0)]
		public __Reply__vm_map_64_t Reply_vm_map_64;

		[FieldOffset (0)]
		public __Reply__vm_purgable_control_t Reply_vm_purgable_control;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_port_names_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_port_type_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint name;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_port_rename_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint old_name;

		public uint new_name;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_port_allocate_name_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint right;

		public uint name;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_port_allocate_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint right;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_port_destroy_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint name;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_port_deallocate_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint name;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_port_get_refs_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint name;

		public uint right;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_port_mod_refs_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint name;

		public uint right;

		public int delta;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_port_peek_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint name;

		public uint trailer_type;

		public uint request_seqnop;

		public uint trailer_infopCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_port_set_mscount_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint name;

		public uint mscount;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_port_get_set_status_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint name;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_port_move_member_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint member;

		public uint after;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_port_request_notification_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t notify;

		public NDR_record_t NDR;

		public uint name;

		public int msgid;

		public uint sync;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_port_insert_right_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t poly;

		public NDR_record_t NDR;

		public uint name;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_port_extract_right_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint name;

		public uint msgt_name;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_port_set_seqno_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint name;

		public uint seqno;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_port_get_attributes_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint name;

		public int flavor;

		public uint port_info_outCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_port_set_attributes_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint name;

		public int flavor;

		public uint port_infoCnt;

		public int[] port_info;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_port_allocate_qos_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint right;

		public mach_port_qos_t qos;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_port_allocate_full_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t proto;

		public NDR_record_t NDR;

		public uint right;

		public mach_port_qos_t qos;

		public uint name;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__task_set_port_space_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int table_entries;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_port_get_srights_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint name;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_port_space_info_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_port_dnrequest_info_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint name;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_port_kernel_object_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint name;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_port_insert_member_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint name;

		public uint pset;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_port_extract_member_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint name;

		public uint pset;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_port_get_context_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint name;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_port_set_context_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint name;

		public UIntPtr context;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_port_kobject_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint name;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_port_construct_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_ool_descriptor_t options;

		public NDR_record_t NDR;

		public UIntPtr context;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_port_destruct_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint name;

		public int srdelta;

		public UIntPtr guard;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_port_guard_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint name;

		public UIntPtr guard;

		public int strict;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_port_unguard_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint name;

		public UIntPtr guard;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_port_space_basic_info_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct __RequestUnion__mach_port_subsystem
	{
		[FieldOffset (0)]
		public __Request__mach_port_names_t Request_mach_port_names;

		[FieldOffset (0)]
		public __Request__mach_port_type_t Request_mach_port_type;

		[FieldOffset (0)]
		public __Request__mach_port_rename_t Request_mach_port_rename;

		[FieldOffset (0)]
		public __Request__mach_port_allocate_name_t Request_mach_port_allocate_name;

		[FieldOffset (0)]
		public __Request__mach_port_allocate_t Request_mach_port_allocate;

		[FieldOffset (0)]
		public __Request__mach_port_destroy_t Request_mach_port_destroy;

		[FieldOffset (0)]
		public __Request__mach_port_deallocate_t Request_mach_port_deallocate;

		[FieldOffset (0)]
		public __Request__mach_port_get_refs_t Request_mach_port_get_refs;

		[FieldOffset (0)]
		public __Request__mach_port_mod_refs_t Request_mach_port_mod_refs;

		[FieldOffset (0)]
		public __Request__mach_port_peek_t Request_mach_port_peek;

		[FieldOffset (0)]
		public __Request__mach_port_set_mscount_t Request_mach_port_set_mscount;

		[FieldOffset (0)]
		public __Request__mach_port_get_set_status_t Request_mach_port_get_set_status;

		[FieldOffset (0)]
		public __Request__mach_port_move_member_t Request_mach_port_move_member;

		[FieldOffset (0)]
		public __Request__mach_port_request_notification_t Request_mach_port_request_notification;

		[FieldOffset (0)]
		public __Request__mach_port_insert_right_t Request_mach_port_insert_right;

		[FieldOffset (0)]
		public __Request__mach_port_extract_right_t Request_mach_port_extract_right;

		[FieldOffset (0)]
		public __Request__mach_port_set_seqno_t Request_mach_port_set_seqno;

		[FieldOffset (0)]
		public __Request__mach_port_get_attributes_t Request_mach_port_get_attributes;

		[FieldOffset (0)]
		public __Request__mach_port_set_attributes_t Request_mach_port_set_attributes;

		[FieldOffset (0)]
		public __Request__mach_port_allocate_qos_t Request_mach_port_allocate_qos;

		[FieldOffset (0)]
		public __Request__mach_port_allocate_full_t Request_mach_port_allocate_full;

		[FieldOffset (0)]
		public __Request__task_set_port_space_t Request_task_set_port_space;

		[FieldOffset (0)]
		public __Request__mach_port_get_srights_t Request_mach_port_get_srights;

		[FieldOffset (0)]
		public __Request__mach_port_space_info_t Request_mach_port_space_info;

		[FieldOffset (0)]
		public __Request__mach_port_dnrequest_info_t Request_mach_port_dnrequest_info;

		[FieldOffset (0)]
		public __Request__mach_port_kernel_object_t Request_mach_port_kernel_object;

		[FieldOffset (0)]
		public __Request__mach_port_insert_member_t Request_mach_port_insert_member;

		[FieldOffset (0)]
		public __Request__mach_port_extract_member_t Request_mach_port_extract_member;

		[FieldOffset (0)]
		public __Request__mach_port_get_context_t Request_mach_port_get_context;

		[FieldOffset (0)]
		public __Request__mach_port_set_context_t Request_mach_port_set_context;

		[FieldOffset (0)]
		public __Request__mach_port_kobject_t Request_mach_port_kobject;

		[FieldOffset (0)]
		public __Request__mach_port_construct_t Request_mach_port_construct;

		[FieldOffset (0)]
		public __Request__mach_port_destruct_t Request_mach_port_destruct;

		[FieldOffset (0)]
		public __Request__mach_port_guard_t Request_mach_port_guard;

		[FieldOffset (0)]
		public __Request__mach_port_unguard_t Request_mach_port_unguard;

		[FieldOffset (0)]
		public __Request__mach_port_space_basic_info_t Request_mach_port_space_basic_info;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_port_names_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_ool_descriptor_t names;

		public mach_msg_ool_descriptor_t types;

		public NDR_record_t NDR;

		public uint namesCnt;

		public uint typesCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_port_type_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public uint ptype;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_port_rename_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_port_allocate_name_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_port_allocate_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public uint name;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_port_destroy_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_port_deallocate_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_port_get_refs_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public uint refs;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_port_mod_refs_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_port_peek_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public uint request_seqnop;

		public uint msg_sizep;

		public int msg_idp;

		public uint trailer_infopCnt;

		public sbyte[] trailer_infop;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_port_set_mscount_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_port_get_set_status_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_ool_descriptor_t members;

		public NDR_record_t NDR;

		public uint membersCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_port_move_member_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_port_request_notification_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t previous;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_port_insert_right_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_port_extract_right_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t poly;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_port_set_seqno_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_port_get_attributes_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public uint port_info_outCnt;

		public int[] port_info_out;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_port_set_attributes_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_port_allocate_qos_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public mach_port_qos_t qos;

		public uint name;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_port_allocate_full_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public mach_port_qos_t qos;

		public uint name;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__task_set_port_space_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_port_get_srights_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public uint srights;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_port_space_info_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_ool_descriptor_t table_info;

		public mach_msg_ool_descriptor_t tree_info;

		public NDR_record_t NDR;

		public ipc_info_space_t space_info;

		public uint table_infoCnt;

		public uint tree_infoCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_port_dnrequest_info_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public uint dnr_total;

		public uint dnr_used;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_port_kernel_object_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public uint object_type;

		public uint object_addr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_port_insert_member_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_port_extract_member_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_port_get_context_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public UIntPtr context;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_port_set_context_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_port_kobject_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public uint object_type;

		public ulong object_addr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_port_construct_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public uint name;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_port_destruct_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_port_guard_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_port_unguard_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_port_space_basic_info_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public ipc_info_space_basic_t basic_info;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct __ReplyUnion__mach_port_subsystem
	{
		[FieldOffset (0)]
		public __Reply__mach_port_names_t Reply_mach_port_names;

		[FieldOffset (0)]
		public __Reply__mach_port_type_t Reply_mach_port_type;

		[FieldOffset (0)]
		public __Reply__mach_port_rename_t Reply_mach_port_rename;

		[FieldOffset (0)]
		public __Reply__mach_port_allocate_name_t Reply_mach_port_allocate_name;

		[FieldOffset (0)]
		public __Reply__mach_port_allocate_t Reply_mach_port_allocate;

		[FieldOffset (0)]
		public __Reply__mach_port_destroy_t Reply_mach_port_destroy;

		[FieldOffset (0)]
		public __Reply__mach_port_deallocate_t Reply_mach_port_deallocate;

		[FieldOffset (0)]
		public __Reply__mach_port_get_refs_t Reply_mach_port_get_refs;

		[FieldOffset (0)]
		public __Reply__mach_port_mod_refs_t Reply_mach_port_mod_refs;

		[FieldOffset (0)]
		public __Reply__mach_port_peek_t Reply_mach_port_peek;

		[FieldOffset (0)]
		public __Reply__mach_port_set_mscount_t Reply_mach_port_set_mscount;

		[FieldOffset (0)]
		public __Reply__mach_port_get_set_status_t Reply_mach_port_get_set_status;

		[FieldOffset (0)]
		public __Reply__mach_port_move_member_t Reply_mach_port_move_member;

		[FieldOffset (0)]
		public __Reply__mach_port_request_notification_t Reply_mach_port_request_notification;

		[FieldOffset (0)]
		public __Reply__mach_port_insert_right_t Reply_mach_port_insert_right;

		[FieldOffset (0)]
		public __Reply__mach_port_extract_right_t Reply_mach_port_extract_right;

		[FieldOffset (0)]
		public __Reply__mach_port_set_seqno_t Reply_mach_port_set_seqno;

		[FieldOffset (0)]
		public __Reply__mach_port_get_attributes_t Reply_mach_port_get_attributes;

		[FieldOffset (0)]
		public __Reply__mach_port_set_attributes_t Reply_mach_port_set_attributes;

		[FieldOffset (0)]
		public __Reply__mach_port_allocate_qos_t Reply_mach_port_allocate_qos;

		[FieldOffset (0)]
		public __Reply__mach_port_allocate_full_t Reply_mach_port_allocate_full;

		[FieldOffset (0)]
		public __Reply__task_set_port_space_t Reply_task_set_port_space;

		[FieldOffset (0)]
		public __Reply__mach_port_get_srights_t Reply_mach_port_get_srights;

		[FieldOffset (0)]
		public __Reply__mach_port_space_info_t Reply_mach_port_space_info;

		[FieldOffset (0)]
		public __Reply__mach_port_dnrequest_info_t Reply_mach_port_dnrequest_info;

		[FieldOffset (0)]
		public __Reply__mach_port_kernel_object_t Reply_mach_port_kernel_object;

		[FieldOffset (0)]
		public __Reply__mach_port_insert_member_t Reply_mach_port_insert_member;

		[FieldOffset (0)]
		public __Reply__mach_port_extract_member_t Reply_mach_port_extract_member;

		[FieldOffset (0)]
		public __Reply__mach_port_get_context_t Reply_mach_port_get_context;

		[FieldOffset (0)]
		public __Reply__mach_port_set_context_t Reply_mach_port_set_context;

		[FieldOffset (0)]
		public __Reply__mach_port_kobject_t Reply_mach_port_kobject;

		[FieldOffset (0)]
		public __Reply__mach_port_construct_t Reply_mach_port_construct;

		[FieldOffset (0)]
		public __Reply__mach_port_destruct_t Reply_mach_port_destruct;

		[FieldOffset (0)]
		public __Reply__mach_port_guard_t Reply_mach_port_guard;

		[FieldOffset (0)]
		public __Reply__mach_port_unguard_t Reply_mach_port_unguard;

		[FieldOffset (0)]
		public __Reply__mach_port_space_basic_info_t Reply_mach_port_space_basic_info;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__host_info_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int flavor;

		public uint host_info_outCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__host_kernel_version_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request___host_page_size_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_memory_object_memory_entry_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t pager;

		public NDR_record_t NDR;

		public int @internal;

		public UIntPtr size;

		public int permission;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__host_processor_info_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int flavor;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__host_get_io_master_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__host_get_clock_service_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int clock_id;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__kmod_get_info_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__host_virtual_physical_table_info_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__processor_set_default_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__processor_set_create_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_memory_object_memory_entry_64_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t pager;

		public NDR_record_t NDR;

		public int @internal;

		public ulong size;

		public int permission;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__host_statistics_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int flavor;

		public uint host_info_outCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__host_request_notification_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t notify_port;

		public NDR_record_t NDR;

		public int notify_type;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__host_lockgroup_info_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__host_statistics64_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int flavor;

		public uint host_info64_outCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_zone_info_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__host_create_mach_voucher_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint recipesCnt;

		public byte[] recipes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__host_register_mach_voucher_attr_manager_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t attr_manager;

		public NDR_record_t NDR;

		public ulong default_value;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__host_register_well_known_mach_voucher_attr_manager_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t attr_manager;

		public NDR_record_t NDR;

		public ulong default_value;

		public uint key;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__host_set_atm_diagnostic_flag_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint diagnostic_flag;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__host_get_atm_diagnostic_flag_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__mach_memory_info_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__host_set_multiuser_config_flags_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public uint multiuser_flags;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__host_get_multiuser_config_flags_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__host_check_multiuser_mode_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct __RequestUnion__mach_host_subsystem
	{
		[FieldOffset (0)]
		public __Request__host_info_t Request_host_info;

		[FieldOffset (0)]
		public __Request__host_kernel_version_t Request_host_kernel_version;

		[FieldOffset (0)]
		public __Request___host_page_size_t Request__host_page_size;

		[FieldOffset (0)]
		public __Request__mach_memory_object_memory_entry_t Request_mach_memory_object_memory_entry;

		[FieldOffset (0)]
		public __Request__host_processor_info_t Request_host_processor_info;

		[FieldOffset (0)]
		public __Request__host_get_io_master_t Request_host_get_io_master;

		[FieldOffset (0)]
		public __Request__host_get_clock_service_t Request_host_get_clock_service;

		[FieldOffset (0)]
		public __Request__kmod_get_info_t Request_kmod_get_info;

		[FieldOffset (0)]
		public __Request__host_virtual_physical_table_info_t Request_host_virtual_physical_table_info;

		[FieldOffset (0)]
		public __Request__processor_set_default_t Request_processor_set_default;

		[FieldOffset (0)]
		public __Request__processor_set_create_t Request_processor_set_create;

		[FieldOffset (0)]
		public __Request__mach_memory_object_memory_entry_64_t Request_mach_memory_object_memory_entry_64;

		[FieldOffset (0)]
		public __Request__host_statistics_t Request_host_statistics;

		[FieldOffset (0)]
		public __Request__host_request_notification_t Request_host_request_notification;

		[FieldOffset (0)]
		public __Request__host_lockgroup_info_t Request_host_lockgroup_info;

		[FieldOffset (0)]
		public __Request__host_statistics64_t Request_host_statistics64;

		[FieldOffset (0)]
		public __Request__mach_zone_info_t Request_mach_zone_info;

		[FieldOffset (0)]
		public __Request__host_create_mach_voucher_t Request_host_create_mach_voucher;

		[FieldOffset (0)]
		public __Request__host_register_mach_voucher_attr_manager_t Request_host_register_mach_voucher_attr_manager;

		[FieldOffset (0)]
		public __Request__host_register_well_known_mach_voucher_attr_manager_t Request_host_register_well_known_mach_voucher_attr_manager;

		[FieldOffset (0)]
		public __Request__host_set_atm_diagnostic_flag_t Request_host_set_atm_diagnostic_flag;

		[FieldOffset (0)]
		public __Request__host_get_atm_diagnostic_flag_t Request_host_get_atm_diagnostic_flag;

		[FieldOffset (0)]
		public __Request__mach_memory_info_t Request_mach_memory_info;

		[FieldOffset (0)]
		public __Request__host_set_multiuser_config_flags_t Request_host_set_multiuser_config_flags;

		[FieldOffset (0)]
		public __Request__host_get_multiuser_config_flags_t Request_host_get_multiuser_config_flags;

		[FieldOffset (0)]
		public __Request__host_check_multiuser_mode_t Request_host_check_multiuser_mode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__host_info_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public uint host_info_outCnt;

		public int[] host_info_out;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__host_kernel_version_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public uint kernel_versionOffset;

		public uint kernel_versionCnt;

		public sbyte[] kernel_version;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply___host_page_size_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public UIntPtr out_page_size;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_memory_object_memory_entry_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t entry_handle;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__host_processor_info_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_ool_descriptor_t out_processor_info;

		public NDR_record_t NDR;

		public uint out_processor_count;

		public uint out_processor_infoCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__host_get_io_master_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t io_master;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__host_get_clock_service_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t clock_serv;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__kmod_get_info_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_ool_descriptor_t modules;

		public NDR_record_t NDR;

		public uint modulesCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__host_virtual_physical_table_info_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_ool_descriptor_t info;

		public NDR_record_t NDR;

		public uint infoCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__processor_set_default_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t default_set;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__processor_set_create_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t new_set;

		public mach_msg_port_descriptor_t new_name;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_memory_object_memory_entry_64_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t entry_handle;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__host_statistics_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public uint host_info_outCnt;

		public int[] host_info_out;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__host_request_notification_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__host_lockgroup_info_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_ool_descriptor_t lockgroup_info;

		public NDR_record_t NDR;

		public uint lockgroup_infoCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__host_statistics64_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public uint host_info64_outCnt;

		public int[] host_info64_out;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_zone_info_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_ool_descriptor_t names;

		public mach_msg_ool_descriptor_t info;

		public NDR_record_t NDR;

		public uint namesCnt;

		public uint infoCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__host_create_mach_voucher_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t voucher;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__host_register_mach_voucher_attr_manager_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t new_attr_control;

		public NDR_record_t NDR;

		public uint new_key;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__host_register_well_known_mach_voucher_attr_manager_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t new_attr_control;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__host_set_atm_diagnostic_flag_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__host_get_atm_diagnostic_flag_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public uint diagnostic_flag;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__mach_memory_info_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_ool_descriptor_t names;

		public mach_msg_ool_descriptor_t info;

		public mach_msg_ool_descriptor_t memory_info;

		public NDR_record_t NDR;

		public uint namesCnt;

		public uint infoCnt;

		public uint memory_infoCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__host_set_multiuser_config_flags_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__host_get_multiuser_config_flags_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public uint multiuser_flags;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__host_check_multiuser_mode_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public uint multiuser_mode;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct __ReplyUnion__mach_host_subsystem
	{
		[FieldOffset (0)]
		public __Reply__host_info_t Reply_host_info;

		[FieldOffset (0)]
		public __Reply__host_kernel_version_t Reply_host_kernel_version;

		[FieldOffset (0)]
		public __Reply___host_page_size_t Reply__host_page_size;

		[FieldOffset (0)]
		public __Reply__mach_memory_object_memory_entry_t Reply_mach_memory_object_memory_entry;

		[FieldOffset (0)]
		public __Reply__host_processor_info_t Reply_host_processor_info;

		[FieldOffset (0)]
		public __Reply__host_get_io_master_t Reply_host_get_io_master;

		[FieldOffset (0)]
		public __Reply__host_get_clock_service_t Reply_host_get_clock_service;

		[FieldOffset (0)]
		public __Reply__kmod_get_info_t Reply_kmod_get_info;

		[FieldOffset (0)]
		public __Reply__host_virtual_physical_table_info_t Reply_host_virtual_physical_table_info;

		[FieldOffset (0)]
		public __Reply__processor_set_default_t Reply_processor_set_default;

		[FieldOffset (0)]
		public __Reply__processor_set_create_t Reply_processor_set_create;

		[FieldOffset (0)]
		public __Reply__mach_memory_object_memory_entry_64_t Reply_mach_memory_object_memory_entry_64;

		[FieldOffset (0)]
		public __Reply__host_statistics_t Reply_host_statistics;

		[FieldOffset (0)]
		public __Reply__host_request_notification_t Reply_host_request_notification;

		[FieldOffset (0)]
		public __Reply__host_lockgroup_info_t Reply_host_lockgroup_info;

		[FieldOffset (0)]
		public __Reply__host_statistics64_t Reply_host_statistics64;

		[FieldOffset (0)]
		public __Reply__mach_zone_info_t Reply_mach_zone_info;

		[FieldOffset (0)]
		public __Reply__host_create_mach_voucher_t Reply_host_create_mach_voucher;

		[FieldOffset (0)]
		public __Reply__host_register_mach_voucher_attr_manager_t Reply_host_register_mach_voucher_attr_manager;

		[FieldOffset (0)]
		public __Reply__host_register_well_known_mach_voucher_attr_manager_t Reply_host_register_well_known_mach_voucher_attr_manager;

		[FieldOffset (0)]
		public __Reply__host_set_atm_diagnostic_flag_t Reply_host_set_atm_diagnostic_flag;

		[FieldOffset (0)]
		public __Reply__host_get_atm_diagnostic_flag_t Reply_host_get_atm_diagnostic_flag;

		[FieldOffset (0)]
		public __Reply__mach_memory_info_t Reply_mach_memory_info;

		[FieldOffset (0)]
		public __Reply__host_set_multiuser_config_flags_t Reply_host_set_multiuser_config_flags;

		[FieldOffset (0)]
		public __Reply__host_get_multiuser_config_flags_t Reply_host_get_multiuser_config_flags;

		[FieldOffset (0)]
		public __Reply__host_check_multiuser_mode_t Reply_host_check_multiuser_mode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct rpc_routine_arg_descriptor
	{
		public uint type;

		public uint size;

		public uint count;

		public uint offset;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct rpc_routine_descriptor
	{
		public unsafe mig_impl_routine_t* impl_routine;

		public unsafe mig_stub_routine_t* stub_routine;

		public uint argc;

		public uint descr_count;

		public unsafe rpc_routine_arg_descriptor_t* arg_descr;

		public uint max_reply_msg;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct rpc_signature
	{
		public rpc_routine_descriptor rd;

		public rpc_routine_arg_descriptor[] rad;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct rpc_subsystem
	{
		public unsafe void* reserved;

		public int start;

		public int end;

		public uint maxsize;

		public UIntPtr base_addr;

		public rpc_routine_descriptor[] routine;

		public rpc_routine_arg_descriptor[] arg_descriptor;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__clock_get_time_t
	{
		public mach_msg_header_t Head;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__clock_get_attributes_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int flavor;

		public uint clock_attrCnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__clock_alarm_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t alarm_port;

		public NDR_record_t NDR;

		public int alarm_type;

		public mach_timespec_t alarm_time;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct __RequestUnion__clock_subsystem
	{
		[FieldOffset (0)]
		public __Request__clock_get_time_t Request_clock_get_time;

		[FieldOffset (0)]
		public __Request__clock_get_attributes_t Request_clock_get_attributes;

		[FieldOffset (0)]
		public __Request__clock_alarm_t Request_clock_alarm;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__clock_get_time_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public mach_timespec_t cur_time;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__clock_get_attributes_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public uint clock_attrCnt;

		public int[] clock_attr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__clock_alarm_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct __ReplyUnion__clock_subsystem
	{
		[FieldOffset (0)]
		public __Reply__clock_get_time_t Reply_clock_get_time;

		[FieldOffset (0)]
		public __Reply__clock_get_attributes_t Reply_clock_get_attributes;

		[FieldOffset (0)]
		public __Reply__clock_alarm_t Reply_clock_alarm;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__clock_alarm_reply_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int alarm_code;

		public int alarm_type;

		public mach_timespec_t alarm_time;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct __RequestUnion__clock_reply_subsystem
	{
		[FieldOffset (0)]
		public __Request__clock_alarm_reply_t Request_clock_alarm_reply;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__clock_alarm_reply_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct __ReplyUnion__clock_reply_subsystem
	{
		[FieldOffset (0)]
		public __Reply__clock_alarm_reply_t Reply_clock_alarm_reply;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__exception_raise_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t thread;

		public mach_msg_port_descriptor_t task;

		public NDR_record_t NDR;

		public int exception;

		public uint codeCnt;

		public int[] code;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__exception_raise_state_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int exception;

		public uint codeCnt;

		public int[] code;

		public int flavor;

		public uint old_stateCnt;

		public uint[] old_state;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Request__exception_raise_state_identity_t
	{
		public mach_msg_header_t Head;

		public mach_msg_body_t msgh_body;

		public mach_msg_port_descriptor_t thread;

		public mach_msg_port_descriptor_t task;

		public NDR_record_t NDR;

		public int exception;

		public uint codeCnt;

		public int[] code;

		public int flavor;

		public uint old_stateCnt;

		public uint[] old_state;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct __RequestUnion__exc_subsystem
	{
		[FieldOffset (0)]
		public __Request__exception_raise_t Request_exception_raise;

		[FieldOffset (0)]
		public __Request__exception_raise_state_t Request_exception_raise_state;

		[FieldOffset (0)]
		public __Request__exception_raise_state_identity_t Request_exception_raise_state_identity;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__exception_raise_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__exception_raise_state_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public int flavor;

		public uint new_stateCnt;

		public uint[] new_state;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __Reply__exception_raise_state_identity_t
	{
		public mach_msg_header_t Head;

		public NDR_record_t NDR;

		public int RetCode;

		public int flavor;

		public uint new_stateCnt;

		public uint[] new_state;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct __ReplyUnion__exc_subsystem
	{
		[FieldOffset (0)]
		public __Reply__exception_raise_t Reply_exception_raise;

		[FieldOffset (0)]
		public __Reply__exception_raise_state_t Reply_exception_raise_state;

		[FieldOffset (0)]
		public __Reply__exception_raise_state_identity_t Reply_exception_raise_state_identity;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_timebase_info_data_t
	{
		public uint numer;

		public uint denom;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct port_obj_tentry
	{
		public unsafe void* pos_value;

		public int pos_type;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct OSQueueHead
	{
		public unsafe void* opaque1;

		public nint opaque2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct os_unfair_lock
	{
		public uint _os_unfair_lock_opaque;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct malloc_zone_t
	{
		public unsafe void* reserved1;

		public unsafe void* reserved2;

		public unsafe Func<Darwin._malloc_zone_t*, void*, nuint>* size;

		public unsafe Func<Darwin._malloc_zone_t*, nuint, void*>* malloc;

		public unsafe Func<Darwin._malloc_zone_t*, nuint, nuint, void*>* calloc;

		public unsafe Func<Darwin._malloc_zone_t*, nuint, void*>* valloc;

		public unsafe Action<Darwin._malloc_zone_t*, void*>* free;

		public unsafe Func<Darwin._malloc_zone_t*, void*, nuint, void*>* realloc;

		public unsafe Action<Darwin._malloc_zone_t*>* destroy;

		public unsafe sbyte* zone_name;

		public unsafe Func<Darwin._malloc_zone_t*, nuint, void**, uint, uint>* batch_malloc;

		public unsafe Action<Darwin._malloc_zone_t*, void**, uint>* batch_free;

		public unsafe malloc_introspection_t* introspect;

		public uint version;

		public unsafe Func<Darwin._malloc_zone_t*, nuint, nuint, void*>* memalign;

		public unsafe Action<Darwin._malloc_zone_t*, void*, nuint>* free_definite_size;

		public unsafe Func<Darwin._malloc_zone_t*, nuint, nuint>* pressure_relief;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct vm_range_t
	{
		public UIntPtr address;

		public UIntPtr size;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct malloc_statistics_t
	{
		public uint blocks_in_use;

		public nuint size_in_use;

		public nuint max_size_in_use;

		public nuint size_allocated;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct malloc_introspection_t
	{
		public unsafe Func<uint, void*, uint, UIntPtr, memory_reader_t, vm_range_recorder_t, int>* enumerator;

		public unsafe Func<Darwin.malloc_zone_t*, nuint, nuint>* good_size;

		public unsafe Func<Darwin.malloc_zone_t*, int>* check;

		public unsafe Action<Darwin.malloc_zone_t*, int>* print;

		public unsafe Action<Darwin.malloc_zone_t*, void*>* log;

		public unsafe Action<Darwin.malloc_zone_t*>* force_lock;

		public unsafe Action<Darwin.malloc_zone_t*>* force_unlock;

		public unsafe Action<Darwin.malloc_zone_t*, Darwin.malloc_statistics_t*>* statistics;

		public unsafe Func<Darwin.malloc_zone_t*, int>* zone_locked;

		public unsafe Func<Darwin.malloc_zone_t*, int>* enable_discharge_checking;

		public unsafe Action<Darwin.malloc_zone_t*>* disable_discharge_checking;

		public unsafe Action<Darwin.malloc_zone_t*, void*>* discharge;

		public unsafe Action<Darwin.malloc_zone_t*, Action<void*, void*>>* enumerate_discharged_pointers;

		public unsafe Action<Darwin.malloc_zone_t*>* reinit_lock;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mstats
	{
		public nuint bytes_total;

		public nuint chunks_used;

		public nuint bytes_used;

		public nuint chunks_free;

		public nuint bytes_free;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct au_tid_t
	{
		public int port;

		public uint machine;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct au_tid_addr_t
	{
		public int at_port;

		public uint at_type;

		public uint[] at_addr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct au_mask_t
	{
		public uint am_success;

		public uint am_failure;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct auditinfo_t
	{
		public uint ai_auid;

		public au_mask_t ai_mask;

		public au_tid_t ai_termid;

		public int ai_asid;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct auditinfo_addr_t
	{
		public uint ai_auid;

		public au_mask_t ai_mask;

		public au_tid_addr_t ai_termid;

		public int ai_asid;

		public ulong ai_flags;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct auditpinfo_t
	{
		public int ap_pid;

		public uint ap_auid;

		public au_mask_t ap_mask;

		public au_tid_t ap_termid;

		public int ap_asid;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct auditpinfo_addr_t
	{
		public int ap_pid;

		public uint ap_auid;

		public au_mask_t ap_mask;

		public au_tid_addr_t ap_termid;

		public int ap_asid;

		public ulong ap_flags;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct au_session_t
	{
		public unsafe auditinfo_addr_t* as_aia_p;

		public au_mask_t as_mask;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct au_qctrl_t
	{
		public int aq_hiwater;

		public int aq_lowater;

		public int aq_bufsz;

		public int aq_delay;

		public int aq_minfree;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct au_stat_t
	{
		public uint as_version;

		public uint as_numevent;

		public int as_generated;

		public int as_nonattrib;

		public int as_kernel;

		public int as_audit;

		public int as_auditctl;

		public int as_enqueue;

		public int as_written;

		public int as_wblocked;

		public int as_rblocked;

		public int as_dropped;

		public int as_totalsize;

		public uint as_memused;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct au_fstat_t
	{
		public ulong af_filesz;

		public ulong af_currsz;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct au_evclass_map_t
	{
		public ushort ec_number;

		public uint ec_class;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ntsid_t
	{
		public byte sid_kind;

		public byte sid_authcount;

		public byte[] sid_authority;

		public uint[] sid_authorities;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct kauth_identity_extlookup
	{
		public uint el_seqno;

		public uint el_result;

		public uint el_flags;

		public int el_info_pid;

		public ulong el_extend;

		public uint el_info_reserved_1;

		public uint el_uid;

		public guid_t el_uguid;

		public uint el_uguid_valid;

		public ntsid_t el_usid;

		public uint el_usid_valid;

		public uint el_gid;

		public guid_t el_gguid;

		public uint el_gguid_valid;

		public ntsid_t el_gsid;

		public uint el_gsid_valid;

		public uint el_member_valid;

		public uint el_sup_grp_cnt;

		public uint[] el_sup_groups;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct kauth_cache_sizes
	{
		public uint kcs_group_size;

		public uint kcs_id_size;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct kauth_ace
	{
		public guid_t ace_applicable;

		public uint ace_flags;

		public uint ace_rights;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct kauth_acl
	{
		public uint acl_entrycount;

		public uint acl_flags;

		public kauth_ace[] acl_ace;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct kauth_filesec
	{
		public uint fsec_magic;

		public guid_t fsec_owner;

		public guid_t fsec_group;

		public kauth_acl fsec_acl;
	}

	public enum acl_perm_t : uint
	{
		ReadData = (1 << 1),
		ListDirectory = (1 << 1),
		WriteData = (1 << 2),
		AddFile = (1 << 2),
		Execute = (1 << 3),
		Search = (1 << 3),
		Delete = (1 << 4),
		AppendData = (1 << 5),
		AddSubdirectory = (1 << 5),
		DeleteChild = (1 << 6),
		ReadAttributes = (1 << 7),
		WriteAttributes = (1 << 8),
		ReadExtattributes = (1 << 9),
		WriteExtattributes = (1 << 10),
		ReadSecurity = (1 << 11),
		WriteSecurity = (1 << 12),
		ChangeOwner = (1 << 13),
		Synchronize = (1 << 20)
	}

	public enum acl_tag_t : uint
	{
		UndefinedTag = 0,
		ExtendedAllow = 1,
		ExtendedDeny = 2
	}

	public enum acl_type_t : uint
	{
		Extended = 256,
		Access = 0,
		Default = 1,
		Afs = 2,
		Coda = 3,
		Ntfs = 4,
		Nwfs = 5
	}

	public enum acl_entry_id_t
	{
		FirstEntry = 0,
		NextEntry = -1,
		LastEntry = -2
	}

	public enum acl_flag_t : uint
	{
		FlagDeferInherit = (1 << 0),
		FlagNoInherit = (1 << 17),
		EntryInherited = (1 << 4),
		EntryFileInherit = (1 << 5),
		EntryDirectoryInherit = (1 << 6),
		EntryLimitInherit = (1 << 7),
		EntryOnlyInherit = (1 << 8)
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ucred
	{
		[StructLayout (LayoutKind.Sequential)]
		public struct Cr_link
		{
			public unsafe ucred* tqe_next;

			public unsafe ucred** tqe_prev;
		}


		public Cr_link cr_link;

		public nuint cr_ref;

		[StructLayout (LayoutKind.Sequential)]
		public struct posix_cred
		{
			public uint cr_uid;

			public uint cr_ruid;

			public uint cr_svuid;

			public short cr_ngroups;

			public uint[] cr_groups;

			public uint cr_rgid;

			public uint cr_svgid;

			public uint cr_gmuid;

			public int cr_flags;
		}


		public posix_cred cr_posix;

		public unsafe label* cr_label;

		public au_session cr_audit;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct xucred
	{
		public uint cr_version;

		public uint cr_uid;

		public short cr_ngroups;

		public uint[] cr_groups;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct attrlist
	{
		public ushort bitmapcount;

		public ushort reserved;

		public uint commonattr;

		public uint volattr;

		public uint dirattr;

		public uint fileattr;

		public uint forkattr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct attribute_set_t
	{
		public uint commonattr;

		public uint volattr;

		public uint dirattr;

		public uint fileattr;

		public uint forkattr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct attrreference_t
	{
		public int attr_dataoffset;

		public uint attr_length;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct diskextent
	{
		public uint startblock;

		public uint blockcount;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct vol_capabilities_attr_t
	{
		public uint[] capabilities;

		public uint[] valid;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct vol_attributes_attr_t
	{
		public attribute_set_t validattr;

		public attribute_set_t nativeattr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct fssearchblock
	{
		public unsafe attrlist* returnattrs;

		public unsafe void* returnbuffer;

		public nuint returnbuffersize;

		public nuint maxmatches;

		public timeval timelimit;

		public unsafe void* searchparams1;

		public nuint sizeofsearchparams1;

		public unsafe void* searchparams2;

		public nuint sizeofsearchparams2;

		public attrlist searchattrs;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct searchstate
	{
		public uint ss_union_flags;

		public uint ss_union_layer;

		public byte[] ss_fsstate;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct kevent
	{
		public UIntPtr ident;

		public short filter;

		public ushort flags;

		public uint fflags;

		public IntPtr data;

		public unsafe void* udata;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct kevent64_s
	{
		public ulong ident;

		public short filter;

		public ushort flags;

		public uint fflags;

		public long data;

		public ulong udata;

		public ulong[] ext;
	}

	public enum  : uint
	{
		eNoteReapDeprecated = 268435456
	}

	public enum  : uint
	{
		eNoteExitReparentedDeprecated = 524288
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct klist
	{
		public unsafe knote* slh_first;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct statfs
	{
		public uint f_bsize;

		public int f_iosize;

		public ulong f_blocks;

		public ulong f_bfree;

		public ulong f_bavail;

		public ulong f_files;

		public ulong f_ffree;

		public fsid_t f_fsid;

		public uint f_owner;

		public uint f_type;

		public uint f_flags;

		public uint f_fssubtype;

		public sbyte[] f_fstypename;

		public sbyte[] f_mntonname;

		public sbyte[] f_mntfromname;

		public uint[] f_reserved;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct vfsstatfs
	{
		public uint f_bsize;

		public nuint f_iosize;

		public ulong f_blocks;

		public ulong f_bfree;

		public ulong f_bavail;

		public ulong f_bused;

		public ulong f_files;

		public ulong f_ffree;

		public fsid_t f_fsid;

		public uint f_owner;

		public ulong f_flags;

		public sbyte[] f_fstypename;

		public sbyte[] f_mntonname;

		public sbyte[] f_mntfromname;

		public uint f_fssubtype;

		public unsafe void*[] f_reserved;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct vfsconf
	{
		public uint vfc_reserved1;

		public sbyte[] vfc_name;

		public int vfc_typenum;

		public int vfc_refcount;

		public int vfc_flags;

		public uint vfc_reserved2;

		public uint vfc_reserved3;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct vfsidctl
	{
		public int vc_vers;

		public fsid_t vc_fsid;

		public unsafe void* vc_ptr;

		public nuint vc_len;

		public uint[] vc_spare;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct vfsquery
	{
		public uint vq_flags;

		public uint[] vq_spare;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct vfs_server
	{
		public int vs_minutes;

		public byte[] vs_server_name;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct netfs_status
	{
		public uint ns_status;

		public sbyte[] ns_mountopts;

		public uint ns_waittime;

		public uint ns_threadcount;

		public ulong[] ns_threadids;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct fhandle_t
	{
		public int fh_len;

		public byte[] fh_data;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct extern_proc
	{
		[StructLayout (LayoutKind.Explicit)]
		public struct P_un
		{
			[StructLayout (LayoutKind.Sequential)]
			public struct P_st1
			{
				public unsafe proc* __p_forw;

				public unsafe proc* __p_back;
			}


			[FieldOffset (0)]
			public P_st1 p_st1;

			[FieldOffset (0)]
			public timeval __p_starttime;
		}


		public P_un p_un;

		public unsafe vmspace* p_vmspace;

		public unsafe sigacts* p_sigacts;

		public int p_flag;

		public sbyte p_stat;

		public int p_pid;

		public int p_oppid;

		public int p_dupfd;

		public unsafe sbyte* user_stack;

		public unsafe void* exit_thread;

		public int p_debugger;

		public int sigwait;

		public uint p_estcpu;

		public int p_cpticks;

		public uint p_pctcpu;

		public unsafe void* p_wchan;

		public unsafe sbyte* p_wmesg;

		public uint p_swtime;

		public uint p_slptime;

		public itimerval p_realtimer;

		public timeval p_rtime;

		public ulong p_uticks;

		public ulong p_sticks;

		public ulong p_iticks;

		public int p_traceflag;

		public unsafe vnode* p_tracep;

		public int p_siglist;

		public unsafe vnode* p_textvp;

		public int p_holdcnt;

		public uint p_sigmask;

		public uint p_sigignore;

		public uint p_sigcatch;

		public byte p_priority;

		public byte p_usrpri;

		public sbyte p_nice;

		public sbyte[] p_comm;

		public unsafe pgrp* p_pgrp;

		public unsafe user* p_addr;

		public ushort p_xstat;

		public ushort p_acflag;

		public unsafe rusage* p_ru;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct dqfilehdr
	{
		public uint dqh_magic;

		public uint dqh_version;

		public uint dqh_maxentries;

		public uint dqh_entrycnt;

		public uint dqh_flags;

		public uint dqh_chktime;

		public uint dqh_btime;

		public uint dqh_itime;

		public sbyte[] dqh_string;

		public uint[] dqh_spare;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct dqblk
	{
		public ulong dqb_bhardlimit;

		public ulong dqb_bsoftlimit;

		public ulong dqb_curbytes;

		public uint dqb_ihardlimit;

		public uint dqb_isoftlimit;

		public uint dqb_curinodes;

		public uint dqb_btime;

		public uint dqb_itime;

		public uint dqb_id;

		public uint[] dqb_spare;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct rb_tree_ops_t
	{
		public unsafe rbto_compare_nodes_fn* rbto_compare_nodes;

		public unsafe rbto_compare_key_fn* rbto_compare_key;

		public nuint rbto_node_offset;

		public unsafe void* rbto_context;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct rb_node_t
	{
		public unsafe void*[] opaque;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct rb_tree_t
	{
		public unsafe void*[] opaque;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct vmspace
	{
		public int dummy;

		public unsafe sbyte* dummy2;

		public int[] dummy3;

		public unsafe sbyte*[] dummy4;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ctlname
	{
		public unsafe sbyte* ctl_name;

		public int ctl_type;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct _pcred
	{
		public sbyte[] pc_lock;

		public unsafe ucred* pc_ucred;

		public uint p_ruid;

		public uint p_svuid;

		public uint p_rgid;

		public uint p_svgid;

		public int p_refcnt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct _ucred
	{
		public int cr_ref;

		public uint cr_uid;

		public short cr_ngroups;

		public uint[] cr_groups;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct kinfo_proc
	{
		public extern_proc kp_proc;

		[StructLayout (LayoutKind.Sequential)]
		public struct eproc
		{
			public unsafe proc* e_paddr;

			public unsafe session* e_sess;

			public _pcred e_pcred;

			public _ucred e_ucred;

			public vmspace e_vm;

			public int e_ppid;

			public int e_pgid;

			public short e_jobc;

			public int e_tdev;

			public int e_tpgid;

			public unsafe session* e_tsess;

			public sbyte[] e_wmesg;

			public int e_xsize;

			public short e_xrssize;

			public short e_xccount;

			public short e_xswrss;

			public int e_flag;

			public sbyte[] e_login;

			public int[] e_spare;
		}


		public eproc kp_eproc;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct xsw_usage
	{
		public ulong xsu_total;

		public ulong xsu_avail;

		public ulong xsu_used;

		public uint xsu_pagesize;

		public int xsu_encrypted;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct loadavg
	{
		public uint[] ldavg;

		public nint fscale;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct timeb
	{
		public nint time;

		public ushort millitm;

		public short timezone;

		public short dstflag;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct fconv
	{
		[FieldOffset (0)]
		public float number;

		[FieldOffset (0)]
		public nuint sf;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct fconv
	{
		[FieldOffset (0)]
		public float number;

		[FieldOffset (0)]
		public nuint sf;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct dconv
	{
		[FieldOffset (0)]
		public double number;

		[FieldOffset (0)]
		public ulong sd;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct dconv
	{
		[FieldOffset (0)]
		public double number;

		[FieldOffset (0)]
		public ulong sd;
	}

	public enum NXByteOrder : uint
	{
		UnknownByteOrder,
		LittleEndian,
		BigEndian
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct objc_object
	{
		public Class isa;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct objc_method_description
	{
		public Selector name;

		public unsafe sbyte* types;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct objc_property_attribute_t
	{
		public unsafe sbyte* name;

		public unsafe sbyte* value;
	}

	public enum objc_AssociationPolicy : UIntPtr
	{
		Assign = 0,
		RetainNonatomic = 1,
		CopyNonatomic = 3,
		Retain = 769,
		Copy = 771
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct objc_super
	{
		public NSObject receiver;

		public Class super_class;
	}

	[Verify (InferredFromMemberPrefix)]
	public enum Objc : uint
	{
		RatioCollection = (0 << 0),
		GenerationalCollection = (1 << 0),
		FullCollection = (2 << 0),
		ExhaustiveCollection = (3 << 0),
		CollectIfNeeded = (1 << 3),
		WaitUntilDone = (1 << 4)
	}

	public enum  : uint
	{
		ObjcClearResidentStack = (1 << 0)
	}

	[Verify (InferredFromMemberPrefix)]
	public enum ObjcSync
	{
		Success = 0,
		NotOwningThreadError = -1
	}
}
